<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>李攀攀</title>
  
  <subtitle>李攀攀的博客</subtitle>
  <link href="http://blog.lipanpanx.com/atom.xml" rel="self"/>
  
  <link href="http://blog.lipanpanx.com/"/>
  <updated>2022-01-03T08:12:43.975Z</updated>
  <id>http://blog.lipanpanx.com/</id>
  
  <author>
    <name>李攀攀</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSS intrinsic and extrinsic sizing</title>
    <link href="http://blog.lipanpanx.com/post/2021/202104/CSS-intrinsic-and-extrinsic-sizing-specification"/>
    <id>http://blog.lipanpanx.com/post/2021/202104/CSS-intrinsic-and-extrinsic-sizing-specification</id>
    <published>2022-01-03T10:25:22.000Z</published>
    <updated>2022-01-03T08:12:43.975Z</updated>
    
    <content type="html"><![CDATA[<p>参考文档:</p><p><a href="https://developer.mozilla.org/en-US/docs/Glossary/Intrinsic_Size" target="_blank">Intrinsic size</a><br><a href="https://www.w3.org/TR/css-sizing-3/#intrinsic-sizes" target="_blank">CSS Box Sizing Level 3(WD-&gt;CR) Intrinsic Size Determination</a></p><p>Extrinsic sizing 根据元素的上下文确定大小，而不考虑元素的内容。<br>Intrinsic sizing 调整根据元素的内容确定大小，而不考虑其上下文。</p><h2 id="5.1.-intrinsic-sizes">5.1. Intrinsic Sizes<a title="#5.1.-intrinsic-sizes" href="#5.1.-intrinsic-sizes"></a></h2><h2 id="5.2.-intrinsic-contributions">5.2. Intrinsic Contributions<a title="#5.2.-intrinsic-contributions" href="#5.2.-intrinsic-contributions"></a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考文档:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Intrinsic_Size&quot; target=&quot;_blank&quot;&gt;Intrinsic size&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CSS Grid布局当中的grid-template-columns/rows/areas</title>
    <link href="http://blog.lipanpanx.com/post/2021/202104/CSS-Grid%E5%B8%83%E5%B1%80%E5%BD%93%E4%B8%AD%E7%9A%84grid-template"/>
    <id>http://blog.lipanpanx.com/post/2021/202104/CSS-Grid%E5%B8%83%E5%B1%80%E5%BD%93%E4%B8%AD%E7%9A%84grid-template</id>
    <published>2022-01-02T10:11:10.000Z</published>
    <updated>2022-01-03T08:12:43.975Z</updated>
    
    <content type="html"><![CDATA[<p>grid-template/</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;grid-template/&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>OBS 录制屏幕的指定区域</title>
    <link href="http://blog.lipanpanx.com/post/2021/202112/OBS-%E5%BD%95%E5%88%B6%E5%B1%8F%E5%B9%95%E7%9A%84%E6%8C%87%E5%AE%9A%E5%8C%BA%E5%9F%9F"/>
    <id>http://blog.lipanpanx.com/post/2021/202112/OBS-%E5%BD%95%E5%88%B6%E5%B1%8F%E5%B9%95%E7%9A%84%E6%8C%87%E5%AE%9A%E5%8C%BA%E5%9F%9F</id>
    <published>2021-12-27T11:19:10.000Z</published>
    <updated>2022-01-03T08:12:43.975Z</updated>
    
    <content type="html"><![CDATA[<p>OBS 默认情况下是 录制全屏的 其实它也是可以录制屏幕的指定区域的只是需要简单的设置而已:</p><p>首先用鼠标点击 选中录屏的预览框  选中之后 录屏预览框周围会出现  红色的操作手柄, 然后按住alt 再通过鼠标 拖动周围的操作手柄 就能够控制 录制视频的区域了<br><img src="https://search.pstatic.net/common/?src=https://i.imgur.com/PRMjXsk.png" alt="" loading="lazy"></p><p>虽然这一波操作之后确实可以录制  屏幕的指定区域  但是有可能会让录制的视频出现非常大 的黑边</p><p>这个时候可以通过 调整基础画布来解决这个问题<br><img src="https://search.pstatic.net/common/?src=https://i.imgur.com/6SdRRSv.png" alt="" loading="lazy"></p><p>一般情况下基础画布的分辨率为  <code>1920*1080</code>, 这个时候如果你选定的屏幕分辨率为 <code>1080*1920</code> 这个时候就会出现画布和录制区域的宽度和高度严重不匹配的情况 对于超出的高度可以通过压缩来解决  但是对于不足的底部宽度 只能填充黑边 这就是黑边产生的原因了  所以要去除黑边 我们可以 通过调整画布的分辨率 来实现, 如果录制的区域 宽度和高度为更接近16:9 我们就选择基础(画布)分辨率为 <code>1920*1080</code> 如果宽度和高度比更接近9:16 则我们选择 基础(画布)分辨率为 <code>1080*1920</code>, 只要宽高比是接近的 通过缩放操作 总能够去除黑边.</p><p>一般情形下 基础(画布)分辨率就是我们的输出文件的分辨率, 但是我们仍然可以通过下面的哪个  输出(缩放)分辨率选择框 进一步调整输出文件的分辨率, 通过适当的缩放算法 对基础画布的内容进行缩放  可以实现控制文件大小的目的.</p><p>此外OBS录屏的时候 视频格式尽量选择MKV格式, 这种格式可以进行意外恢复 也可以多音轨录制, 录制完成之后 OBS也提供快速的格式转换功能 可以快速把MKV转换成为MP4<br><img src="https://search.pstatic.net/common/?src=https://i.imgur.com/uxKDIYk.png" alt="" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;OBS 默认情况下是 录制全屏的 其实它也是可以录制屏幕的指定区域的只是需要简单的设置而已:&lt;/p&gt;
&lt;p&gt;首先用鼠标点击 选中录屏的预览框  选中之后 录屏预览框周围会出现  红色的操作手柄, 然后按住alt 再通过鼠标 拖动周围的操作手柄 就能够控制 录制视频的区域了&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Grid template areas</title>
    <link href="http://blog.lipanpanx.com/post/2021/202104/Grid-template-areas"/>
    <id>http://blog.lipanpanx.com/post/2021/202104/Grid-template-areas</id>
    <published>2021-12-24T10:07:13.000Z</published>
    <updated>2022-01-03T08:12:43.975Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Grid_Template_Areas" target="_blank">参考资料</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Grid_Template_Areas&quot; target=&quot;_blank&quot;&gt;参考资料&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="CSS相关" scheme="http://blog.lipanpanx.com/categories/CSS%E7%9B%B8%E5%85%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>Box alignment in CSS Grid Layout</title>
    <link href="http://blog.lipanpanx.com/post/2021/202104/Box-alignment-in-CSS-Grid-Layout"/>
    <id>http://blog.lipanpanx.com/post/2021/202104/Box-alignment-in-CSS-Grid-Layout</id>
    <published>2021-12-22T10:23:46.000Z</published>
    <updated>2022-01-03T08:12:43.975Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Box_Alignment_in_CSS_Grid_Layout" target="_blank">相关参考文档</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Box_Alignment_in_CSS_Grid_Layout&quot; target=&quot;_blank&quot;&gt;相关参考文档&lt;/a&gt;&lt;/p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hexo+Inside+Github+(NetlifyCMS+Vercel+Cloudflare)构建全球可高速访问的静态站点</title>
    <link href="http://blog.lipanpanx.com/post/2021/202111/%E4%B8%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F"/>
    <id>http://blog.lipanpanx.com/post/2021/202111/%E4%B8%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F</id>
    <published>2021-11-16T07:27:20.000Z</published>
    <updated>2022-01-03T08:12:43.975Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x10-前情提要">0x10 前情提要<a title="#0x10-前情提要" href="#0x10-前情提要"></a></h2><p>我的博客一直以来都是静态的站点,静态的站点优点还是很多的,很多地方提供免费的托管服务,访问速度快,搜索引擎友好,等等. 但是有优点就有缺点,静态站点的缺点也很明显,无法承载过于复杂的功能,就个人博客而言,如果做成动态网站有管理后台的那种的话就可以随时随地写文章更新文章了,想对文章进行更改校对,任何一个有网的地方登陆后台就可以操作其实还是很爽的,所以我决定给我的静态站点添加一个后台管理系统就是netlifyCMS,这个netlifyCMS是netlify公司的产品, 这个东西可以让你方便的在线 管理 书写 发布你的文章,我尝试了一下效果还是不错的.</p><p><img src="https://search.pstatic.net/common/?src=https://i.imgur.com/nSJwqhi.png" alt="" loading="lazy" class="φbp"></p><h2 id="0x20-在netlify中部署使用netlifycms">0x20 在netlify中部署使用netlifyCMS<a title="#0x20-在netlify中部署使用netlifycms" href="#0x20-在netlify中部署使用netlifycms"></a></h2><h3 id="0x21-静态站点部署到netlify">0x21 静态站点部署到netlify<a title="#0x21-静态站点部署到netlify" href="#0x21-静态站点部署到netlify"></a></h3><p>因为 netlifyCMS是netlify公司的展品, 刚开始我不知道我还以为要想使用netlifyCMS就必须把站点放到netlify上面去才行,于是就开始折腾netlify,其实把站点放到netlify上还是比较简单的,我这里简单的讲一下:</p><ol><li>首先注册netlify账号 因为它可以使用第三方账号进行注册,我的项目都在githu上我就选择了直接用github账号进行注册</li><li>然后就是选择git仓库创建网站,这里也很简单 按照它的提示一步步来就醒了 总共三步<br><img src="https://search.pstatic.net/common/?src=https://i.imgur.com/zqzMPur.png" alt="" loading="lazy"><br>最后一步这里 你可以选择git仓库的分支, 可以设置安装依赖和运行构建命令的目录, 以及最后保存静态文件部署静态站点的文件夹,当然 这里也可以 设置环境变量 设置serverless 函数的文件夹 不过我们用不着 这两个也就不用管它了.</li></ol><blockquote><p>这里有个非常蛋疼的点 就是这里可以选择一个目录 作为你安装依赖和运行构建命令的目录,但是如果我的项目当中 包含了一个子项目 需要多处安装依赖,然后需要多处运行构建命令呢? 我不知道针对套娃项目 如何在netlify中部署 至少我暂时没有看到设置的地方. 这一点我觉得vercel就做到很好,在vercel当中你可以自己去设置安装依赖和构建项目的命令,这样的话对于需要多处安装依赖的项目你直接可以把命令写在packge.json的scripts当中 然后提交给vercel一个运行script的命令就行了 比如你的script设置成为<code>&quot;vercel_install&quot;: &quot;npm install &amp;&amp; cd themes/inside &amp;&amp; npm install&quot;</code>,然后把 <code>npm run vercel_install</code> 提交给vercel就行了.</p></blockquote><ol start="3"><li>最后选择 <code>deploy site</code>,就能把你的网站部署到netlify上面了,是不是很简单</li></ol><h3 id="0x22-netlify当中使用netlifycms">0x22 netlify当中使用netlifyCMS<a title="#0x22-netlify当中使用netlifycms" href="#0x22-netlify当中使用netlifycms"></a></h3><p>1, 首先进入到你的站点 然后点击 <code>site setting</code>进入到你的网站的设置页面,就可以看到一条长长的网站设置菜单<br><img src="https://search.pstatic.net/common/?src=https://i.imgur.com/NnGGuTC.png" alt="" loading="lazy"><br><img src="https://search.pstatic.net/common/?src=https://i.imgur.com/CVirQ5w.png" alt="网站设置菜单" loading="lazy"></p><p>2, 我们看到网站的设置页面有很多的选项可以设置,我们首先打开身份验证服务,选择<code>identity</code>然后点击<code>enable identity</code>即可<br><img src="https://search.pstatic.net/common/?src=https://i.imgur.com/jKzVzyd.png" alt="" loading="lazy"><br>开通身份验证服务之后 identity菜单会增加很多的可配置项, 在registration当中我们可以配置为仅仅我们邀请的注册用户才能访问netlifyCMS,在Services当中我们可以配置打开Git Gateway服务,这样一来netlifyCMS就有权读写我们的仓库了.<br><img src="https://search.pstatic.net/common/?src=https://i.imgur.com/18Wqeya.png" alt="" loading="lazy"></p><p>3, 既然后端的验证服务有了我们就需要前端的身份验证页面,前端的验证页面也很简单<br>对于hexo框架而言 首先在项目根目录的 <code>/source</code>文件夹下面创建admin文件夹 然后里面放上两个文件<code>index.html</code> 和 <code>config.yml</code>,其中index.html是前端验证页面的入口,config.yml是 netlifyCMS的配置文件,netlifyCMS可以根据这个配置文件来确定以怎样的方式去读取和操作你的文章<br>我们直接在index.html 中添加下面的代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Content Manager<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://identity.netlify.com/v1/netlify-identity-widget.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Include the script that builds the page and powers Netlify CMS --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/netlify-cms@^2.0.0/dist/netlify-cms.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这段代码就是加载两个js文件,一个用来渲染CMS的页面一个用来进行身份验证<br>因为我们最终需要 通过 <code>lipanpanx.com/admin/</code> 去访问到CMS, 所以admin文件夹最终会被放到hexo所生成的网站的根目录当中,为了避免hexo对admin文件夹进行过多的操作,我们在hexo的配置文件的 <code>skip_render</code>字段当中添加<code>- admin/**</code>,确保hexo不对admin文件夹当中的内容进行渲染.</p><p>4, 当我们完成前端验证页面入口的添加之后, 把站点部署到 netlify上面然后我们访问自己的站点后面加上/admin/也就是 <code>xxx.com/admin/</code>,就能通过netlify账户进行登陆了,但是这个netlify用户必须是自己邀请的用户(刚才在identity-&gt;registration哪里设置了仅邀请的用户才可以登陆),邀请用户其实也是非常简单的,只需要找到网站实例设置下的 identity页面 点击<code>invite users</code>按钮输入邮箱地址就行了.<br><img src="https://search.pstatic.net/common/?src=https://i.imgur.com/UMcdrGe.png" alt="" loading="lazy"></p><p>5, 登陆账户之后就能看到后台管理的页面了,但是目前的后台管理系统空空如也,需要合理的设置<code>/source/admin/config.yml</code>文件,才能够让自己的后台管理系统正常的工作:<br>我在 netlifyCMS的官方文档当中找到了 <a href="https://cms-demo.netlify.com/#/collections/posts" target="_blank">官方的demo</a> 和 <a href="https://github.com/netlify/netlify-cms/blob/master/dev-test/config.yml" target="_blank">官方demo的配置文件</a>,这两个东西对于想要自己写配置文件的同学是非常重要的参考. 想要进一步学习如何配置netlifyCMS的同学可以看看下面的内容:</p><p>关于 netlifyCMS的配置文件<code>/source/admin/config.yml</code>中各个配置项应该如何配置, 官方文档中的 <code>configuring your site</code> 章节进行了详细的讲解,这一章节又分为两个小节,其中 <a href="https://www.netlifycms.org/docs/configuration-options/" target="_blank"><code>configuration options</code></a>小节中包含了所有我们常用的配置, <a href="https://www.netlifycms.org/docs/beta-features/" target="_blank"><code>beta features</code></a>小节的大部分功能一般用不到,但是也有一小部分是非常有用的. 我这里主要讲解一下 <code>configuring your site</code>小节当中的内容:</p><p>config.yml 文件当中有12个根配置项,这12个根配置项目当中又有3个配置项是必须要有的,分别是: <code>backend</code> <code>media_folder</code> <code>collections</code>, config.yml文件当中至少要包含这三个配置,其他的配置项是可有可无的,这里我先给出一个配置的example,然后再结合代码注释讲解一下这几个配置的作用:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">backend:</span> <span class="comment"># 这个backend实际上就是个中间商它允许你的netlifyCMS和提供内容存储服务的第三方进行通信 这里按照netlifyCMS的文档要求设置即可 如果使用自定义的backend 按照backend要求配置即可</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">git-gateway</span> <span class="comment"># netlifyCMS的一个开源项目 允许你在netlifyCMS当中操作git仓库, 默认使用 netlify identity服务进行合法用户的认证</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span> <span class="comment"># 指定被操作的git仓库的分支 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># local_backend: true  #解除这个注释运行npx netlify-cms-proxy-server 然后再运行hexo s 就能本地调试netlifyCMS </span></span><br><span class="line"></span><br><span class="line"><span class="attr">media_folder:</span> <span class="string">&#x27;source/images&#x27;</span>  <span class="comment"># netlifyCMS提供了上传文件的功能,可以把本地的文件上传到网站的根目录当中这个选项可以控制上传文件的路径</span></span><br><span class="line"><span class="comment"># public_folder: &#x27;/images&#x27;  # 这里控制 网页中引用上传资源时候的路径</span></span><br><span class="line"><span class="comment"># publish_mode: editorial_workflow  # 这里控制是否使用netlifyCMS 提供的工作流</span></span><br><span class="line"></span><br><span class="line"><span class="attr">collections:</span>  <span class="comment"># collections下面可以有多个collection 每个collection都必须有一个name 且这个name不能够重复</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;posts&quot;</span>  <span class="comment"># 必须存在的字段,名字任意 不能重复,这个name并不会显示在netlifyCMS的UI当中</span></span><br><span class="line">    <span class="attr">label:</span> <span class="string">&quot;2021&quot;</span>  <span class="comment"># 在 netlifyCMS当中collection 显示的名字 </span></span><br><span class="line">    <span class="attr">folder:</span> <span class="string">&quot;source/_posts/2021&quot;</span> <span class="comment"># 你的文章所存储的路径 </span></span><br><span class="line">    <span class="attr">sortable_fields:</span> [<span class="string">&#x27;date&#x27;</span>]  <span class="comment"># 控制那些字段用来给文章排序</span></span><br><span class="line">    <span class="attr">create:</span> <span class="literal">true</span>  <span class="comment"># 是否允许在netlifyCMS中创建新的文章</span></span><br><span class="line">    <span class="attr">editor:</span></span><br><span class="line">      <span class="attr">preview:</span> <span class="literal">true</span> <span class="comment"># 在netlifyCMS中写文章和时候是否允许打开预览窗口 </span></span><br><span class="line">    <span class="attr">fields:</span> <span class="comment"># 每篇文章头部的 front-matter 都可以设置与其相对应的widget,在netlifyCMS就可以使用widget设置文章头部的front-matter</span></span><br><span class="line">      <span class="bullet">-</span> &#123;<span class="attr">label:</span> <span class="string">&quot;Title&quot;</span>, <span class="attr">name:</span> <span class="string">&quot;title&quot;</span>, <span class="attr">widget:</span> <span class="string">&quot;string&quot;</span>&#125;</span><br><span class="line">      <span class="bullet">-</span> &#123;<span class="attr">label:</span> <span class="string">&quot;Publish Date&quot;</span>, <span class="attr">name:</span> <span class="string">&quot;date&quot;</span>, <span class="attr">widget:</span> <span class="string">&quot;datetime&quot;</span>, <span class="attr">format:</span> <span class="string">&quot;YYYY-MM-DD HH:mm:ss&quot;</span>, <span class="attr">dateFormat:</span> <span class="string">&quot;YYYY-MM-DD&quot;</span>, <span class="attr">timeFormat:</span> <span class="string">&quot;HH:mm:ss&quot;</span>, <span class="attr">required:</span> <span class="literal">false</span>&#125;</span><br><span class="line">      <span class="bullet">-</span> &#123;<span class="attr">label:</span> <span class="string">&quot;Updeted Date&quot;</span>, <span class="attr">name:</span> <span class="string">&quot;updated&quot;</span>, <span class="attr">widget:</span> <span class="string">&quot;datetime&quot;</span>, <span class="attr">format:</span> <span class="string">&quot;YYYY-MM-DD HH:mm:ss&quot;</span>, <span class="attr">required:</span> <span class="literal">false</span>&#125;</span><br><span class="line">      <span class="bullet">-</span> &#123;<span class="attr">label:</span> <span class="string">&quot;Tags&quot;</span>, <span class="attr">name:</span> <span class="string">&quot;tags&quot;</span>, <span class="attr">widget:</span> <span class="string">&quot;list&quot;</span>, <span class="attr">required:</span> <span class="literal">false</span>&#125;</span><br><span class="line">      <span class="bullet">-</span> &#123;<span class="attr">label:</span> <span class="string">&quot;Categories&quot;</span>, <span class="attr">name:</span> <span class="string">&quot;categories&quot;</span>, <span class="attr">widget:</span> <span class="string">&quot;list&quot;</span>, <span class="attr">required:</span> <span class="literal">false</span>&#125;</span><br><span class="line">      <span class="bullet">-</span> &#123;<span class="attr">label:</span> <span class="string">&quot;Body&quot;</span>, <span class="attr">name:</span> <span class="string">&quot;body&quot;</span>, <span class="attr">widget:</span> <span class="string">&quot;markdown&quot;</span>, <span class="attr">required:</span> <span class="literal">false</span>&#125;</span><br></pre></td></tr></table></figure><p>其实 collections 又分为 <code>folder collections</code> 和 <code>file collections</code> 这两者的区别在官方文档的<a href="https://www.netlifycms.org/docs/collection-types/" target="_blank">collections types</a>进行了详细的说明,我这里就不在赘述, 因为我需要在一个collection中管理多篇格式相同的文章所以我使用folder collections,关于collection下面的各种widget的应该如何配置 查看官方文档可以得到更加详细的信息.</p><p>这些内容全部做完之后,只要我们更新代码然后提交到github,就能触发netlify去构建我们的项目生成网站的静态文件并进行部署,我们通过netlify提供的临时域名就能够访问我们的站点了, 然后我们通过在域名后面添加 /admin/ 就能够访问netlifyCMS了,在netlifyCMS当中可以随意的添加删除文章.会自动同步到github仓库,如果此时我们还想要在本地写文章的话,在本地写之前可以先和remote仓库进行同步,把remote仓库中的内容拉下来之后可以继续写不会和netlifyCMS有所冲突. 这样看起来一切都挺好的,这篇文章已经可以结束了, 但是经过我的试用我发现把博客放在 netlify的速度奇慢无比, 甚至不如我之前放在 github pages 用cloudflare cdn 加速来的快, 加载一个网页需要 3-4秒钟, 这谁受得了啊, 于是我就开始在网上进行了一番搜索, 终于我找到了一篇神奇的文章, 文章的作者也是苦于netlify的速度非常的慢最后通过把博客部署在vercel上面加快了博客的访问速度,还给出了访问速度的对比结果:<a href="https://opnir.cn/2020/11/netlify-vs-vercel-for-static-websites-speed.html" target="_blank">点击此处查看</a>. 但是我是需要使用netlifyCMS的呀, 如果单纯的把博客部署在vercel上面对我来说并没有任何的意义, 所以我搜了一下结果发现 netlifyCMS还真的能够在 vercel上面使用,真的是太棒了 这样依赖既能够使用netlifyCMS又能增加博客的访问速度 何乐而不为呢.</p><h2 id="0x30-在vercel上面部署和使用netlifycms">0x30 在Vercel上面部署和使用netlifyCMS<a title="#0x30-在vercel上面部署和使用netlifycms" href="#0x30-在vercel上面部署和使用netlifycms"></a></h2><h3 id="0x31-netlifycms是如何运作的?">0x31 netlifyCMS是如何运作的?<a title="#0x31-netlifycms是如何运作的?" href="#0x31-netlifycms是如何运作的?"></a></h3><p>要想在vercel上面使用netlifyCMS,就要搞清楚这东西是如何运作的,之前我们也提到了在我们访问<code>xxx.com/admin/</code>的时候 <code>/source/admin/index.html</code>会被加载,这个hmtl文件中的内容 就是引入两个JS文件,一个负责页面的渲染,一个负责用户认证, 所以netlifyCMS的最核心的功能其实就是这两个, 页面渲染靠前端的JS能够完成,而用户认证一般情况下需要靠后端配合来完成,那么netlifyCMS是如何在无后端的情况下实现的呢? 其实netlifyCMS之所以能够完成用户认证其实是使用了第三方的认证服务,一般情况下我们可以使用serverless函数和第三方的认证服务进行对接,对于serverless函数的指定是在 <code>/source/admin/config.yml</code>文件当中<code>backend</code>字段进行配置的,其实netlifyCMS的<a href="https://www.netlifycms.org/docs/backends-overview/" target="_blank">文档</a>中也说的非常清楚了:<code>A backend is JavaScript code that allows Netlify CMS to communicate with a service that stores content - typically a Git host</code>,当我们在netlify中使用netlifyCMS的时候, 经过合适的配置之后netlify中的serverless函数会在用户请求登陆的时候加载然后和netlify的用户认证服务进行通信判断用户的合法性, 所以在vercel中使用netlifyCMS我们也可以使用serverless函数去 和第三方的认证服务去通信(比如github的oauth)进行用户合法性的认证. 那么接下来的问题就是 如何实现这些serverless函数并且在vercel当中进行调用呢,这其实是一个头疼的问题,不过好在我们有万能的github.</p><p>其实netlifyCMS是一个开源的东西: <a href="https://github.com/netlify/netlify-cms" target="_blank">github仓库地址</a>,对于如何实现自己的的backend,虽然在netlifyCMS的官方文档中没有进行说明,不过在这个开源仓库当中的package文件夹当中 还是给出了大量可供参考的代码的,不过只读代码还是有点苦涩的.还好在国外有大佬已经实现了可以在vercel上部署的使用GitHub oauth 认证服务的demo了: <a href="https://github.com/ublabs/netlify-cms-oauth" target="_blank">仓库地址</a>, 简直太令人感动了.</p><h3 id="0x32-在vercel中部署使用netlifycms">0x32 在Vercel中部署使用netlifyCMS<a title="#0x32-在vercel中部署使用netlifycms" href="#0x32-在vercel中部署使用netlifycms"></a></h3><p>把国外大佬的仓库clone到本地,对于还没有创建hexo项目的用户可以直接在这里仓库里面创建hexo项目,直接用就完了<br>对于已经创建hexo项目的用户只需要 把demo当中的 /api 和 /lib 两个文件夹和 vercel.json 拷贝到字节的hexo项目的根目录,然后找到package.json文件当中的3个依赖合并到自己hexo项目的package.json文件当中去就行了.</p><p>完成上面的操作之后 再去配置 <code>/source/admin/config.yml</code>文件当中的<code>backend</code>字段:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">backend:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">github</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">lipanpan-hub/xsite</span>      <span class="comment"># github仓库地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span>                <span class="comment"># 选择仓库分支</span></span><br><span class="line">  <span class="attr">base_url:</span> <span class="string">https://xsite-sage.vercel.app/</span>  <span class="comment"># 这个可以先留空等到vercel部署完成之后得到链接 再填写</span></span><br><span class="line"><span class="comment"># config.yml 文件的其他配置 照旧填写 </span></span><br></pre></td></tr></table></figure><p>然后把你的项目部署到vercel上面 得到临时域名 把这个域名填写到backend-&gt;base_url处<br>然后 打开 github的 <a href="https://github.com/settings/developers" target="_blank">develop setting</a> 点击 <code>oauth apps</code> 再点击 <code>new oauth app</code> 进入下面的页面:<br><img src="https://search.pstatic.net/common/?src=https://i.imgur.com/YjqnKWN.png" alt="" loading="lazy"></p><p>这张表单有三个必填项: 第一个application name 随便填写, 第二个hompage URL填写为刚到得到的 vercel临时域名,第三个authorization callback URL填写为刚才的临时域名后面再添加/callback:<code>vercel临时域名/callback</code> 然后点击<code>register application</code>成功注册程序之后,拿到<code>clinet ID</code> 和 <code>client secret</code>, 其中client secret 需要你点击 <code>generate a new clinet secret</code> 按钮去生成.</p><p>拿到 <code>client ID</code> 和 <code>client secret</code> 之后 进入vercel 你的网站项目 然后再项目主页点击 <code>settings-&gt;enviroment variables</code> 添加两个环境变量 分别是:<code>OAUTH_GITHUB_CLIENT_ID</code> 和 <code>OAUTH_GITHUB_CLIENT_SECRET</code>, 这两个环境变量的值就是刚才得到的<code>client ID</code> 和 <code>client secret</code>.</p><p>然后在vercel上重新部署你的网站项目就可以了.重新部署完成之后打开vercel提供的临时域名你就可以访问自己的站点了,同时在这个域名后面加入/admin/ 你就能访问文章管理后台页面了 这个页面使用github进行登陆认证.</p><p>然而有些同学会在这里遇到一个奇怪的问题,就是访问/admin/页面的时候会得到一个错误的提示:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Error</span> loading the CMS configuration</span><br><span class="line">Config Errors:</span><br><span class="line"><span class="built_in">Error</span>: Failed to load config.yml (<span class="number">404</span>)</span><br><span class="line">Check your config.yml file.</span><br></pre></td></tr></table></figure><p>下面我说一下我的解决方法:</p><is-cipher placeholder="">U2FsdGVkX1+PX/GJcb2TVEIdv61GG7z/TETdXGUFP+thETZrCdRxFmzop0tcH34B3du7VnvaTcvEbjCzIXtF3YQAJzjhLeUfxtWQgJ6PzQK6ZvKKY02WSvdl25wLMG2PWKcpB58GwbZJWB8uYs0LF/Ve1fzgWR+vWobo99YpNG1MnekquD4c9cPjOTh36yAkmm6Lmq5SeFb3N+hDcZY0718rTLlibhW/wxw5zTDBal7QjhMJKK/7BDVwbtC3eEIABzrQNFxE+9i0QqYzunkbAwQw798KEt7XrYwbvA/dCbfbsZhNaS0vxI8lJh6AYR6p9T8Wct8Q7Bc6HVWDpP+2N6y0FB2pYq6kr99CotA+a1CMr5ik3R4rk8RDAClK8PnShzRV+f4PkMBCF90dQSwvr+sL7LB0q4xXFA4mUmoiI+M+qyfRXwrNsx/4qpUEK3SOcGKoVq+51yWzszFgPUfYobRNGv4GVNAWm3D6LPNPWpQB/CeTWRB2SQsWC01dbXQf91jC1YDEYOUWOd25xaxw5i79iXWROVAgnyTIs18frrwBXX2eDm7FG+cpIx1sbrsHSqhgfyNp+DIXEUglmUc22Op4kg91DndoZ8IJ0DovlJti4CHP1Urx+3ZLPdYEJNuosZFuSV/sB1enKlyBopKKLkjAXzwUzb1wzZFb8lY53iUpOtzsGo8+heu+GxxbxIADDcuUSN8SnIfZbbY1i8jmioeoUT/zmHS3PkVIn48e5EiITzlNghGmJQnYRwWj/X3fae3fHD3M1yn7BRPcoRE1FL7ug5Bu0sHavCylEjYZFpFRYYk5RljW5k3xQTDu50h1ZkENss+BNVyeKMjbVnU5klSvA5klzO6y6C1lS23KFBST+pWn3bl6nUniXKwAzjeRUzR0zLGAKLY+N8C4v7+EszSnFOpwIuGgCeoN3M616+9H92T3pXRba90H4+49mAPuJFb/cRCOpX9NvgVNFSVeOLP1emFkawgiTg07k3LXTcIiMZ9MlxPdXnjNvTR4uwYBczVOD0FQM+I8mEv6IlRQRxK3saM9y2eVSFhGEdXH2D7Ntov+HfZmWWPwo2mO96GJ4yGG+1x288jzqGjxjGApfbKXBhWVjKnKvx9AmqZgjquYjsbmrRMVdd4sVACvcxy4NLRKLmjLMTk102WUKrGCA05B3lNdRhDgzaqFf+zpUr8lfr+38JKpjhB5bAeZZ2KmEHaVTxObvusSEs4QdGzq0iPXb8nHiUHCBBvbWEzb+Vii2LMlhnjnmwVSQviFqzMBS1QrYmt7IIp662+Fl14QIsYuQ01PbXAhQzwQO1rd5emn8wdAVhh5sWQsWRX6v14Vwxfo/q+rkHX8cVc2pnjqfz0QkU4fq+w+wkyHiv6I29g=</is-cipher><h2 id="自定义域名">自定义域名<a title="#自定义域名" href="#自定义域名"></a></h2><p>当我们的 在vercel上成功的部署项目之后,访问速度确实加快了,而且新添加的netlifyCMS也确实挺好用,但是访问的时候使用的是vercel的临时域名,这个域名非常的长太难记忆了而且都是乱码组成的根本拿不出手啊, 所以绑定一个专业的域名还是非常有必要的, 对于刚申请的域名直接把nameserver设置为vercel的nameserver然后绑定就能用了,但是我并不想要这么干,我只想把自己的域名放在cloudflare上面进行管理,然后配合vercel使用,原因有下面几个:</p><ul class="φbr" class="φbr" class="φbr" class="φbr"><li><input type="checkbox" disabled="" checked=""><i></i>首先我所有的域名都是放在cloudflare上面进行管理的 我不想要搞的东一个西一个很乱</li><li><input type="checkbox" disabled="" checked=""><i></i>然后更改nameserver需要时间 我不想等</li><li><input type="checkbox" disabled="" checked=""><i></i>之前vercel出现过在大陆访问不了的情况,对于这种情况如果以后再出现,就可以通过cloudflare代理访问,站点仍然可以正常部署在vercel</li><li><input type="checkbox" disabled="" checked=""><i></i>cloudflare 提供的各种网站安全 网站加速的功能 想用随时可以用</li></ul><p>打开 <a href="https://vercel.com/docs" target="_blank">vercel docs</a> 在顶部导航栏的 support 中我们可以找到一篇文章<a href="https://vercel.com/support/articles/using-cloudflare-with-vercel" target="_blank">How do I use a Cloudflare domain with Vercel?</a> 这篇文章详细的介绍了如何将 cloudfalre和 vercel配合使用进行自定义域名.</p><p>由于目前国内访问vercel的速度还是比较快的,所以我这里就讲一下不使用cloudflare代理的情况下如何为vercel项目绑定自定义域名:<br><img src="https://search.pstatic.net/common/?src=https://i.imgur.com/KPZwzEi.png" alt="" loading="lazy"></p><p>在上图当中我在project settings 当中为项目绑定了两个地址 <code>lipanpanx.com</code> 和 <code>blog.lipanpanx.com</code> 要想要这两个地址生效,只需要在 cloudflare的dns设置当中 添加2条cname记录指向<code>cname.vercel-dns.com</code>,并且proxy status 设置为 <code>dns only </code>如下图所示:<br><img src="https://search.pstatic.net/common/?src=https://i.imgur.com/ZMtyqOC.png" alt="" loading="lazy"></p><p>操作完cloudflare之后 回到vercel项目的project setting-&gt;domains 点击 <code>add</code>按钮 添加 <code>lipanpanx.com</code> 和 <code>blog.lipanpanx.com</code>就行了.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x10-前情提要&quot;&gt;0x10 前情提要&lt;a title=&quot;#0x10-前情提要&quot; href=&quot;#0x10-前情提要&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;我的博客一直以来都是静态的站点,静态的站点优点还是很多的,很多地方提供免费的托管服务,访问速度快,搜索引擎友好,等等.</summary>
      
    
    
    
    <category term="其他" scheme="http://blog.lipanpanx.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>netlify-cli安装E404错误(找不到依赖项)解决</title>
    <link href="http://blog.lipanpanx.com/post/2021/202111/netlify-cli%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B"/>
    <id>http://blog.lipanpanx.com/post/2021/202111/netlify-cli%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B</id>
    <published>2021-11-09T10:46:46.000Z</published>
    <updated>2022-01-03T08:12:43.975Z</updated>
    
    <content type="html"><![CDATA[<p>今天打算安装 netlify-cli</p><p>于是打开 terminal 运行了一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install netlify-cli -g </span><br></pre></td></tr></table></figure><p>结果 上来就是一顿错误</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">npm ERR! code E404</span><br><span class="line">npm ERR! <span class="number">404</span> Not Found - GET https:<span class="comment">//oss.npmmirror.com/netlify/-/netlify-8.0.4.tgz</span></span><br><span class="line">npm ERR! <span class="number">404</span></span><br><span class="line">npm ERR! <span class="number">404</span>  <span class="string">&#x27;netlify@https://registry.npm.taobao.org/netlify/-/netlify-8.0.4.tgz&#x27;</span> is not <span class="keyword">in</span> <span class="built_in">this</span> registry.</span><br><span class="line">npm ERR! <span class="number">404</span> You should bug the author to publish it (or use the name yourself!)</span><br><span class="line">npm ERR! <span class="number">404</span></span><br><span class="line">npm ERR! <span class="number">404</span> Note that you can also install <span class="keyword">from</span> a</span><br><span class="line">npm ERR! <span class="number">404</span> tarball, folder, http url, or git url.</span><br><span class="line"></span><br><span class="line">npm ERR! A complete log <span class="keyword">of</span> <span class="built_in">this</span> run can be found <span class="keyword">in</span>:</span><br><span class="line">npm ERR!     C:\Users\lipanpan\AppData\Local\npm-cache\_logs\<span class="number">2021</span>-<span class="number">11</span>-09T02_43_45_128Z-debug.log</span><br></pre></td></tr></table></figure><p>报错信息显示 无法在registry 当中找到 netlify-8.0.4.tgz</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lipanpan&gt; npm view netlify versions</span><br><span class="line">[ ...省略若干</span><br><span class="line">  <span class="string">&#x27;6.1.10&#x27;</span>,       <span class="string">&#x27;6.1.11&#x27;</span>,       <span class="string">&#x27;6.1.13&#x27;</span>,       <span class="string">&#x27;6.1.14&#x27;</span>,       <span class="string">&#x27;6.1.15&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;6.1.16&#x27;</span>,       <span class="string">&#x27;6.1.17&#x27;</span>,       <span class="string">&#x27;6.1.18&#x27;</span>,       <span class="string">&#x27;6.1.19&#x27;</span>,       <span class="string">&#x27;6.1.20&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;6.1.21&#x27;</span>,       <span class="string">&#x27;6.1.22&#x27;</span>,       <span class="string">&#x27;6.1.23&#x27;</span>,       <span class="string">&#x27;6.1.24&#x27;</span>,       <span class="string">&#x27;6.1.25&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;6.1.26&#x27;</span>,       <span class="string">&#x27;6.1.27&#x27;</span>,       <span class="string">&#x27;6.1.28&#x27;</span>,       <span class="string">&#x27;6.1.29&#x27;</span>,       <span class="string">&#x27;7.0.0&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;7.0.1&#x27;</span>,        <span class="string">&#x27;8.0.0&#x27;</span>,        <span class="string">&#x27;8.0.1&#x27;</span>,        <span class="string">&#x27;8.0.2&#x27;</span>,        <span class="string">&#x27;8.0.3&#x27;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>我看了下确实没这个版本 最高版本就是8.0.3 但是这个包的最新版本(8.0.4)6天前已经在npm上面发布了<br><img src="https://search.pstatic.net/common/?src=https://i.imgur.com/Qj0oEnI.png" alt="" loading="lazy"></p><p>因为我使用的是 淘宝的 npm镜像来加速安装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lipanpan&gt; npm config get registry</span><br><span class="line"><span class="attr">https</span>:<span class="comment">//registry.npm.taobao.org/</span></span><br></pre></td></tr></table></figure><p>所以导致安装失败的原因看起来 好像是淘宝npm镜像没有同步更新<br>我打开了淘宝镜像的网站(<code>https://npmmirror.com/</code>) 然后发现 register 地址不知何时从 <code>https://registry.npm.taobao.org/</code> 变成了 <code>https://registry.npmmirror.com/</code> 然后我通过域名解析查询 发现这两个域名指向相同的A地址.所以应该仅仅是变了一下域名.</p><p>淘宝npm镜像的说明是 如果第一次安装失败 它会在后台自动同步 在后续安装的时候确保成功<br>我连续尝试了好几次都是安装失败  看来这个说明并不靠谱<br>然后 还有个 手动同步npm包的操作 就是手动执行  <code>$ cnpm sync xxxx</code> 但是我没安装cnpm, 着实让我感觉到蛋疼</p><p>最后我选择换回 官方的 registery地址</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lipanpan&gt; npm config set registry https:<span class="comment">//registry.npmjs.org</span></span><br><span class="line">lipanpan&gt; npm config get registry</span><br><span class="line"><span class="attr">https</span>:<span class="comment">//registry.npmjs.org/</span></span><br></pre></td></tr></table></figure><p>通过官方的reigstry 是可以看到最新版本的 netlify(8.0.4)包的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lipanpan&gt; npm view netlify versions</span><br><span class="line">[ ...省略若干</span><br><span class="line">  <span class="string">&#x27;6.1.21&#x27;</span>,       <span class="string">&#x27;6.1.22&#x27;</span>,       <span class="string">&#x27;6.1.23&#x27;</span>,       <span class="string">&#x27;6.1.24&#x27;</span>,       <span class="string">&#x27;6.1.25&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;6.1.26&#x27;</span>,       <span class="string">&#x27;6.1.27&#x27;</span>,       <span class="string">&#x27;6.1.28&#x27;</span>,       <span class="string">&#x27;6.1.29&#x27;</span>,       <span class="string">&#x27;7.0.0&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;7.0.1&#x27;</span>,        <span class="string">&#x27;8.0.0&#x27;</span>,        <span class="string">&#x27;8.0.1&#x27;</span>,        <span class="string">&#x27;8.0.2&#x27;</span>,        <span class="string">&#x27;8.0.3&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;8.0.4&#x27;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>然后安装 netlify-cli 一次性成功</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lipanpan&gt; npm install netlify-cli -g </span><br><span class="line">...</span><br><span class="line">lipanpan&gt; netlify version</span><br><span class="line">netlify-cli/<span class="number">6.14</span><span class="number">.18</span> win32-x64 node-v16<span class="number">.13</span><span class="number">.0</span></span><br><span class="line">lipanpan&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天打算安装 netlify-cli&lt;/p&gt;
&lt;p&gt;于是打开 terminal 运行了一下&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/s</summary>
      
    
    
    
    <category term="开发问题" scheme="http://blog.lipanpanx.com/categories/%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>关闭vscode烦人的Github登陆弹窗</title>
    <link href="http://blog.lipanpanx.com/post/2021/202111/%E5%85%B3%E9%97%ADvscode%E7%83%A6%E4%BA%BA%E7%9A%84Github%E7%99%BB%E9%99%86%E5%BC%B9%E7%AA%97"/>
    <id>http://blog.lipanpanx.com/post/2021/202111/%E5%85%B3%E9%97%ADvscode%E7%83%A6%E4%BA%BA%E7%9A%84Github%E7%99%BB%E9%99%86%E5%BC%B9%E7%AA%97</id>
    <published>2021-11-07T08:34:08.000Z</published>
    <updated>2022-01-03T08:12:43.975Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这两天不知道怎么了每次我打开vscode就会有烦人的github登陆弹窗弹出来,即使不登陆也不影响向github的remote仓库提交代码,但是这个弹窗真的让人好心烦</p></blockquote><span id="more"></span><p><img src="https://search.pstatic.net/common/?src=https://i.imgur.com/SsO35Tp.png" alt="github登陆弹窗" loading="lazy" class="φbp"></p><p>弹窗就是上面这个样子</p><p>查了不少资料 最终我在stack overflow 上找到了一个比较有说服力的说法:</p><blockquote><p>首先当在你的电脑上安装git的时候 也会顺带的安装上git凭据管理器, 而且git允许有多个git凭据管理器,</p></blockquote><blockquote><p>然后就是git还允许多级配置分别为 local配置 global配置 system配置  这三个配置都会生效 最后形成一个 effective配置<br>因为三个配置都会生效  git 调用凭据管理器的时候 是按照顺序去寻找的 最先去 system配置当中寻找相应的凭据管理器.<br>如果你的 system配置当中凭据管理器的相关设置是<code>credential.helper=manager</code> 他就会去调用这个manager, 但是这个manager当中很可能就没有我们需要的凭据 这个时候git就会去下一级配置中去寻找其他的凭据管理器, 最后在下级的配置文件中 使用的是store管理器,最后认证通过 正常提交代码, 但是manager的调用请求已经发出了 所以manager是肯定会被弹出的</p></blockquote><blockquote><p>听起来 上面的说法头头是道, 我也确实在system配置当中找到了 <code>credential.helper=manager</code> 但是我没在local的配置当中找到<code>credential.helper=store</code> 但是我还是选择了相信,按照作者的说法 折腾了半天 就是不行 好坑爹 心好累</p></blockquote><p>最后我无意间 看到github cli的文档中有一篇 缓存凭据的文章 <a href="https://docs.github.com/en/get-started/getting-started-with-git/caching-your-github-credentials-in-git" target="_blank">Caching your GitHub credentials in Git</a></p><p>我就照着这篇文章搞了一下 虽然到最后还是失败了 但是github cli给了我一个重要的提示<br>就是我的personal token权限太低 因为我只给了personal token访问repo的权限<br><img src="https://search.pstatic.net/common/?src=https://i.imgur.com/jXIwYem.png" alt="" loading="lazy"></p><p>要进行在git当中缓存github的凭据我就需要再生成一个至少包括三个权限的凭据</p><ul class="φbr" class="φbr" class="φbr"><li><input type="checkbox" disabled="" checked=""><i></i>repo</li><li><input type="checkbox" disabled="" checked=""><i></i>read:org</li><li><input type="checkbox" disabled="" checked=""><i></i>workflow</li></ul><p>最后我在github上面生成了一个新的包含这三个权限的personal token,然后在命令行中运行 <code>gh auth login</code> 按照cli的提示一步步操作, 就能够顺利的将github的凭据缓存到了git<br><img src="https://search.pstatic.net/common/?src=https://i.imgur.com/KBE7juJ.png" alt="" loading="lazy"><br>然后我再打开 vscode 就不会出现烦人的弹窗了</p><p>真妙呀</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;这两天不知道怎么了每次我打开vscode就会有烦人的github登陆弹窗弹出来,即使不登陆也不影响向github的remote仓库提交代码,但是这个弹窗真的让人好心烦&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="开发问题" scheme="http://blog.lipanpanx.com/categories/%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>checkboxland尝鲜</title>
    <link href="http://blog.lipanpanx.com/post/2021/202110/checkboxland%E5%B0%9D%E9%B2%9C"/>
    <id>http://blog.lipanpanx.com/post/2021/202110/checkboxland%E5%B0%9D%E9%B2%9C</id>
    <published>2021-10-30T09:59:16.000Z</published>
    <updated>2022-01-03T08:12:43.975Z</updated>
    
    <content type="html"><![CDATA[<p>checkboxland显示汉字的方法</p><span id="more"></span><h2 id="0x10-checkboxland">0x10 checkboxland<a title="#0x10-checkboxland" href="#0x10-checkboxland"></a></h2><p>前两天 在 github trending 上看到一个开源项目<br><code>checkboxland</code> 这个项目是用 checkbox 去组成像素点可以在网页上表达图像的这么个工具 github地址:<br><a href="https://github.com/bryanbraun/checkboxland">https://github.com/bryanbraun/checkboxland</a></p><p>我感觉这个小东西 真的挺有意思<br>用checkbox 不仅仅可以放图片 放动画 玩贪吃蛇<br>甚至可以在网页上面用checkbox播放电影(就很离谱)</p><p>所以我就抽空玩了一下 本来 想想用这个写一句话放在站点上 做滚动广告牌 类似于这样:<br><img src="https://search.pstatic.net/common/?src=https://i.imgur.com/DBxt540.gif" alt="" loading="lazy"></p><p>但是一个很明显的事情 就是这个项目是一个比较新的项目,支持中文是不可能支持中文的, 但是我实在是手痒, 最后想想决定自己去做几个汉字的小字库</p><p>由于我想要显示的内容是 <code>李攀攀全宇宙最帅</code> 所以我打算先做我的名字</p><h2 id="0x20-汉字取模">0x20 汉字取模<a title="#0x20-汉字取模" href="#0x20-汉字取模"></a></h2><p>做这种点阵的汉字字模 我还是有点经验的的<br>首先 我找到了一个在线的取模工具 <a href="https://www.23bei.com/tool-216.html" target="_blank">我是取模工具</a><br>这个工具可以说是非常棒了, 把你需要取模的 汉字输进去 他会返回一串 16进制的数字串.</p><p>比如我的姓氏 <code>李</code>, 我选择的字体是16x16的宋体, 我按照 从左到右从上到下 横向8点左高位的方式取模<br>最后得到的字符串是:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x08</span>,<span class="number">0x7F</span>,<span class="number">0xFC</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x05</span>,<span class="number">0x40</span>,<span class="number">0x09</span>,<span class="number">0x30</span>,<span class="number">0x31</span>,<span class="number">0x0E</span>,<span class="number">0xC1</span>,<span class="number">0x04</span>,</span><br><span class="line"><span class="number">0x0F</span>,<span class="number">0xE0</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x01</span>,<span class="number">0x88</span>,<span class="number">0x7F</span>,<span class="number">0xFC</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x05</span>,<span class="number">0x00</span>,<span class="number">0x02</span>,<span class="number">0x00</span></span><br></pre></td></tr></table></figure><p>然后再通过js 把这些16进制的数字串中的每一个数字转换成为 8位的二进制字符就行了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binary</span>(<span class="params">num, Bits</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> resArry = [];</span><br><span class="line">  <span class="keyword">var</span> xresArry = [];</span><br><span class="line">  i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (; num &gt; <span class="number">0</span>;) &#123;</span><br><span class="line">    resArry.push(num % <span class="number">2</span>);</span><br><span class="line">    num = <span class="built_in">parseInt</span>(num / <span class="number">2</span>);</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">    xresArry.push(resArry[j]);</span><br><span class="line">  <span class="keyword">if</span> (Bits &lt; xresArry.length) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;位数小于二进制位数&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (Bits) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> r = xresArry.length; r &lt; Bits; r++) &#123;</span><br><span class="line">      xresArry.unshift(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> xresArry.join().replace(<span class="regexp">/,/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每2个8位为一组拼接成为 16x16 的二进制矩阵, 然后就能在 checkboxland 里面进行显示了<br>比如 <code>李</code> 和 <code>攀</code> 的矩阵就是:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br></pre></td></tr></table></figure><h2 id="0x30-checkbox显示汉字">0x30 checkbox显示汉字<a title="#0x30-checkbox显示汉字" href="#0x30-checkbox显示汉字"></a></h2><p>最后我决定先把我的名字搞上去 直接把这个二进制的矩阵传给 checkboxland的实例就能显示出来了<br>显示效果是这样的:<br><img src="https://search.pstatic.net/common/?src=https://i.imgur.com/5PJmwGV.png" alt="" loading="lazy"></p><p>不过还有个蛋疼的问题 就是 作者说checkbox的数量最好不要超过1500个 不然就会遇到性能问题<br>这…<br>我显示这三个汉字 就用掉了八百多个checkbox<br>这玩意的最终的使用场景可能也就是显示字了, 汉字这个东西实在比较耗费盒子😂<br>但是我感觉 网友还是能玩出花来的 这东西有意思</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;checkboxland显示汉字的方法&lt;/p&gt;</summary>
    
    
    
    <category term="其他" scheme="http://blog.lipanpanx.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>utools插件重载问题</title>
    <link href="http://blog.lipanpanx.com/post/2021/202110/utools%E6%8F%92%E4%BB%B6%E9%87%8D%E8%BD%BD"/>
    <id>http://blog.lipanpanx.com/post/2021/202110/utools%E6%8F%92%E4%BB%B6%E9%87%8D%E8%BD%BD</id>
    <published>2021-10-27T07:47:05.000Z</published>
    <updated>2022-01-03T08:12:43.975Z</updated>
    
    <content type="html"><![CDATA[<p>utools插件开发 中 plugin.json 中的配置无法生效问题</p><span id="more"></span><h2 id="0x10-需求">0x10 需求<a title="#0x10-需求" href="#0x10-需求"></a></h2><p>最近两天打算找个不限制流量, 不限制容量的 图床, 之前 我一直用阿里云的OSS, 太鸡儿贵了<br>因为我看到国外的不少图床 都是免费的 并且不限制容量不限流量, 我太心动了</p><p>所以我打算把我国内的图床 换成国外的图床 然后在国内访问</p><p>想法有了之后 我就开始动手折腾了,把所有的图片上传到国外的图床, 然后通过代理服务器访问就好了</p><p>这就需要转链, 把原本图片的链接 转换成为 通过代理服务器访问的链接,所以我就需要搞个 utools工具  来帮助我方便的转链</p><h2 id="0x20-开搞">0x20 开搞<a title="#0x20-开搞" href="#0x20-开搞"></a></h2><p>这么久没有玩 utools也从1.x 升级到 2.x 了<br>不过插件的开发方式还是大同小异</p><p>开发过程挺顺利 不过中途遇到了几个坑, 我再这里记录一下</p><h3 id="0x21-utools加载插件的方式变了">0x21 utools加载插件的方式变了<a title="#0x21-utools加载插件的方式变了" href="#0x21-utools加载插件的方式变了"></a></h3><p>utools 1.x 可以直接加载插件 但是2.x 明显行不通</p><p>2.x 如果你想要加载插件 你就需要首先下载一个 <code>开发者工具</code> 插件 这是一个开发utools插件的 插件, 如下图:<br><img src="https://search.pstatic.net/common/?src=https://i.imgur.com/Ns7NmHj.png" alt="space" loading="lazy"></p><h3 id="0x22-utools插件重载">0x22 utools插件重载<a title="#0x22-utools插件重载" href="#0x22-utools插件重载"></a></h3><p>本次插件开发当中遇到的一个最为蛋疼的问题就是插件重载的问题</p><p>utools 识别不同插件是通过 一个plugin.json的文件<br>这个文件里面可以定义  在什么时候什么条件下去唤醒 utools<br>我在里面写了个通过正则表达式去匹配链接的方式去唤醒我的插件</p><p>也就是说当我把国外的图床上图片的链接粘贴到utools的时候,utools会用我写好的正则表达式去尝试匹配这个链接,如果匹配成功  则utools 会调用我的插件 对 这个链接进行转链</p><p>但是中途发现一个问题 就是链接 怎么都无法匹配成功<br>我一度怀疑是我的正则表达式有问题导致无法成功匹配<br>最后调试来调试去 发现 我无论怎么改正则表达式 就是无法匹配, 我才开始怀疑utools</p><p><img src="https://search.pstatic.net/common/?src=https://i.imgur.com/ZKgSjT9.png" alt="space" loading="lazy" class="φbp"></p><p>我已经 <code>图中①</code> 处的开关打开了<br>按理说每次我插件UI进入隐藏状态之后 插件就会完全退出 等我再次进入插件 插件的代码都会重载<br>本来我以为所有的插件代码都会自动重载</p><p>但是 其实 实际情况并不是我想想的那样 如果你改动的是插件的逻辑代码 当你打开 <code>图中①</code>处的开关时候,插件确实会重载 但是如果你改动的是plugin.json 当中的内容, plugin.json 是不会被自动重载的, utools开发工具的自动重载 仅仅重载你插件的逻辑代码 不会重载你的 plugin.json文件, 这个文件 属于你的插件的配置文件</p><p>好鸡儿蛋疼, 每次更改plugin.json 都需要 手动去重载 这个文件, 就是手动去按<code>图中②</code> 处的更新按钮</p><h3 id="0x23-js正则表达式的坑">0x23 js正则表达式的坑<a title="#0x23-js正则表达式的坑" href="#0x23-js正则表达式的坑"></a></h3><p>还有个比较坑的问题就是js的 正则表达式的坑:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;text string&quot;</span>.match(<span class="regexp">/exp/</span>flags)</span><br></pre></td></tr></table></figure><p>我们使用 正则表达式的时候 一般会使用 不同的flag<br>js 的正则表达式 也有各种flag  有  <code>g  i m u y s</code> 等各种flag<br>但是在使用 match 函数的 时候 如果你的正则表达式使用的flag中有 <code>g</code> 这个flag<br>则match 函数返回的匹配数据当中 不包含正则表达式匹配到的group数据</p><p>mdn 中的原文是这样的:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">If the g flag is used, all results matching the complete regular expression will be returned, but capturing groups will not.</span><br><span class="line">if the g flag is not used, only the first complete match and its related capturing groups are returned. In this case, the returned item will have additional properties as described below.</span><br></pre></td></tr></table></figure><p>一旦你的正则表达式使用了这个g flag,<br>则match 函数返回的就不是详细的匹配数据,而仅仅是一个匹配结果,这样的话不是很方便做细致的调试</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;utools插件开发 中 plugin.json 中的配置无法生效问题&lt;/p&gt;</summary>
    
    
    
    <category term="开发问题" scheme="http://blog.lipanpanx.com/categories/%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98/"/>
    
    
    <category term="utools" scheme="http://blog.lipanpanx.com/tags/utools/"/>
    
  </entry>
  
  <entry>
    <title>VueRouter的路径匹配引擎介绍</title>
    <link href="http://blog.lipanpanx.com/post/2021/202103/VueRouter%E8%B7%AF%E5%BE%84%E5%8C%B9%E9%85%8D%E5%BC%95%E6%93%8E"/>
    <id>http://blog.lipanpanx.com/post/2021/202103/VueRouter%E8%B7%AF%E5%BE%84%E5%8C%B9%E9%85%8D%E5%BC%95%E6%93%8E</id>
    <published>2021-03-08T16:45:53.000Z</published>
    <updated>2022-01-03T08:12:43.975Z</updated>
    
    <content type="html"><![CDATA[<p>今天闲的蛋疼 打算讲讲 VueRouter的路径匹配引擎<br>这玩意是 github的一个开源项目 <a href="https://github.com/pillarjs/path-to-regexp" target="_blank">github 仓库地址</a></p><script async src="//jsrun.net/VRUKp/embed/all/light"></script><iframe width="100%" height="300" src="//jsrun.net/VRUKp/embedded/all/light" allowfullscreen="allowfullscreen" frameborder="0"></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天闲的蛋疼 打算讲讲 VueRouter的路径匹配引擎&lt;br&gt;
这玩意是 github的一个开源项目 &lt;a href=&quot;https://github.com/pillarjs/path-to-regexp&quot; target=&quot;_blank&quot;&gt;github 仓库地址&lt;/a&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>VueRouter基本使用</title>
    <link href="http://blog.lipanpanx.com/post/2021/202103/VueRouter%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8"/>
    <id>http://blog.lipanpanx.com/post/2021/202103/VueRouter%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8</id>
    <published>2021-03-05T18:35:48.000Z</published>
    <updated>2022-01-03T08:12:43.975Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vuerouter基本使用步骤">VueRouter基本使用步骤<a title="#vuerouter基本使用步骤" href="#vuerouter基本使用步骤"></a></h2><ol><li>导入Vue Router (VueRoute.js的导入语句要放在Vue.js导入语句的下面)</li><li>写好需要被路由的组件 并且成功注册组件</li><li>使用<code>new VueRouter(&#123;&#125;)</code>创建路由对象的实例,并且在路由对象的routes选项当中添加路由规则</li><li>将路由对象挂载到Vue实例中</li><li><code>&lt;router-view&gt;&lt;router-view&gt;</code>在页面当中占坑,被路径匹配到的组件会被渲染到这个坑位当中.</li><li><code>&lt;router-link&gt;&lt;/router-link&gt;</code>会被渲染成为导航链接, 导航到指定组件.</li></ol><h2 id="vuerouter的下载和引入">VueRouter的下载和引入<a title="#vuerouter的下载和引入" href="#vuerouter的下载和引入"></a></h2><p><a href="https://github.com/vuejs/vue-router" target="_blank">VueRouter 3.x github仓库地址</a><br><a href="https://github.com/vuejs/vue-router-next" target="_blank">VueRouter 4.x github仓库地址</a><br><a href="https://router.vuejs.org/installation.html" target="_blank">VueRouter 3.x 英文文档</a><br><a href="https://next.router.vuejs.org/introduction.html" target="_blank">VueRouter 4.x 英文文档</a><br><a href="https://router.vuejs.org/zh/installation.html" target="_blank">VueRouter 3.x 中文文档</a><br><a href="https://next.router.vuejs.org/zh/introduction.html" target="_blank">VueRouter 4.x 中文文档</a></p><p>在项目当中使用VueRouter的方式有很多种,我讲一下最简单的一种:<br>到github仓库的release页面下载相应的版本然后找到dist目录找到对应的源文件复制到自己的工作目录然后在自己的项目当中引用即可,需要注意的是在引入 <code>vue-router.js</code>之前需要先引入 <code>vue.js</code></p><h2 id="组件准备">组件准备<a title="#组件准备" href="#组件准备"></a></h2><p>在创建VueRouter实例之前需要创建好需要的组件,如果在创建VurRouter实例之后创建组件会导致创建VueRouter实例的时候无法找到路由规则相关的组件而报错,如果是局部组件还需要在对应的Vue实例当中注册组件.</p><h2 id="vuerouter实例的创建">VueRouter实例的创建<a title="#vuerouter实例的创建" href="#vuerouter实例的创建"></a></h2><p>我写了一个快速创建VueRouter实例的vscode snippet:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;newVueRouter&quot;</span><span class="string">:&#123;</span></span><br><span class="line">    <span class="attr">&quot;prefix&quot;:</span> <span class="string">&quot;newVueRouter&quot;</span><span class="string">,</span></span><br><span class="line">    <span class="attr">&quot;body&quot;:</span> [</span><br><span class="line">        <span class="string">&quot;const router = new VueRouter(&#123;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;    routes:[&quot;</span>,</span><br><span class="line">        <span class="string">&quot;        $0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;    ],&quot;</span>,</span><br><span class="line">        <span class="string">&quot;    linkActiveClass:&#x27;actived-link&#x27;,&quot;</span>,</span><br><span class="line">        <span class="string">&quot;&#125;);&quot;</span>,</span><br><span class="line">    ]<span class="string">,</span></span><br><span class="line">    <span class="attr">&quot;scope&quot;:</span> <span class="string">&quot;javascript&quot;</span><span class="string">,</span></span><br><span class="line"><span class="string">&#125;,</span></span><br></pre></td></tr></table></figure><p>这个snippet 不仅仅可以快速的创建VueRouter实例 并且已经指定好了默认的linkActiveClass的名字, 这个所谓的linkActiveClass就是当组件被选中的时候这个组件上会被添加一个类名, 我们可以通过这个类名控制当前被选中组件的的一些样式之类的. 然后你还可以在创建完成 VueRouter实例之后直接在 routes 当中填写路由规则,简直不要太方便.</p><h2 id="&lt;router-view&gt;和&lt;router-link&gt;"><code>&lt;router-view&gt;</code>和<code>&lt;router-link&gt;</code><a title="#&lt;router-view&gt;和&lt;router-link&gt;" href="#&lt;router-view&gt;和&lt;router-link&gt;"></a></h2><p><code>&lt;router-view&gt;</code> 也是一个组件 这个组件会被渲染成 路径匹配到的组件.</p><p>比如路径 <code>http://127.0.0.1:5500/5565_test/5576_VueRouter.html#/User/44</code> 如果你在VueRouter的路由规则当中添加了一套匹配User的规则 <code>&#123;path: '/User/:id', component: User,&#125;</code> 那么这条路径就会被匹配, User组件就会被渲染到页面的指定位置, 这个位置是由<code>&lt;router-view&gt;</code>决定, 这个东西和插槽非常的像.</p><p>就像插槽有匿名插槽和具名插槽之分 <code>&lt;router-view&gt;</code> 也分有名字和无名子的<code>&lt;router-view&gt;</code>, 名字通过name属性去定义<code>&lt;router-view name='xxx'&gt;&lt;/router-view&gt;</code>同时 name属性也是 <code>&lt;router-view&gt;</code>组件唯一的自带属性. 通过为<code>&lt;router-view&gt;</code>添加name属性我们就可以在网页中添加名字各异的多个<code>&lt;router-view&gt;</code>了,然后配合路由规则就可以把不同名字的<code>&lt;router-view&gt;</code>渲染成为不同的组件.</p><p><code>&lt;router-view&gt;</code> 还有个比较棒的特性就是嵌套, 当我们把页面当中的某个<code>&lt;router-view&gt;</code>渲染成某个组件之后,这个组件当中仍然可以存在新的<code>&lt;router-view&gt;</code>,这个新的<code>&lt;router-view&gt;</code>可以渲染为当前组件的子组件.</p><hr><p>我们可以直接把组件写在页面当中,也可以用<code>&lt;router-view&gt;</code>显示组件,然后通过路径地址导航到我们的组件, 我们可以直接在浏览器的网址栏当中输入这个地址,我们也可以网页当中添加链接或者按钮导航到这个地址, 这个时候就需要使用 <code>&lt;router-link&gt;</code>了. <a href="https://router.vuejs.org/zh/api/#router-view" target="_blank"><router-view>相关文档</a></p><p><code>&lt;router-link&gt;</code> 同样是一个组件, 这个组件在页面当中导航用的,通过 to 属性指定目标地址,在页面当中默认渲染成带有正确链接的 <code>&lt;a&gt;</code> 标签. <code>&lt;router-link&gt;</code> 除了to属性之外还有很多的属性可以设置:<a href="https://router.vuejs.org/zh/api/#router-link-props" target="_blank">相关文档地址</a></p><p><code>&lt;router-link&gt;</code>的首要任务当然是导航, 但是在导航的时候它也可以提供query参数和 params参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/one?name=lnj&amp;age=33&quot;</span> <span class="attr">tag</span>=<span class="string">&quot;button&quot;</span>&gt;</span>导航到路径/one <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/two/zs/66&quot;</span> <span class="attr">tag</span>=<span class="string">&quot;button&quot;</span>&gt;</span>导航到路径/two/zs/66 <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><p>路径当中提供的参数 会被存储到$route当中 我们可以在被匹配到的组件内通过  拿到相关的数据. <a href="https://router.vuejs.org/zh/api/#%E8%B7%AF%E7%94%B1%E5%AF%B9%E8%B1%A1" target="_blank">更多关于$route的文档</a></p><hr><h2 id="添加各种形式的组件路由规则">添加各种形式的组件路由规则<a title="#添加各种形式的组件路由规则" href="#添加各种形式的组件路由规则"></a></h2><p><code>&lt;router-view&gt;</code> 可以被渲染成为组件,<code>&lt;router-link&gt;</code>可以被渲染成为链接导航到指定的组件, 而VueRouter的路由规则就是这二者之间的桥梁, 路由规则规定了什么样的链接导航到什么样的组件.<br>在我们创建VueRouter实例的时候,有很多可选的构建选项:<a href="https://router.vuejs.org/zh/api/#router-%E6%9E%84%E5%BB%BA%E9%80%89%E9%A1%B9" target="_blank">见文档</a>,而这些构建选项当中的routes选项就是我们指定路由规则的地方, routes选项的值是一个数组,这个数组当中存放着 <code>&lt;RouteConfig&gt;</code>类型的路由规则.<br><code>&lt;RouteConfig&gt;</code>的类型定义如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">interface RouteConfig = &#123;</span><br><span class="line">  <span class="attr">path</span>: string,     <span class="comment">//相对路径</span></span><br><span class="line">  component?: Component,    <span class="comment">//和路径对应的组件</span></span><br><span class="line">  name?: string,    <span class="comment">// 命名路由</span></span><br><span class="line">  components?: &#123; [name: string]: Component &#125;, <span class="comment">// 命名视图组件</span></span><br><span class="line">  redirect?: string | Location | <span class="built_in">Function</span>,  <span class="comment">//重定向路由</span></span><br><span class="line">  props?: boolean | <span class="built_in">Object</span> | <span class="built_in">Function</span>,      <span class="comment">//解耦</span></span><br><span class="line">  alias?: string | <span class="built_in">Array</span>&lt;string&gt;,           <span class="comment">//路由别名</span></span><br><span class="line">  children?: <span class="built_in">Array</span>&lt;RouteConfig&gt;,            <span class="comment">//嵌套路由</span></span><br><span class="line">  beforeEnter?: <span class="function">(<span class="params">to: Route, <span class="keyword">from</span>: Route, next: <span class="built_in">Function</span></span>) =&gt;</span> <span class="keyword">void</span>,</span><br><span class="line">  meta?: any,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.6.0+</span></span><br><span class="line">  caseSensitive?: boolean, <span class="comment">// 匹配规则是否大小写敏感？(默认值：false)</span></span><br><span class="line">  pathToRegexpOptions?: <span class="built_in">Object</span> <span class="comment">// 编译正则的选项</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于各种形式的路由为了方便理解 下面有一些简单的例子:</p><h3 id="一般路由">一般路由<a title="#一般路由" href="#一般路由"></a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123;<span class="attr">path</span>:<span class="string">&#x27;/one&#x27;</span>,<span class="attr">component</span>:one,&#125;,</span><br><span class="line">        &#123;<span class="attr">path</span>:<span class="string">&#x27;/two&#x27;</span>,<span class="attr">component</span>:two,&#125;,</span><br><span class="line">    ],</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 只需要填写路径和对应的组件,访问路径就能显示对应的组件</span></span><br></pre></td></tr></table></figure><h3 id="动态路由">动态路由<a title="#动态路由" href="#动态路由"></a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/User/:id&#x27;</span>, <span class="attr">component</span>: User, &#125;,</span><br><span class="line">    ],</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 通过动态路径参数, 可以允许不同的用户都能够匹配到 /User/:id 然后都使用User组件</span></span><br><span class="line"><span class="comment">// 然后这个id的值是可以在会被存储在路由对象当中  在组件模板中可以使用 this.$route.params.id 获取 </span></span><br></pre></td></tr></table></figure><h3 id="命名路由">命名路由<a title="#命名路由" href="#命名路由"></a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/user/:userId&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>, <span class="attr">component</span>: User &#125;</span><br><span class="line">    <span class="comment">// 通过 name字段可以为路由添加名字 然后我们可以通过这个名字来使用这个路由</span></span><br><span class="line">    <span class="comment">// &lt;router-link :to=&quot;&#123; name: &#x27;user&#x27;, params: &#123; userId: 123 &#125;&#125;&quot;&gt;User&lt;/router-link&gt;</span></span><br><span class="line">    <span class="comment">// 上面这个 &lt;router-link&gt; 默认情况下会被渲染成为&lt;a&gt; 链接 指向  /user/123   </span></span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="重定向路由">重定向路由<a title="#重定向路由" href="#重定向路由"></a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">      &#123;<span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,<span class="attr">redirect</span>:<span class="string">&#x27;/one&#x27;</span>&#125;  <span class="comment">// 访问根地址 的时候URL重定向到 /one 然后显示one组件 </span></span><br><span class="line">      &#123;<span class="attr">path</span>:<span class="string">&#x27;/one&#x27;</span>,<span class="attr">component</span>:one,&#125;,</span><br><span class="line">      &#123;<span class="attr">path</span>:<span class="string">&#x27;/two&#x27;</span>,<span class="attr">component</span>:two,&#125;,</span><br><span class="line">    ],</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/foo&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;foo&#x27;</span>,<span class="attr">component</span>:foo&#125;</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/a&#x27;</span>, <span class="attr">redirect</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;foo&#x27;</span> &#125;&#125; </span><br><span class="line">    <span class="comment">// 重定向的目标也可以是一个命名的路由, </span></span><br><span class="line">    <span class="comment">// 当你访问/a的时候  URL会被重定向到/foo 然后显示foo组件</span></span><br><span class="line">    <span class="comment">// 当你访问/foo的时候 正常显示 </span></span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// redirect 也可以接收一个函数</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/a&#x27;</span>, <span class="attr">redirect</span>: <span class="function"><span class="params">to</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 方法接收 目标路由 作为参数</span></span><br><span class="line">      <span class="comment">// return 重定向的 字符串路径/路径对象</span></span><br><span class="line">    &#125;&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="路由别名">路由别名<a title="#路由别名" href="#路由别名"></a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/a&#x27;</span>, <span class="attr">component</span>: A, <span class="attr">alias</span>: <span class="string">&#x27;/b&#x27;</span> &#125;</span><br><span class="line">    <span class="comment">// 为路径/a 创建别名 /b, </span></span><br><span class="line">    <span class="comment">// 就是说当你访问/a的时候 正常显示</span></span><br><span class="line">    <span class="comment">// 当你访问/b的时候 URL会保持不变 但是路由会匹配到 /a相关的路由</span></span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 重定向的时候URL发生改变然后按照新URL匹配路由  路由别名URL不会发生变化按照相关联的别名匹配路由  </span></span><br></pre></td></tr></table></figure><h3 id="嵌套路由">嵌套路由<a title="#嵌套路由" href="#嵌套路由"></a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/User/:id&#x27;</span>, <span class="attr">component</span>: User,</span><br><span class="line">        <span class="comment">// 访问 /User/:id 显示User组件 并且User组件当中会显示它的子组件 </span></span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">          <span class="comment">// 访问 /User/:id/UserProfile 会在User组件当中 显示User的子组件 UserProfile </span></span><br><span class="line">          &#123; <span class="attr">path</span>: <span class="string">&#x27;UserProfile&#x27;</span>, <span class="attr">component</span>: User.components.UserProfile, &#125;,</span><br><span class="line">          &#123; <span class="attr">path</span>: <span class="string">&#x27;UserPosts&#x27;</span>, <span class="attr">component</span>: User.components.UserPosts, &#125;,</span><br><span class="line">          <span class="comment">// 访问 /User/:id/UserPosts 会在User组件当中显示 User的子组件UserPosts</span></span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="命名视图相关的路由">命名视图相关的路由<a title="#命名视图相关的路由" href="#命名视图相关的路由"></a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/xxx&#x27;</span>,</span><br><span class="line">            <span class="attr">components</span>: &#123;</span><br><span class="line">                <span class="attr">default</span>: test,</span><br><span class="line">                <span class="attr">first</span>: one,</span><br><span class="line">                <span class="attr">second</span>: two,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//某个目录/xxx 下一共三个 &lt;router-view&gt;</span></span><br><span class="line">            <span class="comment">// 第一个没有name属性 显示为 test组件, default 为匿名&lt;router-view&gt; 指定组件</span></span><br><span class="line">            <span class="comment">// 第二个 name为 first 显示组件one</span></span><br><span class="line">            <span class="comment">// 第三个 name为 second 显示组件two </span></span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;vuerouter基本使用步骤&quot;&gt;VueRouter基本使用步骤&lt;a title=&quot;#vuerouter基本使用步骤&quot; href=&quot;#vuerouter基本使用步骤&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;导入Vue Router (VueRoute.js的导入语</summary>
      
    
    
    
    <category term="Vue相关" scheme="http://blog.lipanpanx.com/categories/Vue%E7%9B%B8%E5%85%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue生命周期钩子</title>
    <link href="http://blog.lipanpanx.com/post/2021/202103/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F"/>
    <id>http://blog.lipanpanx.com/post/2021/202103/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F</id>
    <published>2021-03-05T11:03:32.000Z</published>
    <updated>2022-01-03T08:12:43.975Z</updated>
    
    <content type="html"><![CDATA[<p>Vue生命周期钩子是Vue开发者为Vue使用者预留的接口,使用这些接口我们能够在Vue生命周期的各个阶段做一些灵活的数据控制,来达到一些不可告人的目的.</p><h2 id="生命周期钩子的使用">生命周期钩子的使用<a title="#生命周期钩子的使用" href="#生命周期钩子的使用"></a></h2><p>在我们创建Vue实例的时候,需要提供一个对象,这个对象包括创建Vue实例的各种Options, Vue生命周期钩子是这些Options的一部分, 他们的值都是函数,当Vue实例到达某个生命周期后,就会尝试去调用这些生命周期对应的钩子函数. 对于Vue2.x而言目前已知的钩子函数包括下面11个:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> vue = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">        <span class="function"><span class="title">beforeCreate</span>(<span class="params"></span>)</span> &#123; &#125;,</span><br><span class="line">        <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123; &#125;,</span><br><span class="line">        <span class="function"><span class="title">beforeMount</span>(<span class="params"></span>)</span> &#123; &#125;,</span><br><span class="line">        <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123; &#125;,</span><br><span class="line">        <span class="function"><span class="title">beforeUpdate</span>(<span class="params"></span>)</span> &#123; &#125;,</span><br><span class="line">        <span class="function"><span class="title">updated</span>(<span class="params"></span>)</span> &#123; &#125;,</span><br><span class="line">        <span class="function"><span class="title">activated</span>(<span class="params"></span>)</span> &#123; &#125;,</span><br><span class="line">        <span class="function"><span class="title">deactivated</span>(<span class="params"></span>)</span> &#123; &#125;,</span><br><span class="line">        <span class="function"><span class="title">beforeDestroy</span>(<span class="params"></span>)</span> &#123; &#125;,</span><br><span class="line">        <span class="function"><span class="title">destroyed</span>(<span class="params"></span>)</span> &#123; &#125;,</span><br><span class="line">        <span class="function"><span class="title">errorCaptured</span>(<span class="params"></span>)</span> &#123; &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="beforecreate">beforeCreate<a title="#beforecreate" href="#beforecreate"></a></h2><blockquote><p>在调用beforeCreate的时候, 仅仅表示Vue实例刚刚被创建出来, 此时此刻还没有初始化好Vue实例中的数据和方法, 所以此时此刻还不能访问Vue实例中保存的数据和方法</p></blockquote><h2 id="created">created<a title="#created" href="#created"></a></h2><blockquote><p>在调用created的时候, 是我们最早能够访问Vue实例中保存的数据和方法的地方</p></blockquote><h2 id="beforemount">beforeMount<a title="#beforemount" href="#beforemount"></a></h2><blockquote><p>在调用beforeMount的时候, 表示Vue已经编译好了最终模板, 但是还没有将最终的模板渲染到界面上</p></blockquote><h2 id="mounted">mounted<a title="#mounted" href="#mounted"></a></h2><blockquote><p>在调用mounted的时候, 表示Vue已经完成了模板的渲染, 表示我们已经可以拿到界面上渲染之后的内容了</p></blockquote><h2 id="beforeupdate">beforeUpdate<a title="#beforeupdate" href="#beforeupdate"></a></h2><blockquote><p>在调用beforeUpdate的时候, 表示Vue实例中保存的数据被修改了<br>注意点: 只有保存的数据被修改了才会调用beforeUpdate, 否则不会调用<br>注意点: 在调用beforeUpdate的时候, 数据已经更新了, 但是界面还没有更新</p></blockquote><h2 id="updated">updated<a title="#updated" href="#updated"></a></h2><blockquote><p>在调用updated的时候, 表示Vue实例中保存的数据被修改了, 并且界面也同步了修改的数据了<br>也就是说: 数据和界面都同步更新之后就会调用updated</p></blockquote><h2 id="activated">activated<a title="#activated" href="#activated"></a></h2><blockquote><p>keep-alive 缓存的组件激活时会调用activated</p></blockquote><h2 id="deactivated">deactivated<a title="#deactivated" href="#deactivated"></a></h2><blockquote><p>keep-alive 缓存的组件停用时会调用deactivated</p></blockquote><h2 id="beforedestroy">beforeDestroy<a title="#beforedestroy" href="#beforedestroy"></a></h2><blockquote><p>在调用beforeDestroy的时候, 表示当前组件即将被销毁了<br>注意点: 只要组件不被销毁, 那么beforeDestroy就不会调用,beforeDestroy函数是我们最后能够访问到组件数据和方法的函数</p></blockquote><h2 id="destroyed">destroyed<a title="#destroyed" href="#destroyed"></a></h2><blockquote><p>在调用destroyed的时候, 表示当前组件已经被销毁了<br>注意点: 只要组件不被销毁, 那么destroyed就不会调用, 不要在这个生命周期方法中再去操作组件中数据和方法</p></blockquote><h2 id="errorcaptured">errorCaptured<a title="#errorcaptured" href="#errorcaptured"></a></h2><blockquote><p>捕获一个来自子孙组件的错误时会调用errorCaptured</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Vue生命周期钩子是Vue开发者为Vue使用者预留的接口,使用这些接口我们能够在Vue生命周期的各个阶段做一些灵活的数据控制,来达到一些不可告人的目的.&lt;/p&gt;
&lt;h2 id=&quot;生命周期钩子的使用&quot;&gt;生命周期钩子的使用&lt;a title=&quot;#生命周期钩子的使用&quot; href=&quot;</summary>
      
    
    
    
    <category term="Vue相关" scheme="http://blog.lipanpanx.com/categories/Vue%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="Vue2" scheme="http://blog.lipanpanx.com/tags/Vue2/"/>
    
    <category term="Vue2生命周期" scheme="http://blog.lipanpanx.com/tags/Vue2%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    
  </entry>
  
  <entry>
    <title>Vuex基本使用</title>
    <link href="http://blog.lipanpanx.com/post/2021/202103/Vuex%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8"/>
    <id>http://blog.lipanpanx.com/post/2021/202103/Vuex%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8</id>
    <published>2021-03-04T18:36:59.000Z</published>
    <updated>2022-01-03T08:12:43.975Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x10-vue子组件之间数据传递">0x10 Vue子组件之间数据传递<a title="#0x10-vue子组件之间数据传递" href="#0x10-vue子组件之间数据传递"></a></h2><p>在vue当中 同一个父组件下的子组件之间进行数据传递是非常蛋疼的,子组件之间并不能够直接传递数据,想要传递数据就需要首先将一方的数据通过函数传递给父组件, 然后在父组件中再把这个数据传递给另一方,如果组件的层级比较深,这样的操作可以说是非常麻烦了.</p><h2 id="0x20-vuex的基本使用">0x20 Vuex的基本使用<a title="#0x20-vuex的基本使用" href="#0x20-vuex的基本使用"></a></h2><p><a href="https://github.com/vuejs/vuex" target="_blank">vuex官方github仓库地址</a>    // vuex的3.x版本和4.x版本是在同一个仓库当中release的<br><a href="https://vuex.vuejs.org/" target="_blank">vuex 3.x 英文文档地址</a><br><a href="https://vuex.vuejs.org/zh/" target="_blank">vuex 3.x 中文文档地址</a></p><p><a href="https://next.vuex.vuejs.org/index.html" target="_blank">vuex 4.x 英文文档地址</a><br><a href="https://next.vuex.vuejs.org/zh/index.html" target="_blank">vuex 4.x 中文文档地址</a></p><p>要想使用vuex 首先下载和引入vuex, 在官方github的release页面可以下载对应版本的vuex,下载好压缩包并解压之后,打开dist目录就能找到我们需要的vuex.js,把这个vuex.js引入到我们的项目当中就行了,不过需要注意的是 在引入vuex.js之前一定要先引入vue.js.</p><p>上面我也说到了, vue的子组件之间传递数据还是非常蛋疼的,显然 vuex就是来解决这个问题的,那么如何使用vuex在子组件之间传递数据呢,其实也非常的简单:</p><p>首先通过<code>new Vuex.Store(&#123;&#125;)</code>创建一个Store实例 并传递一个包含所需options的对象,这个对象中有个state字段里面包含了需要在子组件当中传递的数据,比如:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">        <span class="attr">count</span>:<span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>然后我们把实例 store 挂在到父组件当中的store字段<br>最后就能够在子组件当中操作count了,操作的方式也非常简单 直接通过<code>this.$store.state.count</code>就能操作这个count的值了</p><p>但是这样直接操作的方式还是存在问题的,如果多个组件都去操作这个变量的时候,如果这个变量的值出现了问题你很难去判定到底是哪个组件的错误操作导致的,所以对于store.state当中的数据的公共操作可以提取出来,在创建Store实例时提供给 mutations 选项.具体代码如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">        <span class="attr">count</span>:<span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line">        <span class="function"><span class="title">add</span>(<span class="params">state</span>)</span>&#123;</span><br><span class="line">            state.count++;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">sub</span>(<span class="params">state</span>)</span>&#123;</span><br><span class="line">            state.count--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在上述代码当中我们可以看到,在mutations当中我们低通了对count进行自增和自减的函数,我们想要在子组件中调用这个函数的时候只需要通过<code>this.$store.commit(&quot;函数名字&quot;)</code> 就行了,当然我们在调用函数的时候还可以传递参数,这个参数就是mutation的载荷(payload) <code>this.$store.commit(&quot;函数名字&quot;,payload)</code> 这个payload参数可以就是一般的参数也可以是一个对象,当然我们在mutation的对应函数里面接收这个payload就能正常使用了.</p><p>除了使用<code>this.$store.commit(&quot;函数名字&quot;)</code> 的方式调用mutations当中的函数外还可以通过下面的方式调用:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$store.commit(&#123;</span><br><span class="line">    <span class="attr">type</span>:<span class="string">&quot;函数名字&quot;</span>,</span><br><span class="line">    <span class="attr">xxx</span>:xxx,</span><br><span class="line">&#125;),</span><br><span class="line">------------------------------------------------------------------</span><br><span class="line"><span class="comment">//  当commit接收到是一个对象的时候,mutation中对应的函数操作保持不变</span></span><br><span class="line">mutations: &#123;</span><br><span class="line">  函数名字 (state, payload) &#123;</span><br><span class="line">    state.count += payload.xxx</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外store也是支持计算属性的,这个计算属性和computed是差不多的,在创建Store实例的时候在提供的对象当中提供getters选项,这个getters选项当中的函数的返回值会被缓存起来,且只有当它的依赖值发生了改变才会被重新计算。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">        <span class="attr">msg</span>:<span class="string">&quot;lipanpanx.com&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;</span><br><span class="line">        <span class="function"><span class="title">test</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;调用getter当中的test函数&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> state.msg+<span class="string">&quot;真不错&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在getters当中提供了计算属性之后,访问这个属性也非常的简单,首先将store绑定到组件是必须的,然后在组件当中使用<code>this.$store.getters.test</code> 就能访问你的计算属性了</p><p>当然如果你也可以让getters中的函数返回另外一个方法,这样以来就方便传参, 但是你返回的这另一个方法会被缓存起来, 方法毕竟不是一个固定的值,所以这个方法每次都会被重新调用来获取结果:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&quot;lipanpanx.com&quot;</span>,</span><br><span class="line">        <span class="attr">xlist</span>: [<span class="string">&quot;x&quot;</span>,<span class="string">&quot;xx&quot;</span>,<span class="string">&quot;xxx&quot;</span>,<span class="string">&quot;xxxx&quot;</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;</span><br><span class="line">        <span class="function"><span class="title">test</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;调用getter当中的test函数&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> state.msg + <span class="string">&quot;真不错&quot;</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">testf</span>(<span class="params">state</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;这个方法每次都会被重新调用&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> state.xlist[id]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x10-vue子组件之间数据传递&quot;&gt;0x10 Vue子组件之间数据传递&lt;a title=&quot;#0x10-vue子组件之间数据传递&quot; href=&quot;#0x10-vue子组件之间数据传递&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在vue当中 同一个父组件下的子组件之间进行数据传递是</summary>
      
    
    
    
    <category term="Vue相关" scheme="http://blog.lipanpanx.com/categories/Vue%E7%9B%B8%E5%85%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue2组件化</title>
    <link href="http://blog.lipanpanx.com/post/2021/202103/Vue2%E7%BB%84%E4%BB%B6%E5%8C%96"/>
    <id>http://blog.lipanpanx.com/post/2021/202103/Vue2%E7%BB%84%E4%BB%B6%E5%8C%96</id>
    <published>2021-03-03T10:56:47.000Z</published>
    <updated>2022-01-03T08:12:43.975Z</updated>
    
    <content type="html"><![CDATA[<h2 id="组件化的意义">组件化的意义<a title="#组件化的意义" href="#组件化的意义"></a></h2><h2 id="自定义组件">自定义组件<a title="#自定义组件" href="#自定义组件"></a></h2><p>自定义一个组件方法有很多,但是背后的创建逻辑却大同小异,有三个核心要素是必须的:<br>1&gt;组件构造(传递给构造器的组件模板只能有一个根元素)<br>2&gt;组件注册<br>3&gt;组件使用</p><p>基于上面的三个核心要素诞生了好多创建组件的方式,下面我简单介绍一下我使用vscode snippets创建组件的过程:</p><h2 id="创建全局组件">创建全局组件<a title="#创建全局组件" href="#创建全局组件"></a></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;Vue.component&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;prefix&quot;</span>: <span class="string">&quot;Vue.component&quot;</span>,</span><br><span class="line">    <span class="string">&quot;body&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;Vue.component(&#x27;$&#123;1:组件名称&#125;&#x27;, &#123;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;    template:&#x27;#$&#123;1:组件模板id&#125;&#x27;, //$&#123;0:&lt;template id=&#x27;$&#123;1:组件模板id&#125;&#x27;&gt; &lt;div class=&#x27;$&#123;1:组件根元素类名&#125;&#x27;&gt; &lt;div&gt;我是组件$&#123;1:组件名称&#125;&lt;/div&gt;&lt;/div&gt; &lt;/template&gt;&#125;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;    data:function()&#123;return&#123;&#125;&#125;,&quot;</span>,</span><br><span class="line">        <span class="string">&quot;    methods:&#123;&#125;,components:&#123;&#125;,&quot;</span>,</span><br><span class="line">        <span class="string">&quot;&#125;);&quot;</span>,</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;scope&quot;</span>: <span class="string">&quot;javascript&quot;</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>全局组件注册需要用到Vue.component(id,[definition])函数,我们可以向这个函数提供 组件名称和组件对象来 注册组件<br>当我们传递组件对象的时候 Vue.component()会自动帮助我们使用Vue.extend()构造组件</p><p>上面的这段代码能够帮助用户迅速的注册一个全局组件,在用户输入组件名称之后,snippets会根据输入的名称自动生成用于构造组件的组件对象和组件模板(第5行注释就是模板),然后用户只需要剪切模板到合适的位置就行了, 注册组件和组件模板 都搞定之后  用户只需要在合适的位置使用 &lt;组件名&gt;&lt;/组件名&gt; 就能使用组件啦</p><h2 id="创建局部组件">创建局部组件<a title="#创建局部组件" href="#创建局部组件"></a></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;const-component&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;prefix&quot;</span>: <span class="string">&quot;const-component&quot;</span>,</span><br><span class="line">    <span class="string">&quot;body&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;const $&#123;1:组件引用名&#125;=&#123;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;    template:&#x27;#$&#123;1:组件模板id&#125;&#x27;,&quot;</span>,</span><br><span class="line">        <span class="string">&quot;    data:function()&#123;return&#123;&#125;&#125;,&quot;</span>,</span><br><span class="line">        <span class="string">&quot;    methods:&#123;&#125;,components:&#123;&#125;,&quot;</span>,</span><br><span class="line">        <span class="string">&quot;&#125;; //$&#123;0:&lt;template id=&#x27;$&#123;1:组件模板id&#125;&#x27;&gt; &lt;div class=&#x27;$&#123;1:模板根元素类名&#125;&#x27;&gt; &lt;div&gt;我是组件$&#123;1:组件名称&#125;&lt;/div&gt;&lt;/div&gt; &lt;/template&gt;&#125;&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;scope&quot;</span>: <span class="string">&quot;javascript&quot;</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>这段创建局部组件的snippets和上面的 创建全局组件的snippets基本大同小异, 只是局部组件的注册和全局组件的注册有所不同<br>局部组件 需要在vue实例的 components字段当中传递组件对象的引用或者直接传递组件对象 代码如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> vue = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">computed</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">watch</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">filters</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">components</span>: &#123;</span><br><span class="line">        <span class="string">&quot;组件名称&quot;</span>:组件引用名</span><br><span class="line">        <span class="string">&#x27;组件名称&#x27;</span>:&#123;</span><br><span class="line">            <span class="attr">template</span>:<span class="string">&#x27;#组件模板id&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span>&#123;&#125;&#125;,</span><br><span class="line">            <span class="attr">methods</span>:&#123;&#125;,<span class="attr">props</span>:[],<span class="attr">components</span>:&#123;&#125;,</span><br><span class="line">        &#125;, </span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果直接在vue实例的components字段当中使用直接传递组件对象的方式 去注册局部组件 可以使用下面的snippets:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;sub-component&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;prefix&quot;</span>: <span class="string">&quot;sub-component&quot;</span>,</span><br><span class="line">    <span class="string">&quot;body&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;&#x27;$&#123;1:组件名称&#125;&#x27;:&#123;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;    template:&#x27;#$&#123;1:模板id&#125;&#x27;,&quot;</span>,</span><br><span class="line">        <span class="string">&quot;    data:function()&#123;return&#123;&#125;&#125;,&quot;</span>,</span><br><span class="line">        <span class="string">&quot;    methods:&#123;&#125;,props:[],components:&#123;&#125;,&quot;</span>,</span><br><span class="line">        <span class="string">&quot;&#125;, //$&#123;0:&lt;template id=&#x27;$&#123;1:模板id&#125;&#x27;&gt; &lt;div class=&#x27;$&#123;1:模板根元素类名&#125;&#x27;&gt; &lt;div&gt;我是组件$&#123;1:组件名称&#125;&lt;/div&gt;&lt;/div&gt; &lt;/template&gt;&#125;&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;scope&quot;</span>: <span class="string">&quot;javascript&quot;</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>局部组件之所以叫局部组件,那就是他的使用范围是被限定的,如果某个Vue实例注册了局部组件,那么这个局部组件就只能在这个实例中使用,全局组件则可以在多个Vue实例当中共用</p><h2 id="自定义组件中的data和methods">自定义组件中的data和methods<a title="#自定义组件中的data和methods" href="#自定义组件中的data和methods"></a></h2><p>从上方自定义组件的snippets我们也可以看出来 自定义组件时候也可以传递 data 和 methods属性<br>因为在自定义组件的模板中 我们也会使用到自定义的函数 也会使用自定义的数据 所以就像Vue实例一样我们也需要这两个属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&#x27;test&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;test&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.prevent</span>=<span class="string">&#x27;clickHandler($event)&#x27;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在创建Vue实例所使用 对象 当中 data 和 methods 属性的值都是 一个对象<br>自定义组件的 methods属性和 Vue实例创建时候提供的methods属性使用方式几乎相同 都是一个包含若干函数的对象</p><p>但是 自定义组件当中的 data属性却是一个函数 这个和Vue实例创建的时候提供的data属性是完全不同的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;test&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&#x27;#test&#x27;</span>, <span class="comment">//</span></span><br><span class="line">    <span class="attr">data</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">msg</span>:<span class="string">&quot;hehe&quot;</span>,</span><br><span class="line">    &#125; &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="function"><span class="title">clickHandler</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="attr">components</span>: &#123;&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>为什么创建自定义组件所传递的组件对象当中的 data属性是一个函数呢,其实原因也很简单,假如我们有一个组件X, 这个组件X我们可能在网页当中使用很多次, 这就是组件的复用, 但是组件复用的前提是每个组件是不完全相同的, 即使都是组件X,每个组件应该显示不同的数据, 如何确保每个组件显示的数据是不同的呢, 这就需要 每个组件和自己的数据绑定而不是和公用的数据绑定, 所以自定义组件的data属性就是一个返回对象的函数, 这个函数会针对每个组件X返回一个对象, 这个对象会和每个组件X进行绑定, 这样以来每个组件X就会有自己独享的数据对象了.</p><h2 id="组件切换与动态组件">组件切换与动态组件<a title="#组件切换与动态组件" href="#组件切换与动态组件"></a></h2><p>有时候我们需要在不同的组件之间进行切换, 对于一般的组件切换我们可以使用 v-if来实现,v-if虽然也不错 但是官方提供了更加有趣的方案 那就是动态组件, 而且 通过 <code>&lt;keep-alive&gt;</code> 标签 我们可以实现保存组件切换前后的状态</p><p>假设我们有两个组件 分别是 组件aaa 和组件bbb  如果想要通过动态组件实现2个组件之间的切换就比较简单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.prevent</span>=<span class="string">&#x27;clickHandler($event)&#x27;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&#x27;componentx&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如上 我们为<code>&lt;component&gt;</code>标签的is属性绑定一个变量 componentx, 用这个变量我们久能控制需要被显示的组件是哪个组件<br>然后 通过按钮的点击事件就可以去改变 变量 componentx的值 也就可以切换当前显示的组件了,而且由于<code>&lt;component&gt;</code>标签是被放在 <code>&lt;keep-alive&gt;</code>标签里面的所以组件切换前后 组件的状态能够被很好的保存, 假如组件aaa中有个checkbox是check的状态, 那么切换到组件bbb再切换回组件aaa 这个checkbox依然会保持check的状态</p><h2 id="父子组件">父子组件<a title="#父子组件" href="#父子组件"></a></h2><p>组件和Vue实例一样都能使用components属性,也就是说每个组件都能通过components属性定义自己的局部组件,也就是每个组将都能有自己的子组件</p><p>就像上文中的局部组件只能在相应的Vue实例当中使用一样  子组件也是只能在父组件当中使用<br>如果我们定义了一个父组件father, 并且在father组件对象当中的components属性中又定义了一个组件son, 那么 <code>&lt;son&gt;&lt;\/son&gt;</code> 就只能在father组件的模板当中使用</p><p>父子组件这样的父子关系,让他们之间的数据交换比其他组件之间更加容易 更加灵活</p><h3 id="子组件使用父组件的数据">子组件使用父组件的数据<a title="#子组件使用父组件的数据" href="#子组件使用父组件的数据"></a></h3><p>子组件使用父组件中数据的2个步骤:</p><p>1&gt; prop是你可以在组件上注册的一些自定义attribute,我们在创建子组件的时候通过提供props来声明我们的子组件定义了那些prop, 也就是 我们创建子组件的时候想要注册的一些自定义 attribute 写道 props当中去,如下son组件当中声明了2个自定义的 attribute 分别是 xxx和yyy .</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">components: &#123;</span><br><span class="line">    <span class="string">&#x27;father&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">template</span>: <span class="string">&#x27;#father&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">age</span>:<span class="number">28</span>,</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&quot;lipanpan&quot;</span></span><br><span class="line">        &#125; &#125;,</span><br><span class="line">        <span class="attr">methods</span>: &#123;&#125;, <span class="attr">props</span>: [], </span><br><span class="line">        <span class="attr">components</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;son&#x27;</span>: &#123;</span><br><span class="line">                <span class="attr">template</span>: <span class="string">&#x27;#son&#x27;</span>,</span><br><span class="line">                <span class="attr">data</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> &#123;&#125; &#125;,</span><br><span class="line">                <span class="attr">methods</span>: &#123;&#125;, <span class="attr">props</span>: [<span class="string">&quot;xxx&quot;</span>,<span class="string">&quot;yyy&quot;</span>], <span class="attr">components</span>: &#123;&#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>2&gt; 然后我们在父组件的模板当中使用子组件的时候 就可以将自己的数据绑定到子组件的属性上面,由于刚才我们为子组件定义了2个属性 xxx和yyy, 我们将父组件的 age 和name 绑定到这2个属性上,然后我们在子组件的模板当中 使用自己的属性就相当于使用父组件的数据.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&#x27;father&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;father&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是组件father<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">son</span> <span class="attr">:xxx</span>=<span class="string">&quot;age&quot;</span> <span class="attr">:yyy</span>=<span class="string">&quot;name&quot;</span>&gt;</span>在父组件当中使用子组件<span class="tag">&lt;/<span class="name">son</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&#x27;son&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;son&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是组件son<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>来自父组件的数据xxx:&#123;&#123;xxx&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>来自父组件的数据yyy:&#123;&#123;yyy&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="子组件使用父组件的方法">子组件使用父组件的方法<a title="#子组件使用父组件的方法" href="#子组件使用父组件的方法"></a></h3><p>子组件使用父组件当中方法的2个步骤:<br>1&gt; 首先在父组件中通过v-on 绑定事件监听器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&#x27;father&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;father&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是组件father<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">son</span> @<span class="attr">father-func</span>=<span class="string">&#x27;fatherSay&#x27;</span>&gt;</span>在父组件当中使用子组件<span class="tag">&lt;/<span class="name">son</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2&gt; 然后在子组件的某个函数当中 通过$emit()触发事件 调用事件处理函数(这里是父组件当中的方法)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&#x27;son&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;son&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是组件son<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.prevent</span>=<span class="string">&#x27;sonFunc($event)&#x27;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">components: &#123;</span><br><span class="line">    <span class="string">&#x27;father&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">template</span>: <span class="string">&#x27;#father&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> &#123;&#125; &#125;,</span><br><span class="line">        <span class="attr">methods</span>: &#123;</span><br><span class="line">            <span class="function"><span class="title">fatherSay</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                alert(<span class="string">&quot;我是father组件的方法&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="attr">props</span>: [], </span><br><span class="line">        <span class="attr">components</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;son&#x27;</span>: &#123;</span><br><span class="line">                <span class="attr">template</span>: <span class="string">&#x27;#son&#x27;</span>,</span><br><span class="line">                <span class="attr">data</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> &#123;&#125; &#125;,</span><br><span class="line">                <span class="attr">methods</span>: &#123;</span><br><span class="line">                    <span class="function"><span class="title">sonFunc</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                        <span class="built_in">this</span>.$emit(<span class="string">&quot;father-func&quot;</span>)</span><br><span class="line">                        <span class="comment">// 使用 $emit 触发事件 </span></span><br><span class="line">                        <span class="comment">// 传递给$emit的方法名字是一个字符串</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="attr">props</span>: [], <span class="attr">components</span>: &#123;&#125;,</span><br><span class="line">            &#125;, </span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;, </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="子组件将数据传递给父组件">子组件将数据传递给父组件<a title="#子组件将数据传递给父组件" href="#子组件将数据传递给父组件"></a></h3><p>子组件传递数据给父组件可以通过 调用父组件的方法来实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">components: &#123;</span><br><span class="line">    <span class="string">&#x27;father&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">template</span>: <span class="string">&#x27;#father&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">input_msg</span>:<span class="literal">undefined</span>,</span><br><span class="line">        &#125; &#125;,</span><br><span class="line">        <span class="attr">methods</span>: &#123;</span><br><span class="line">            <span class="function"><span class="title">fatherSay</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;我是father组件的方法&quot;</span>);</span><br><span class="line">                <span class="built_in">this</span>.input_msg=data</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="attr">props</span>: [], </span><br><span class="line">        <span class="attr">components</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;son&#x27;</span>: &#123;</span><br><span class="line">                <span class="attr">template</span>: <span class="string">&#x27;#son&#x27;</span>,</span><br><span class="line">                <span class="attr">data</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> &#123;&#125; &#125;,</span><br><span class="line">                <span class="attr">methods</span>: &#123;</span><br><span class="line">                    <span class="function"><span class="title">sonFunc</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                        <span class="built_in">this</span>.$emit(<span class="string">&quot;father-func&quot;</span>,<span class="built_in">Math</span>.random())</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="attr">props</span>: [], <span class="attr">components</span>: &#123;&#125;,</span><br><span class="line">            &#125;, <span class="comment">//</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;, <span class="comment">//</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>由上面的代码可以看到 子组件在传递数据给父组件的时候,只需要在使用<code>vm.$emit(&quot;xxx&quot;,[...args])</code>调用父组件的方法的时候把需要传递的数据当作参数传递过去就行了,然后在父组件的方法中接收和使用子组件当中传递过来的参数</p><h3 id="多级组件数据传递">多级组件数据传递<a title="#多级组件数据传递" href="#多级组件数据传递"></a></h3><p>由上文我们可以知道 子组件可以使用父组件的数据, 子组件可以调用父组件的方法并且将数据传递给父组件, 但是如果组件的层级比较多, 比如子组件使用爷爷组件的数据和方法应该如何做: 这里只是简单介绍一种相对容易理解但是挺麻烦的做法那就是一层层的传递, 儿子组件想要使用爷爷组件的数据和方法首先把想要使用的数据和方法从爷爷组件传递给父组件,然后再从父组件传递给儿子组件就行了.</p><h2 id="组件中的命名注意点">组件中的命名注意点<a title="#组件中的命名注意点" href="#组件中的命名注意点"></a></h2><h3 id="组件名子的命名">组件名子的命名<a title="#组件名子的命名" href="#组件名子的命名"></a></h3><blockquote><p>注册组建的时候如果组件的名字使用了驼峰命名法, 那么html中使用组件的时候需要使用短横线命名法去使用这个组件. 例如: 注册时: myFather -&gt; 使用时: <code>&lt;my-father&gt;&lt;/my-father&gt;</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;myFather&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&#x27;#myFather&#x27;</span>, <span class="comment">//</span></span><br><span class="line">    <span class="attr">data</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> &#123;&#125; &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;&#125;, <span class="attr">components</span>: &#123;&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;myFather&gt;&lt;/myFather&gt; 注册组件的时候使用驼峰命名 使用组件的时候不能使用驼峰命名 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">my-father</span>&gt;</span><span class="tag">&lt;/<span class="name">my-father</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&#x27;myFather&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;myFather&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是组件myFather<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="组件传入变量命名">组件传入变量命名<a title="#组件传入变量命名" href="#组件传入变量命名"></a></h3><blockquote><p>父组件传递数据给子组件的时候, 传入的变量名如果使用短横线命名方式,子组件得到的变量会被转换称为驼峰命名方式的变量. 例如: 传递时: parent-name=“name” -&gt; 接收时: props: [“parentName”]</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&#x27;father&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;father&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是组件father<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;son :parentName=&#x27;names&#x27;&gt;&lt;/son&gt; 父组件中使用驼峰命名法传递给子组件的变量名会被全部转换成为小写--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">son</span> <span class="attr">:parent-name</span>=<span class="string">&#x27;names&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">son</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 使用短横线命名法传递给子组件的变量名 会被转换成为驼峰命名法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&#x27;son&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;son&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是组件son<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>来自父组件的数据:&#123;&#123;parentName&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;father&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&#x27;#father&#x27;</span>, <span class="comment">//</span></span><br><span class="line">    <span class="attr">data</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">names</span>:[<span class="string">&quot;zhangsan&quot;</span>,<span class="string">&quot;lisi&quot;</span>]</span><br><span class="line">    &#125; &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;&#125;, <span class="attr">components</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;son&#x27;</span>: &#123;</span><br><span class="line">            <span class="attr">template</span>: <span class="string">&#x27;#son&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> &#123;&#125; &#125;,</span><br><span class="line">            <span class="attr">methods</span>: &#123;&#125;, <span class="attr">props</span>: [<span class="string">&quot;parentName&quot;</span>], <span class="attr">components</span>: &#123;&#125;,</span><br><span class="line">        &#125;, <span class="comment">//</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="组件传入的方法命名">组件传入的方法命名<a title="#组件传入的方法命名" href="#组件传入的方法命名"></a></h3><blockquote><p>父组件将自己的方法传递给子组件的时候, 传入的方法名字如果使用驼峰命名法, 这个传入的方法名会被转换成为全部小写的形式,因为html属性是大小写不敏感的, 所以我们用v-on绑定的事件名称即使有大写字母也会全部被转换成为小写.<br>例如: 传递时: @parent-say=“say” -&gt; 触发时: this.$emit(“parent-say”);</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&#x27;father&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;father&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是组件father<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">son</span> @<span class="attr">fatherFunc</span>=<span class="string">&#x27;say&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">son</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&#x27;son&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;son&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是组件son<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.prevent</span>=<span class="string">&#x27;clickHandler($event)&#x27;</span>&gt;</span>触发器按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;father&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&#x27;#father&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">names</span>:[<span class="string">&quot;zhangsan&quot;</span>,<span class="string">&quot;lisi&quot;</span>]</span><br><span class="line">    &#125; &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="function"><span class="title">say</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;我是父组件的方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="attr">components</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;son&#x27;</span>: &#123;</span><br><span class="line">            <span class="attr">template</span>: <span class="string">&#x27;#son&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> &#123;&#125; &#125;,</span><br><span class="line">            <span class="attr">methods</span>: &#123;</span><br><span class="line">                <span class="function"><span class="title">clickHandler</span>(<span class="params">$event</span>)</span>&#123;</span><br><span class="line">                    <span class="built_in">this</span>.$emit(<span class="string">&quot;fatherfunc&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="attr">props</span>: [], <span class="attr">components</span>: &#123;&#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="组件中的插槽是什么?">组件中的插槽是什么?<a title="#组件中的插槽是什么?" href="#组件中的插槽是什么?"></a></h2><p>默认情况下使用子组件时在子组件中编写的元素是不会被渲染的,如果子组件中有部分内容是使用时才确定的, 那么我们就可以使用插槽. 插槽就是在子组件中放一个&quot;坑&quot;, 以后由父组件来&quot;填&quot;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&#x27;father&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;father&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是组件father<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">son</span>&gt;</span>如果没有插槽 这句话是不会被渲染到页面上的 只会渲染son组件模板当中的内容 <span class="tag">&lt;/<span class="name">son</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="什么是匿名插槽?">什么是匿名插槽?<a title="#什么是匿名插槽?" href="#什么是匿名插槽?"></a></h3><p>匿名插槽是子组件根元素当中的 <code>&lt;slot&gt;可以有默认值&lt;/slot&gt;</code>标签, 这些标签所在的位置就是预留的坑位,当我们在父组件当中使用子组件时如果往子组件的标签对当中写入了内容这些被写入的内容就会把  <code>&lt;slot&gt;&lt;/slot&gt;</code>标签以及其包裹的内容替换掉,如果子组件当中有多出<code>&lt;slot&gt;&lt;/slot&gt;</code>则替换多次</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&#x27;father&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;father&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是组件father<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">son</span>&gt;</span>我会替换掉slot标签以及被slot标签包裹的内容<span class="tag">&lt;/<span class="name">son</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&#x27;son&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;son&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span>&gt;</span>插槽默认内容 我在网页当中会直接被渲染成字符串<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是组件son<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span>&gt;</span>插槽默认内容 我在网页当中会直接被渲染成字符串<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="什么是具名插槽?">什么是具名插槽?<a title="#什么是具名插槽?" href="#什么是具名插槽?"></a></h3><p>具名插槽和匿名插槽所差无几,只不过具名插槽的<code>&lt;slot&gt;</code>标签 有个name属性,这个属性就是插槽的名字, 在父组件中向子组件标签对中插入内容时候 可以通过<code>slot=name</code>属性控制插入到对应 name的插槽当中去</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&#x27;father&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;father&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是组件father<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">son</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;one&quot;</span>&gt;</span>往插槽名字为one的插槽中插入内容1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;two&quot;</span>&gt;</span>往插槽名字为two的插槽当中插入内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;one&quot;</span>&gt;</span>往插槽名字为one的插槽中插入内容2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;two&quot;</span>&gt;</span>往插槽名字为two的插槽当中插入内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">son</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&#x27;son&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;son&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&#x27;one&#x27;</span>&gt;</span>插槽默认内容<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是组件son<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&#x27;two&#x27;</span>&gt;</span>插槽默认内容<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="什么是作用域插槽?">什么是作用域插槽?<a title="#什么是作用域插槽?" href="#什么是作用域插槽?"></a></h3><p>作用域插槽就是可以传递数据的插槽 子组件当中的数据通过<code>&lt;slot v-bind:'xxx'='xxx'&gt;&lt;/slot&gt;</code> 的形式传递给父组件,然后父组件通过 <code>&lt;template slot-scope='obj'&gt;&lt;template&gt;</code>的形式来使用子组件当中的数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&#x27;son&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;son&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是组件son<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:names</span>=<span class="string">&quot;names&quot;</span> <span class="attr">:test</span>=<span class="string">&quot;test&quot;</span>&gt;</span>插槽默认内容<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&#x27;father&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;father&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是组件father<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">son</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;obj&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;name in obj.names&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;name.id&quot;</span>&gt;</span></span><br><span class="line">                    &#123;&#123; name &#125;&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">                &#123;&#123;obj&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">son</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-slot指令怎么使用?">v-slot指令怎么使用?<a title="#v-slot指令怎么使用?" href="#v-slot指令怎么使用?"></a></h3><p>v-slot指令是 Vue2.6 之后引入的指令,v-slot指令 使得在父组件当中书写插入到子组件当中的内容时更加的方便, 我写了2个snippets来快速使用这个指令:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;slot&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;prefix&quot;</span>: <span class="string">&quot;slot&quot;</span>,</span><br><span class="line">    <span class="string">&quot;body&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;&lt;slot $&#123;1:name=&#x27;$&#123;2:slot-name&#125;&#x27;&#125;$&#123;0&#125;&gt;插槽默认内容&lt;/slot&gt;&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;scope&quot;</span>: <span class="string">&quot;html&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;vslot&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;prefix&quot;</span>: <span class="string">&quot;vslot&quot;</span>,</span><br><span class="line">    <span class="string">&quot;body&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;&lt;template #$&#123;1:default&#125;=&#x27;obj&#x27;&gt;$&#123;0:需要被插入的内容&#125;&lt;/template&gt;&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;scope&quot;</span>: <span class="string">&quot;html&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先就是创建插槽的 slot代码段,这个代码段在子组件当中使用 可以快速创建匿名插槽和具名插槽, 在写完插槽的名字之后 你就可以进行随意的数据绑定把子组件的数据传递给父组件的使用者<br>然后就是vslot代码段, 这个代码段在父组件当中使用,  可以快速的创建 带v-slot(#)属性的 template标签, 这个标签对应的默认插槽是匿名插槽(#default), 这个标签同时又一个默认对象obj,这个对象能够接收 子组件的插槽通过v-bind传递过来的数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&#x27;father&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;father&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是组件father<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">son</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> #<span class="attr">one</span>=<span class="string">&#x27;obj&#x27;</span>&gt;</span></span><br><span class="line">                &#123;&#123;obj&#125;&#125; </span><br><span class="line">                <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">son</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&#x27;son&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;son&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是组件son<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&#x27;one&#x27;</span> <span class="attr">:names</span>=<span class="string">&quot;names&quot;</span> <span class="attr">:test</span>=<span class="string">&quot;test&quot;</span>&gt;</span>插槽默认内容<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;组件化的意义&quot;&gt;组件化的意义&lt;a title=&quot;#组件化的意义&quot; href=&quot;#组件化的意义&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&quot;自定义组件&quot;&gt;自定义组件&lt;a title=&quot;#自定义组件&quot; href=&quot;#自定义组件&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;自定义一个组件方法</summary>
      
    
    
    
    <category term="Vue相关" scheme="http://blog.lipanpanx.com/categories/Vue%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="Vue2" scheme="http://blog.lipanpanx.com/tags/Vue2/"/>
    
    <category term="Vue2组件" scheme="http://blog.lipanpanx.com/tags/Vue2%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>ShareX截图自动添加水印</title>
    <link href="http://blog.lipanpanx.com/post/2021/202102/ShareX%E6%88%AA%E5%9B%BE%E8%87%AA%E5%8A%A8%E6%B7%BB%E5%8A%A0%E6%B0%B4%E5%8D%B0"/>
    <id>http://blog.lipanpanx.com/post/2021/202102/ShareX%E6%88%AA%E5%9B%BE%E8%87%AA%E5%8A%A8%E6%B7%BB%E5%8A%A0%E6%B0%B4%E5%8D%B0</id>
    <published>2021-02-16T09:18:01.000Z</published>
    <updated>2022-01-03T08:12:43.975Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://search.pstatic.net/common/?src=https://i.imgur.com/4cSDbaw.png" alt="" loading="lazy" class="φbp"></p><p>sharex 截图之后是可以自动添加水印的  就像上面这样鼠标右键点击桌面底部任务栏中的sharex的小图标 设置即可</p><p>但是这个添加水印效果是需要你实现设置好的  当你有添加水印的效果之后才能使用它</p><h2 id="如何在sharex中添加水印的效果呢?">如何在sharex中添加水印的效果呢?<a title="#如何在sharex中添加水印的效果呢?" href="#如何在sharex中添加水印的效果呢?"></a></h2><p>下图建议PC端查看 <a href="https://imageproxy.pimg.tw/resize?url=https://i.imgur.com/1qo3O02.png" target="_blank">高清大图地址</a><br><img src="https://imageproxy.pimg.tw/resize?url=https://i.imgur.com/1qo3O02.png" alt="点击查看过程截图" loading="lazy"></p><blockquote><p>首先在桌面任务栏中的sharex小图标上右击鼠标 打开sharex菜单 然后按照上图步骤操作, 然后按照下图 添加水印效果即可</p></blockquote><p><img src="https://search.pstatic.net/common/?src=https://i.imgur.com/Ws5Wptp.png" alt="" loading="lazy" class="φbp"></p><h2 id="sharex水印常用的配置项:">Sharex水印常用的配置项:<a title="#sharex水印常用的配置项:" href="#sharex水印常用的配置项:"></a></h2><p>Sharex能对水印进行的操作还是比较全面的 我翻译一下常用的配置项</p><ul><li>Text: 水印的内容</li><li>Placement: 水印的大概位置</li><li>Offset: 水印相对于大概位置的偏移量</li><li>TextFont: 水印的字体</li><li>TextColor: 水印的颜色<br>还有 水印阴影 水印渐变 等等各种乱七八遭的设置 感觉没多大用</li></ul><h2 id="然后就是设置水印会出现的矛盾点:">然后就是设置水印会出现的矛盾点:<a title="#然后就是设置水印会出现的矛盾点:" href="#然后就是设置水印会出现的矛盾点:"></a></h2><p>如果你的水印字体设置过大 那么就会出现 有些图片比较小 水印显示不全<br>如果你的水印字体设置较小 就会出现 别人看不清的情况<br>如果你的水印字体设置的 不大不小 就会出现 影响图片观感 看起来图片怪怪的</p><p>还有就是黑色图片不能很好的显示黑色水印<br>白色图片不能很好的显示白色水印</p><h2 id="图片设置水印矛盾点的解决办法:">图片设置水印矛盾点的解决办法:<a title="#图片设置水印矛盾点的解决办法:" href="#图片设置水印矛盾点的解决办法:"></a></h2><p>一个不错的解决方法 就是在一个预设中设置多个大小不同 颜色不同的水印 用来达到最好的效果:<br><img src="https://search.pstatic.net/common/?src=https://i.imgur.com/l9z9TDS.png" alt="" loading="lazy"><br><img src="https://search.pstatic.net/common/?src=https://i.imgur.com/JYfd7FT.png" alt="" loading="lazy"></p><p>这样的话 无论大图小图 黑图白图 都能搞定</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://search.pstatic.net/common/?src=https://i.imgur.com/4cSDbaw.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; class=&quot;φbp&quot;&gt;&lt;/p&gt;
&lt;p&gt;sharex 截图之后是可</summary>
      
    
    
    
    <category term="其他" scheme="http://blog.lipanpanx.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>CSS box-shadow样式生成器</title>
    <link href="http://blog.lipanpanx.com/post/2021/202101/BoxShadow%E6%A0%B7%E5%BC%8F%E7%94%9F%E6%88%90%E5%99%A8"/>
    <id>http://blog.lipanpanx.com/post/2021/202101/BoxShadow%E6%A0%B7%E5%BC%8F%E7%94%9F%E6%88%90%E5%99%A8</id>
    <published>2021-01-21T11:42:22.000Z</published>
    <updated>2022-01-03T08:12:43.975Z</updated>
    
    <content type="html"><![CDATA[<p>box-shadow是CSS当中的一个非常棒的特性, 通过这个属性我们设置阴影就很简单了. 根据mdn css doc 中的 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow" target="_blank">box-shadow文档</a> 这个属性可以接收多组值(每组值用逗号隔开),设置多个阴影.</p><p>每一组值表示一个阴影又包含下面的几项(通过这几项我们可以控制阴影的存在形式(inset),偏移量(offset-x/y),模糊半径(blur-radius),扩散半径(spread-radius),和颜色(color)):</p><ul class="φbr" class="φbr" class="φbr"><li><input type="checkbox" disabled="" checked=""><i></i>最少2个最多4个 <code>&lt;length&gt;</code> 类型的值.(2个值表示offset-x/y,第3个值是blur-radius,第4个值是spread-radius)</li><li><input type="checkbox" disabled="" checked=""><i></i>一个可选的 inset 关键字</li><li><input type="checkbox" disabled="" checked=""><i></i>一个可选的 <code>&lt;color&gt;</code> 类型的值</li></ul><p>虽然css 的box-shadow 已经方便我们进行阴影设计了,我们从上文中可以看出设置阴影的时候需要控制的变量还是挺多的,如果想要设置复杂的阴影调试起来还是很累的,如果又工具能够帮助我们进行CSS 阴影代码调试那就再好不过了.</p><hr><p>所以今天介绍两个非常棒的box-shadow样式生成器<br>这两个都是在线的工具 使用非常方便</p><h2 id="mdn-box-shadow-generator">MDN box-shadow generator<a title="#mdn-box-shadow-generator" href="#mdn-box-shadow-generator"></a></h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Backgrounds_and_Borders/Box-shadow_generator" target="_blank">MDN CSS DOC 当中的工具</a></p><h2 id="make-a-smooth-shadow,friend.">Make a smooth shadow,friend.<a title="#make-a-smooth-shadow,friend." href="#make-a-smooth-shadow,friend."></a></h2><p><a href="https://shadows.brumm.af/" target="_blank">国外热心网友@brumm写的工具</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;box-shadow是CSS当中的一个非常棒的特性, 通过这个属性我们设置阴影就很简单了. 根据mdn css doc 中的 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow&quot; targ</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CSS Grid Layout 用法</title>
    <link href="http://blog.lipanpanx.com/post/2021/202101/CSS-Grid-Layout"/>
    <id>http://blog.lipanpanx.com/post/2021/202101/CSS-Grid-Layout</id>
    <published>2021-01-16T12:18:01.000Z</published>
    <updated>2022-01-03T08:12:43.975Z</updated>
    
    <content type="html"><![CDATA[<p>相关参考文档:<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout" target="_blank">CSS Grid Layout</a></p><h2 id="grid-layout-相关概念">grid layout 相关概念<a title="#grid-layout-相关概念" href="#grid-layout-相关概念"></a></h2><p>和 felxbox布局一样 在使用grid布局之前 同样需要先了解一下相关的概念,这些概念在 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout" target="_blank">Basic Concepts of grid layout</a>一文当中有相对详细的解释:</p><p><strong><a href="https://developer.mozilla.org/en-US/docs/Glossary/Grid" target="_blank">Grid</a></strong>: 一种二维布局模型</p><p><strong><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout#the_implicit_and_explicit_grid" target="_blank">Explicit Grid</a></strong>:<br><strong><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout#the_implicit_and_explicit_grid" target="_blank">Implicit Grid</a></strong>:</p><p><strong><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout#the_grid_container" target="_blank">Grid Container</a></strong>: 当你把一个元素的display属性设置为 grid/inline-grid 则这个元素就会变成 grid contianer<br><strong><a href="#">Grid Item</a></strong>: grid container 的直接子元素就会变成 grid item</p><p><strong><a href="https://developer.mozilla.org/en-US/docs/Glossary/Grid_Lines" target="_blank">Grid Lines</a></strong>:<br><strong><a href="https://developer.mozilla.org/en-US/docs/Glossary/Grid_Tracks" target="_blank">Grid Tracks</a></strong>: 网格轨道 是 位于2个相邻的 grid line 之间的空间.<br><strong><a href="#">Grid Cell</a></strong>: grid cell 是 css grid 当中的最小单元,他是4个 grid line 相交组成的空间,在概念上 和table 当中的 table cell 很相似.<br><strong><a href="https://developer.mozilla.org/en-US/docs/Glossary/Grid_Areas" target="_blank">Grid Areas</a></strong>: grid area 是一个或多个 grid cell 构成的举行区域,当你 在grid container当中通过 line-based placement 方式放置 grid item的时候  grid area 会被创建, 或者 你也可以通过 grid-template-areas 直接创建 grid area.<br><strong><a href="https://developer.mozilla.org/en-US/docs/Glossary/Gutters" target="_blank">Gutters</a></strong>: gutters表示grid tracks 之间的距离, 可以通过 column-gap,row-gap,gap进行控制, 当然也可以通过margin padding 等进行控制.<br><strong><a href="https://developer.mozilla.org/en-US/docs/Glossary/Grid_Axis" target="_blank">Grid Axis</a></strong>:<br><strong><a href="https://developer.mozilla.org/en-US/docs/Glossary/Grid_Rows" target="_blank">Grid row</a></strong>: 水平的grid track 就是 grid row<br><strong><a href="https://developer.mozilla.org/en-US/docs/Glossary/Grid_Column" target="_blank">Grid column</a></strong>: 垂直的 grid track 就是grid column</p><hr><blockquote><p>在讲解下面的属性之前 我先讲一下 grid item 是如何在 grid container当中被放置的:</p></blockquote><h2 id="grid-container-相关css属性">grid container 相关CSS属性<a title="#grid-container-相关css属性" href="#grid-container-相关css属性"></a></h2><p><strong><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-columns" target="_blank">grid-template-columns</a></strong>:<br><strong><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-rows" target="_blank">grid-template-rows</a></strong>:</p><details><summary>更多相关细节</summary><p>🥱 You got me !</p></details><p><strong><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-areas" target="_blank">grid-template-areas</a></strong>:</p><details><summary>更多相关细节</summary><p>🥱 You got me !</p></details><p><strong><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template" target="_blank">grid-template</a></strong>: CSS简写属性用来定义 grid columns, grid rows 和 grid areas.</p><details><summary>更多相关细节</summary><p>🥱 You got me !</p></details><hr><p><strong><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-columns" target="_blank">grid-auto-columns</a></strong>:<br><strong><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-rows" target="_blank">grid-auto-rows</a></strong>:<br><strong><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-flow" target="_blank">grid-auto-flow</a></strong>:</p><hr><p><strong><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/column-gap" target="_blank">column-gap(grid-row-gap)</a></strong>: 同 flexbox layout column-gap<br><strong><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/row-gap" target="_blank">row-gap(grid-column-gap)</a></strong>: 同 flexbox layout row-gap<br><strong><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/gap" target="_blank">gap(grid-gap)</a></strong>: 同 flexbox layout gap</p><p><strong><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/grid" target="_blank">grid</a></strong>: CSS简写属性 可以同时设置所有的 隐式grid 和显示grid 的grid 属性</p><hr><p><strong><a href="#">justify-items</a></strong>:<br><strong><a href="#">align-items</a></strong>:<br><strong><a href="#">place-items</a></strong>:</p><p><strong><a href="#">justify-content</a></strong>:<br><strong><a href="#">align-content</a></strong>:<br><strong><a href="#">place-content</a></strong>:</p><h2 id="grid-item-相关css属性">grid item 相关CSS属性<a title="#grid-item-相关css属性" href="#grid-item-相关css属性"></a></h2><p><strong><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start" target="_blank">grid-column-start</a></strong>:<br><strong><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end" target="_blank">grid-column-end</a></strong>:<br><strong><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column" target="_blank">grid-column</a></strong>: CSS简写属性 最多可以接收2个值, 第1个给grid-column-start 第2个给grid-column-end用/分开.</p><p><strong><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start" target="_blank">grid-row-start</a></strong>:<br><strong><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end" target="_blank">grid-row-end</a></strong>:<br><strong><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row" target="_blank">grid-row</a></strong>: CSS简写属性 最多可以接收2个值,第1个给grid-row-start,第2个给grid-row-end,用/分开.</p><p><strong><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area" target="_blank">grid-area</a></strong>:</p><hr><p><strong><a href="">justify-self</a></strong><br><strong><a href="">align-self</a></strong><br><strong><a href="">place-self</a></strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;相关参考文档:&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout&quot; target=&quot;_blank&quot;&gt;CSS Grid Layout&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;grid-la</summary>
      
    
    
    
    <category term="CSS相关" scheme="http://blog.lipanpanx.com/categories/CSS%E7%9B%B8%E5%85%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>CSS Flexible Box Layout用法</title>
    <link href="http://blog.lipanpanx.com/post/2021/202101/CSS-Flexible-Box-Layout"/>
    <id>http://blog.lipanpanx.com/post/2021/202101/CSS-Flexible-Box-Layout</id>
    <published>2021-01-13T10:16:36.000Z</published>
    <updated>2022-01-03T08:12:43.975Z</updated>
    
    <content type="html"><![CDATA[<p>相关参考文档:<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout" target="_blank">CSS Flexible Box Layout</a></p><h2 id="flexbox-布局基本概念">flexbox 布局基本概念<a title="#flexbox-布局基本概念" href="#flexbox-布局基本概念"></a></h2><p>要想使用flexbox布局 首先要了解几个概念:<br><img src="https://search.pstatic.net/common/?src=https://i.imgur.com/51CGKGU.png" alt="" loading="lazy"></p><p><strong><code>Flexbox</code></strong>: 一种在单一方向上显示项目的布局模型<br><strong><code>Flex Container</code></strong>: 当我们为某个元素的CSS中设置了display为 flex或者inline-flex,则当前元素都会变成 flex container<br><strong><code>Flex Item</code></strong>: 被flex container 包裹的直接子元素(direct children)就是flex item,此外被flex container直接包裹的连续文本也是 flex item.<br><strong><code>Main Axis</code></strong>: 主轴是用户定义的一个方向,如上图所示的主轴方向是从左向右 当然也可也从右往左 也可以从上向下 也可以从下向上<br><strong><code>Cross Axis</code></strong>: 侧轴 永远和主轴垂直的一条周轴 如果主轴横向则侧轴纵向 如果主轴是纵向则侧轴横向</p><p>当我们使用flexbox 布局的时候其实就是先找到一个父元素 添加 <code>display:flex</code> 让这个父元素变成flex container ,然后这个父元素的所有子元素就都变成了flex item, 然后我们分别为 flex container 和 flex item 添加我们所需要的属性就OK了.</p><h2 id="flex-container-相关css属性">flex container 相关CSS属性<a title="#flex-container-相关css属性" href="#flex-container-相关css属性"></a></h2><p>其中 flex container 中可以被使用的flex相关的属性如下:</p><p><strong><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction" target="_blank">flex-direction</a></strong>: 控制flex container 中主轴的方向<br><strong><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap" target="_blank">flex-wrap</a></strong>: 如果flex item在主轴方向上的宽度总和比flex container的主轴宽度还宽的时候 flex-wrap 可以控制采用收缩flex item宽度的方式 还是采用换行的方式 来确保flex contianer 能够容下所有flex item<br><strong><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-flow" target="_blank">flex-flow</a></strong>: 这个是CSS的简写属性 它一次性接收2个值, 第一个值给flex-direction 第二个值给flex-wrap.</p><hr><p>下面几个flex container的CSS属性 是用来对齐 flex container内部的flex items用的:<br><strong><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/align-items" target="_blank">align-items</a></strong>: 控制flex items 在侧轴方向上的对齐方式,本来flex item可以通过作用于自己的CSS 属性 align-self 控制自己在侧轴方向上的对齐方式, 而 align-items 的作用就是进行批量的设置所有flex items 的align-self的值.</p><p><strong><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/justify-items" target="_blank">justify-items</a></strong>: 这是属性和align-items相似是批量控制flex items的 justify-self属性的值用的 但是因为justify-slef在flexbox 当中不会生效,所以这个属性的值也就没有任何作用了,MDN参考文档中的原话:In flexbox layouts, this property is ignored.</p><p><strong><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/place-items" target="_blank">place-items</a></strong>: 这个是CSS的简写属性,它接收2个值,第一个值给align-items 第二个值给 justify-items</p><hr><p>在设置content对齐相关的属性之前我们需要了解在flexbox布局当中什么是content:其实也非常的简单在flexbox布局当中 所有flex item构成的统一整体就是flexbox布局的content, 所以说content相关的CSS属性其实就是操作这个统一整体的属性.</p><p><strong><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content" target="_blank">justify-content</a></strong>: 控制主轴方向上content的对齐方式<br><strong><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/align-content" target="_blank">align-content</a></strong>: 控制侧轴方向上的 content的对齐方式<br><strong><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/place-content" target="_blank">place-content</a></strong>: 这个是CSS的简写属性,它接收2个值,第一个给align-content,第二个给 justify-content.</p><hr><p><strong><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/row-gap" target="_blank">row-gap</a></strong>: 控制多行之间的间距,但是有个需要注意的点就是,在我们允许flex-wrap的情况下,如果flex item多行排列,这个时候align-content属性就会生效,因为 align-content的默认值为 stretch, 也就是说默认flex item 在垂直方向是是拉伸显示,多行flex item的渲染高度就是平分 flex container的高度, 看起来 flex item 多行之间就会有一个比较大的间距, 其实这个间距我们可以通过把 align-content设置成一个不是默认值stretch的值 进行消除/或者变成其他形式, 如果我们把align-conteng设置成为 start/center/end 这个看起来很大的间距就会直接消失, 这个时候我们就可以通过 row-gap自由的控制行间距了.<br><strong><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/column-gap" target="_blank">column-gap</a></strong>: 控制多列之间的间距<br><strong><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/gap" target="_blank">gap</a></strong>: 这个是CSS的简写属性 它最多接收2个值,第1个值给row-gap,第2个值给column-gap.</p><h2 id="flex-item-相关css属性">flex item 相关CSS属性<a title="#flex-item-相关css属性" href="#flex-item-相关css属性"></a></h2><p>我们可以再每一个 flex item设置他自己的 flex相关属性,允许被设置的相关属性如下:<br><strong><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/order" target="_blank">order</a></strong>: 这个CSS属性可以用来控制item在flex/grid container内部的摆放顺序,container内部的items 首先会按照 他们的order值升序排列,然后才会按照他们在html源码当中的位置进行排列.</p><p><strong><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-grow" target="_blank">flex-grow</a></strong>: 如果flex items设置了flex-grow属性, 如果flex items就会在主轴方向上强制占满整个flex contaienr的大小,在flex container的大小比flex items的size之和还大的时候(单行显示),就会有一块明显的剩余空间需要被分配, 当flex container的大小没有 flex items的size之和大的时候(多行显示),其实在主轴的边缘还有有可能出现剩余空间的,那就是在felx item的size确定的情况下,如果第一行的末尾剩余的空间刚刚比第二行的第一个元素的size小一点点,刚好容不下导致元素换行的时候这个时候第一行就会出现一个小的剩余空间, 这些剩余空间的合理分配就是通过 flexg-grow设置的权重来实现的.<br><strong><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-basis" target="_blank">flex-basis</a></strong>: 这个CSS属性控制flex item在主轴方向上的初始大小, 这个值比flex item的height/width拥有更高的优先级<br><strong><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-shrink" target="_blank">flex-shrink</a></strong>: 这个值控制在flex item的大小设置过大在主轴方向上超过flex container的大小的时候 如何进行合理的收缩自身的大小来确保 flex item不会溢出到 flex container的外面导致不美观.</p><p>关于flex-shrink导致flex item自身收缩大小的计算方法,在W3C CSS WG 发布的规范文档<a href="https://www.w3.org/TR/css-flexbox-1/" target="_blank">CSS Flexible Box Layout Module Level 1</a>的第9.7章节<a href="https://www.w3.org/TR/css-flexbox-1/#resolve-flexible-lengths" target="_blank">9.7. Resolving Flexible Lengths</a> 有说明,但是规范文档的内容还是比较苦涩难懂,已经有人写了简单易懂的文章:<a href="https://www.samanthaming.com/flexbox30/24-flex-shrink-calculation/" target="_blank">flex-shrink calculation</a></p><p>所谓收缩其实就是flex item 根据自身的 felx-shrink权重把自己剪掉一部分大小,这个被剪掉的大小的计算方式如下:</p><blockquote><ol><li>首先把 flex container把所有的flex item的flex-basis减掉 得到 negative free space 的宽度, 也就是本来要超出容器的宽度</li><li>然后 计算总权重  Σ(flex-basis x flex shrink)</li><li>每个 flex item各自的权重比 就是自己的(fex-basis x flex-shrink)/Σ(flex-basis x flex shrink)</li><li>每个 flex item需要减掉的 部分就是 negative free space * 各自的权重比</li><li>每个 flex item 计算出自己需要剪掉的部分之后就能得出 自己在主轴方向的最终大小了</li></ol></blockquote><p><strong><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex" target="_blank">flex</a></strong>: 这个是CSS的简写属性, 它接收3个值,第一个给flex-grow,第二个给flex-shrink,第三个给 flex-basis.</p><hr><p><strong><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/align-self" target="_blank">align-self</a></strong>: flex item通过这个属性可以控制自己在侧轴方向上的对齐方式.<br><strong><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/justify-self" target="_blank">justify-self</a></strong>: 在 flexbox布局当中 这个属性的值会被忽略,MDN参考文档中的原话:In flexbox layouts, this property is ignored.<br><strong><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/place-self" target="_blank">place-self</a></strong>: CSS简写属性 最多可以接收2个值 第1个值给align-self,第2个值给justify-self</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;相关参考文档:&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout&quot; target=&quot;_blank&quot;&gt;CSS Flexible Box Layout&lt;/a&gt;&lt;/p&gt;</summary>
      
    
    
    
    <category term="CSS相关" scheme="http://blog.lipanpanx.com/categories/CSS%E7%9B%B8%E5%85%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>JSFiddle 功能介绍</title>
    <link href="http://blog.lipanpanx.com/post/2021/202101/JSFiddle%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D"/>
    <id>http://blog.lipanpanx.com/post/2021/202101/JSFiddle%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D</id>
    <published>2021-01-12T09:32:46.000Z</published>
    <updated>2022-01-03T08:12:43.975Z</updated>
    
    <content type="html"><![CDATA[<h2 id="set-as-base">set as base<a title="#set-as-base" href="#set-as-base"></a></h2><p><img src="https://search.pstatic.net/common/?src=https://i.imgur.com/v4oOcoq.png" alt="" loading="lazy"><br><a href="https://jsfiddle.net" target="_blank">JSFiddle</a> 用了 这么久 一直不知道 <code>set as base</code> 这个功能到底干啥用的, 今天翻了一下 JSFiddle 的文档 看了一下</p><p>文档中关于 <a href="https://docs.jsfiddle.net/getting-started" target="_blank">这个功能的说明</a> 如下:</p><p>This action is available for logged in users only.</p><p>If you’re working a fiddle and updating it, the version number will increase, sometimes if you’re satisfied with the code you have it’s good to save it so that the version numbers are hidden, and the version you’ve set as base is the default one.</p><p>For example if you have a fiddle <a href="http://jsfiddle.net/oskar/aba321/23">jsfiddle.net/oskar/aba321/23</a> setting as base will make the 23 version accessible at <a href="http://jsfiddle.net/oskar/aba321">jsfiddle.net/oskar/aba321</a></p><p>When you save a new title or description for the fiddle, saving it will not result in any change on your dashboard, you need to set the fiddle as Base for the new title and description to appear.</p><p>这玩意 还真的挺棒:</p><p>首先 这个功能 登陆了才能用</p><p>然后 我说下这个功能的作用 假设你在 某个项目上工作 <a href="http://jsfiddle.net/cisco_li/o42rhfsj/">jsfiddle.net/cisco_li/o42rhfsj/</a> 你每次的保存都会生成一个新的版本 <a href="http://jsfiddle.net/cisco_li/o42rhfsj/%E7%89%88%E6%9C%AC%E5%8F%B7">jsfiddle.net/cisco_li/o42rhfsj/版本号</a>  如果你对某个版本比较满意 你就可以 使用  set as base 把他保存成为默认版本  每次你打开 <a href="http://jsfiddle.net/cisco_li/o42rhfsj/">jsfiddle.net/cisco_li/o42rhfsj/</a> 显示的就是这个默认版本 这可真的 太爽了  你把你的项目链接分享出去之后  然后你对这个链接 分享的内容  仍然保有控制权  棒不棒</p><p>还有就是 当你 保存 你的 title 和 description的时候 默认情况下  这些新保存的内容是不会显示在  你的 dashboard当中的 如果此时你使用了 set as base 按钮 那么你的 fiddle dashboard 就能显示最新的 title 和 description了</p><h2 id="collaborate">collaborate<a title="#collaborate" href="#collaborate"></a></h2><p>这个合作功能也很棒  点击之后 直接进入结对编程 模式<br>你只需要 把链接分享给 其他人 别人打开链接 都不需要登陆 就可以和你一起 编程了<br>但是对网速 有一定要求  要不然体验 不好</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;set-as-base&quot;&gt;set as base&lt;a title=&quot;#set-as-base&quot; href=&quot;#set-as-base&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://search.pstatic.net/common/?src=ht</summary>
      
    
    
    
    
  </entry>
  
</feed>
