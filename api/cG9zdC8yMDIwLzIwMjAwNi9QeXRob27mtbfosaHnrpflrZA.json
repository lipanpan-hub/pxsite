{"title":"Python海象算子(赋值表达式)","date":"2020-06-21T11:29:58.000Z","date_formatted":{"ll":"2020年6月21日","L":"2020/06/21","MM-DD":"06-21"},"link":"post/2020/202006/Python海象算子","updated":"2022-01-31T22:48:18.305Z","content":"<p>python 3.8 更新文档里面第一个 feature就是海象算子, 这个在python社区闹得沸沸扬扬的操作符到底好用吗? 今天这篇文章我就来试一试:</p>\n<p>首先需要讲下海象算子 因为长得样子像海象所以才叫海象算子 其专业名称叫做赋值表达式(Assignment expressions) 是不是感觉和python的赋值语句(assignment statement)很像, 其实二者是相互冲突的, 在设计时为了简化用户的选择, 添加了一个确保二者不能同时生效的规则, 通俗点来说就是 能 <strong>直接</strong> 用赋值表达式的地方就不能 <strong>直接</strong> 用赋值语句 反之亦然.</p>\n<p>为了让文章更加容易理解 下文中一律使用 <strong><code>赋值表达式</code></strong> 来表示 <strong><code>海象算子</code></strong></p>\n<h2 id=\"赋值表达式简化操作场景\">赋值表达式简化操作场景<a title=\"#赋值表达式简化操作场景\" href=\"#赋值表达式简化操作场景\"></a></h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (n := <span class=\"built_in\">len</span>(a)) &gt; <span class=\"number\">10</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;列表a中元素个数是 <span class=\"subst\">&#123;n&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 这里使用赋值表达式 避免了重复使用len 计算长度</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">discount = <span class=\"number\">0.0</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (mo := re.search(<span class=\"string\">r&#x27;(\\d+)% discount&#x27;</span>, advertisement)):</span><br><span class=\"line\">    discount = <span class=\"built_in\">float</span>(mo.group(<span class=\"number\">1</span>)) / <span class=\"number\">100.0</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (block := f.read(<span class=\"number\">256</span>)) != <span class=\"string\">&#x27;&#x27;</span>:</span><br><span class=\"line\">    process(block)</span><br></pre></td></tr></table></figure>\n<h2 id=\"不允许直接使用赋值表达式的场景\">不允许直接使用赋值表达式的场景<a title=\"#不允许直接使用赋值表达式的场景\" href=\"#不允许直接使用赋值表达式的场景\"></a></h2>\n<p>为了避免歧义和用户混淆 在一些场景下不得使用赋值表达式或者说此时使用赋值表达式需要进行特殊处理:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 不带括号的 赋值表达式 禁止出现在 表达式语句的 top level </span></span><br><span class=\"line\">y := f(x)  <span class=\"comment\"># INVALID</span></span><br><span class=\"line\">(y := f(x))  <span class=\"comment\"># Valid, though not recommended</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 赋值语句的右侧 可以是一个表达式 但这个表达式的top level不能出现不带括号的赋值表达式 </span></span><br><span class=\"line\">y0 = <span class=\"number\">2</span>+<span class=\"number\">3</span></span><br><span class=\"line\">y0 = y1 := f(x)  <span class=\"comment\"># INVALID</span></span><br><span class=\"line\">y0 = (y1 := f(x))  <span class=\"comment\"># Valid, though discouraged</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 赋值表达式不能直接作为函数的关键字参数</span></span><br><span class=\"line\">foo(x = y := f(x))  <span class=\"comment\"># INVALID</span></span><br><span class=\"line\">foo(x=(y := f(x)))  <span class=\"comment\"># Valid, though probably confusing</span></span><br><span class=\"line\"><span class=\"comment\"># 包含此规则是为了禁止过度混乱的代码，并且因为解析关键字参数已经够复杂了。</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 赋值表达式不能直接作为函数参数的默认值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span>(<span class=\"params\">answer = p := <span class=\"number\">42</span></span>):</span>  <span class=\"comment\"># INVALID</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span>(<span class=\"params\">answer=(<span class=\"params\">p := <span class=\"number\">42</span></span>)</span>):</span>  <span class=\"comment\"># Valid, though not great style</span></span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 赋值表达式 不能直接作为 函数参数的提示 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span>(<span class=\"params\">answer: p := <span class=\"number\">42</span> = <span class=\"number\">5</span></span>):</span>  <span class=\"comment\"># INVALID</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span>(<span class=\"params\">answer: (<span class=\"params\">p := <span class=\"number\">42</span></span>) = <span class=\"number\">5</span></span>):</span>  <span class=\"comment\"># Valid, but probably never useful</span></span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 赋值表达式不能直接在lambda函数当中出现</span></span><br><span class=\"line\">(<span class=\"keyword\">lambda</span>: x := <span class=\"number\">1</span>) <span class=\"comment\"># INVALID</span></span><br><span class=\"line\"><span class=\"keyword\">lambda</span>: (x := <span class=\"number\">1</span>) <span class=\"comment\"># Valid, but unlikely to be useful</span></span><br><span class=\"line\">(x := <span class=\"keyword\">lambda</span>: <span class=\"number\">1</span>) <span class=\"comment\"># Valid</span></span><br><span class=\"line\"><span class=\"keyword\">lambda</span> line: (m := re.match(pattern, line)) <span class=\"keyword\">and</span> m.group(<span class=\"number\">1</span>) <span class=\"comment\"># Valid</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 赋值表达式在f-string中也不能直接出现 因为会被当成格式控制字符</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">f&#x27;<span class=\"subst\">&#123;(x:=<span class=\"number\">10</span>)&#125;</span>&#x27;</span>  <span class=\"comment\"># Valid, uses assignment expression</span></span><br><span class=\"line\"><span class=\"string\">&#x27;10&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">f&#x27;<span class=\"subst\">&#123;x:=<span class=\"number\">10</span>&#125;</span>&#x27;</span>    <span class=\"comment\"># Valid, passes &#x27;=10&#x27; to formatter</span></span><br><span class=\"line\"><span class=\"string\">&#x27;        10&#x27;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"赋值表达式和赋值语句的区别\">赋值表达式和赋值语句的区别<a title=\"#赋值表达式和赋值语句的区别\" href=\"#赋值表达式和赋值语句的区别\"></a></h2>\n<p>由于<code>:=</code> 是一个表达式, 所以它可以被用在 使用赋值语句不合法的上下文当中 包括lambda函数 和 推导式当中.<br>\n但是 与之相反的是 赋值表达式 不支持 一些能被赋值语句所使用的高级特性.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 赋值语句的连续赋值 不能被赋值表达式直接支持</span></span><br><span class=\"line\">x = y = z = <span class=\"number\">0</span>  <span class=\"comment\"># Equivalent: (z := (y := (x := 0)))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如下语不能通过赋值表达式实现</span></span><br><span class=\"line\">a[i] = x</span><br><span class=\"line\">self.rest = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 赋值语句和赋值表达式和逗号相比优先级不同</span></span><br><span class=\"line\">x = <span class=\"number\">1</span>, <span class=\"number\">2</span>  <span class=\"comment\"># Sets x to (1, 2)</span></span><br><span class=\"line\">(x := <span class=\"number\">1</span>, <span class=\"number\">2</span>)  <span class=\"comment\"># Sets x to 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打包和解包可以在赋值语句直接使用 但是赋值表达式不能直接使用</span></span><br><span class=\"line\">loc = x, y  <span class=\"comment\"># Use (loc := (x, y))</span></span><br><span class=\"line\">info = name, phone, *rest  <span class=\"comment\"># Use (info := (name, phone, *rest))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如下语句 无法通过赋表达式实现</span></span><br><span class=\"line\">px, py, pz = position</span><br><span class=\"line\">name, phone, email, *other_info = contact</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 赋值语句可以使用的内联类型提示 赋值表达式就不支持</span></span><br><span class=\"line\"><span class=\"comment\"># 当然这里可以使用 &quot;p: Optional[int]&quot; 单独声明类型</span></span><br><span class=\"line\">p: <span class=\"type\">Optional</span>[<span class=\"built_in\">int</span>] = <span class=\"literal\">None</span> </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 赋值表达式不支持增强型的赋值操作</span></span><br><span class=\"line\">total += tax  <span class=\"comment\"># Equivalent: (total := total + tax)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\">总结<a title=\"#总结\" href=\"#总结\"></a></h2>\n<p><strong><code>使用赋值表达式的时候带上括号准没错</code></strong></p>\n","prev":{"title":"Python设计模式-单例模式","link":"post/2020/202006/Python设计模式-单例模式"},"next":{"title":"Github仓库如何选择开源许可证","link":"post/2020/202006/Github开源证书选择"},"plink":"http://blog.lipanpanx.com/post/2020/202006/Python海象算子/","toc":[{"id":"赋值表达式简化操作场景","title":"赋值表达式简化操作场景","index":"1"},{"id":"不允许直接使用赋值表达式的场景","title":"不允许直接使用赋值表达式的场景","index":"2"},{"id":"赋值表达式和赋值语句的区别","title":"赋值表达式和赋值语句的区别","index":"3"},{"id":"总结","title":"总结","index":"4"}],"reward":true,"copyright":{"author":"李攀攀","link":"<a href=\"http://blog.lipanpanx.com/post/2020/202006/Python海象算子/\" title=\"Python海象算子(赋值表达式)\">http://blog.lipanpanx.com/post/2020/202006/Python海象算子/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"},"reading_time":"1059 字约 7 分钟"}