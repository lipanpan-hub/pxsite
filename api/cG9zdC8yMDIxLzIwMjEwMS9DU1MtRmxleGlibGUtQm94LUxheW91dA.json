{"title":"CSS Flexible Box Layout基本用法","date":"2021-12-13T10:16:36.000Z","date_formatted":{"ll":"2021年12月13日","L":"2021/12/13","MM-DD":"12-13"},"link":"post/2021/202101/CSS-Flexible-Box-Layout","updated":"2021-12-16T02:07:36.408Z","content":"<p>相关参考文档:<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout\" target=\"_blank\">CSS Flexible Box Layout</a></p>\n<h2 id=\"flexbox-布局基本概念\">flexbox 布局基本概念<a title=\"#flexbox-布局基本概念\" href=\"#flexbox-布局基本概念\"></a></h2>\n<p>要想使用flexbox布局 首先要了解几个概念:<br>\n<img src=\"https://search.pstatic.net/common/?src=https://i.imgur.com/51CGKGU.png\" alt=\"\" loading=\"lazy\"></p>\n<p><strong><code>Flexbox</code></strong>: 一种在单一方向上显示项目的布局模型<br>\n<strong><code>Flex Container</code></strong>: 当我们为某个元素的CSS中设置了display为 flex或者inline-flex,则当前元素都会变成 flex container<br>\n<strong><code>Flex Item</code></strong>: 被flex container 包裹的直接子元素(direct children)就是flex item,此外被flex container直接包裹的连续文本也是 flex item.<br>\n<strong><code>Main Axis</code></strong>: 主轴是用户定义的一个方向,如上图所示的主轴方向是从左向右 当然也可也从右往左 也可以从上向下 也可以从下向上<br>\n<strong><code>Cross Axis</code></strong>: 侧轴 永远和主轴垂直的一条周轴 如果主轴横向则侧轴纵向 如果主轴是纵向则侧轴横向</p>\n<p>当我们使用flexbox 布局的时候其实就是先找到一个父元素 添加 <code>display:flex</code> 让这个父元素变成flex container ,然后这个父元素的所有子元素就都变成了flex item, 然后我们分别为 flex container 和 flex item 添加我们所需要的属性就OK了.</p>\n<h2 id=\"flex-container-相关css属性\">flex container 相关CSS属性<a title=\"#flex-container-相关css属性\" href=\"#flex-container-相关css属性\"></a></h2>\n<p>其中 flex container 中可以被使用的flex相关的属性如下:</p>\n<p><strong><code>flex-direction</code></strong>: 控制flex container 中主轴的方向<br>\n<strong><code>flex-wrap</code></strong>: flex container 中如果flex item的足够多 装不下的时候, 默认是缩小 flex item的大小 确保一定装的下, 而不进行换行,这个属性用来控制是否换行<br>\n<strong><code>flex-flow</code></strong>: 这个是CSS的简写属性 它一次性接收2个值, 第一个值给flex-direction 第二个值给flex-wrap.</p>\n<h3 id=\"批量控制flex-item的css属性\">批量控制flex item的CSS属性<a title=\"#批量控制flex-item的css属性\" href=\"#批量控制flex-item的css属性\"></a></h3>\n<p>下面几个flex container的属性 是用来对齐 flex container内部的flex items用的:<br>\n<strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/align-items\" target=\"_blank\">align-items</a></strong>: 控制flex items 在侧轴方向上的对齐方式,本来flex item可以通过作用于自己的CSS 属性 align-self 控制自己在侧轴方向上的对齐方式, 而 align-items 的作用就是进行批量的设置所有flex items 的align-self的值.</p>\n<p><strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/justify-items\" target=\"_blank\">justify-items</a></strong>: 这是属性和align-items相似是批量控制flex items的 justify-self属性的值用的 但是因为justify-slef在flexbox 当中不会生效,所以这个属性的值也就没有任何作用了,MDN参考文档中的原话:In flexbox layouts, this property is ignored.</p>\n<p><strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/place-items\" target=\"_blank\">place-items</a></strong>: 这个是CSS的简写属性,它接收2个值,第一个值给align-items 第二个值给 justify-items</p>\n<h3 id=\"控制flexbox内部content对齐方式\">控制flexbox内部content对齐方式<a title=\"#控制flexbox内部content对齐方式\" href=\"#控制flexbox内部content对齐方式\"></a></h3>\n<p>在设置content对齐相关的属性之前我们需要了解在flexbox布局当中什么是content:其实也非常的简单在flexbox布局当中 所有flex item构成的统一整体就是flexbox布局的content, 所以说content相关的CSS属性其实就是操作这个统一整体的属性.</p>\n<p><strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content\" target=\"_blank\">justify-content</a></strong>: 控制主轴方向上content的对齐方式<br>\n<strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/align-content\" target=\"_blank\">align-content</a></strong>: 控制侧轴方向上的 content的对齐方式<br>\n<strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/place-content\" target=\"_blank\">place-content</a></strong>: 这个是CSS的简写属性,它接收2个值,第一个给align-content,第二个给 justify-content.</p>\n<hr>\n<p><strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/row-gap\" target=\"_blank\">row-gap</a></strong>: 控制多行之间的间距,但是有个需要注意的点就是,在我们允许flex-wrap的情况下,如果flex item多行排列,这个时候align-content属性就会生效,因为 align-content的默认值为 stretch, 也就是说默认flex item 在垂直方向是是拉伸显示,多行flex item的渲染高度就是平分 flex container的高度, 看起来 flex item 多行之间就会有一个比较大的间距, 其实这个间距我们可以通过把 align-content设置成一个不是默认值stretch的值 进行消除/或者变成其他形式, 如果我们把align-conteng设置成为 start/center/end 这个看起来很大的间距就会直接消失, 这个时候我们就可以通过 row-gap自由的控制行间距了.<br>\n<strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/column-gap\" target=\"_blank\">column-gap</a></strong>: 控制多列之间的间距<br>\n<strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/gap\" target=\"_blank\">gap</a></strong>: 这个是CSS的简写属性 它接收2个值,第一个值给row-gap,第二个值给column-gap.</p>\n<h2 id=\"flex-item-相关css属性\">flex item 相关CSS属性<a title=\"#flex-item-相关css属性\" href=\"#flex-item-相关css属性\"></a></h2>\n<p>我们可以再每一个 flex item设置他自己的 flex相关属性,允许被设置的相关属性如下:<br>\n<strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/order\" target=\"_blank\">order</a></strong>: 这个CSS属性可以用来控制item在flex/grid container内部的摆放顺序,container内部的items 首先会按照 他们的order值升序排列,然后才会按照他们在html源码当中的位置进行排列.</p>\n<p><strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/flex-grow\" target=\"_blank\">flex-grow</a></strong>: 如果flex items设置了flex-grow属性, 如果flex items就会在主轴方向上强制占满整个flex contaienr的大小,在flex container的大小比flex items的size之和还大的时候(单行显示),就会有一块明显的剩余空间需要被分配, 当flex container的大小没有 flex items的size之和大的时候(多行显示),其实在主轴的边缘还有有可能出现剩余空间的,那就是在felx item的size确定的情况下,如果第一行的末尾剩余的空间刚刚比第二行的第一个元素的size小一点点,刚好容不下导致元素换行的时候这个时候第一行就会出现一个小的剩余空间, 这些剩余空间的合理分配就是通过 flexg-grow设置的权重来实现的.<br>\n<strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/flex-basis\" target=\"_blank\">flex-basis</a></strong>: 这个CSS属性控制flex item在主轴方向上的初始大小, 这个值比flex item的height/width拥有更高的优先级<br>\n<strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/flex-shrink\" target=\"_blank\">flex-shrink</a></strong>:<br>\n<strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/flex\" target=\"_blank\">flex</a></strong>: 这个是CSS的简写属性, 它接收3个值,第一个给flex-grow,第二个给flex-shrink,第三个给 flex-basis.</p>\n<hr>\n<p><strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/align-self\" target=\"_blank\">align-self</a></strong>: flex item通过这个属性可以控制自己在侧轴方向上的对齐方式.<br>\n<strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/justify-self\" target=\"_blank\">justify-self</a></strong>: 在 flexbox布局当中 这个属性的值会被忽略,MDN参考文档中的原话:In flexbox layouts, this property is ignored.</p>\n<hr>\n","next":{"title":"Hexo+Inside+Github+(NetlifyCMS+Vercel+Cloudflare)构建全球可高速访问的静态站点","link":"post/2021/202111/为博客添加内容管理系统"},"plink":"http://blog.lipanpanx.com/post/2021/202101/CSS-Flexible-Box-Layout/","toc":[{"id":"flexbox-布局基本概念","title":"flexbox 布局基本概念","index":"1"},{"id":"flex-container-相关css属性","title":"flex container 相关CSS属性","index":"2","children":[{"id":"批量控制flex-item的css属性","title":"批量控制flex item的CSS属性","index":"2.1"},{"id":"控制flexbox内部content对齐方式","title":"控制flexbox内部content对齐方式","index":"2.2"}]},{"id":"flex-item-相关css属性","title":"flex item 相关CSS属性","index":"3"}],"reward":true,"copyright":{"author":"李攀攀","link":"<a href=\"http://blog.lipanpanx.com/post/2021/202101/CSS-Flexible-Box-Layout/\" title=\"CSS Flexible Box Layout基本用法\">http://blog.lipanpanx.com/post/2021/202101/CSS-Flexible-Box-Layout/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"},"reading_time":"1517 字约 10 分钟"}