[{"title":"netlify-cli安装E404错误(找不到依赖项)解决","date":"2021-11-09T10:46:46.000Z","date_formatted":{"ll":"2021年11月9日","L":"2021/11/09","MM-DD":"11-09"},"updated":"2021-11-15T02:43:30.871Z","content":"今天打算安装 netlify-cli\n于是打开 terminal 运行了一下\n1npm install netlify-cli -g \n结果 上来就是一顿错误\n1234567891011npm ERR! code E404npm ERR! 404 Not Found - GET https://oss.npmmirror.com/netlify/-/netlify-8.0.4.tgznpm ERR! 404npm ERR! 404  &#x27;netlify@https://registry.npm.taobao.org/netlify/-/netlify-8.0.4.tgz&#x27; is not in this registry.npm ERR! 404 You should bug the author to publish it (or use the name yourself!)npm ERR! 404npm ERR! 404 Note that you can also install from anpm ERR! 404 tarball, folder, http url, or git url.npm ERR! A complete log of this run can be found in:npm ERR!     C:\\Users\\lipanpan\\AppData\\Local\\npm-cache\\_logs\\2021-11-09T02_43_45_128Z-debug.log\n报错信息显示 无法在registry 当中找到 netlify-8.0.4.tgz\n12345678lipanpan&gt; npm view netlify versions[ ...省略若干  &#x27;6.1.10&#x27;,       &#x27;6.1.11&#x27;,       &#x27;6.1.13&#x27;,       &#x27;6.1.14&#x27;,       &#x27;6.1.15&#x27;,  &#x27;6.1.16&#x27;,       &#x27;6.1.17&#x27;,       &#x27;6.1.18&#x27;,       &#x27;6.1.19&#x27;,       &#x27;6.1.20&#x27;,  &#x27;6.1.21&#x27;,       &#x27;6.1.22&#x27;,       &#x27;6.1.23&#x27;,       &#x27;6.1.24&#x27;,       &#x27;6.1.25&#x27;,  &#x27;6.1.26&#x27;,       &#x27;6.1.27&#x27;,       &#x27;6.1.28&#x27;,       &#x27;6.1.29&#x27;,       &#x27;7.0.0&#x27;,  &#x27;7.0.1&#x27;,        &#x27;8.0.0&#x27;,        &#x27;8.0.1&#x27;,        &#x27;8.0.2&#x27;,        &#x27;8.0.3&#x27;]\n我看了下确实没这个版本 最高版本就是8.0.3 但是这个包的最新版本(8.0.4)6天前已经在npm上面发布了\n\n因为我使用的是 淘宝的 npm镜像来加速安装\n12lipanpan&gt; npm config get registryhttps://registry.npm.taobao.org/\n所以导致安装失败的原因看起来 好像是淘宝npm镜像没有同步更新\n我打开了淘宝镜像的网站(https://npmmirror.com/) 然后发现 register 地址不知何时从 https://registry.npm.taobao.org/ 变成了 https://registry.npmmirror.com/ 然后我通过域名解析查询 发现这两个域名指向同一个A地址 183.60.82.98\n淘宝npm镜像的说明是 如果第一次安装失败 它会在后台自动同步 在后续安装的时候确保成功\n我连续尝试了好几次都是安装失败  看来这个说明并不靠谱\n然后 还有个 手动同步npm包的操作 就是手动执行  $ cnpm sync xxxx 但是我没安装cnpm, 着实让我感觉到蛋疼\n最后我选择换回 官方的 registery地址\n123lipanpan&gt; npm config set registry https://registry.npmjs.orglipanpan&gt; npm config get registryhttps://registry.npmjs.org/\n通过官方的reigstry 是可以看到最新版本的 netlify(8.0.4)包的\n1234567lipanpan&gt; npm view netlify versions[ ...省略若干  &#x27;6.1.21&#x27;,       &#x27;6.1.22&#x27;,       &#x27;6.1.23&#x27;,       &#x27;6.1.24&#x27;,       &#x27;6.1.25&#x27;,  &#x27;6.1.26&#x27;,       &#x27;6.1.27&#x27;,       &#x27;6.1.28&#x27;,       &#x27;6.1.29&#x27;,       &#x27;7.0.0&#x27;,  &#x27;7.0.1&#x27;,        &#x27;8.0.0&#x27;,        &#x27;8.0.1&#x27;,        &#x27;8.0.2&#x27;,        &#x27;8.0.3&#x27;,  &#x27;8.0.4&#x27;]\n然后安装 netlify-cli 一次性成功\n12345lipanpan&gt; npm install netlify-cli -g ...lipanpan&gt; netlify versionnetlify-cli/6.14.18 win32-x64 node-v16.13.0lipanpan&gt;\n","plink":"http://lipanpanx.com/post/2021/netlify-cli安装教程/"},{"title":"关闭vscode烦人的Github登陆弹窗","date":"2021-11-07T08:34:08.000Z","date_formatted":{"ll":"2021年11月7日","L":"2021/11/07","MM-DD":"11-07"},"updated":"2021-11-15T02:43:30.871Z","content":"\n这两天不知道怎么了每次我打开vscode就会有烦人的github登陆弹窗弹出来,即使不登陆也不影响向github的remote仓库提交代码,但是这个弹窗真的让人好心烦\n\n\n\n弹窗就是上面这个样子\n查了不少资料 最终我在stack overflow 上找到了一个比较有说服力的说法:\n\n首先当在你的电脑上安装git的时候 也会顺带的安装上git凭据管理器, 而且git允许有多个git凭据管理器,\n\n\n然后就是git还允许多级配置分别为 local配置 global配置 system配置  这三个配置都会生效 最后形成一个 effective配置\n因为三个配置都会生效  git 调用凭据管理器的时候 是按照顺序去寻找的 最先去 system配置当中寻找相应的凭据管理器.\n如果你的 system配置当中凭据管理器的相关设置是credential.helper=manager 他就会去调用这个manager, 但是这个manager当中很可能就没有我们需要的凭据 这个时候git就会去下一级配置中去寻找其他的凭据管理器, 最后在下级的配置文件中 使用的是store管理器,最后认证通过 正常提交代码, 但是manager的调用请求已经发出了 所以manager是肯定会被弹出的\n\n\n听起来 上面的说法头头是道, 我也确实在system配置当中找到了 credential.helper=manager 但是我没在local的配置当中找到credential.helper=store 但是我还是选择了相信,按照作者的说法 折腾了半天 就是不行 好坑爹 心好累\n\n最后我无意间 看到github cli的文档中有一篇 缓存凭据的文章 Caching your GitHub credentials in Git\n我就照着这篇文章搞了一下 虽然到最后还是失败了 但是github cli给了我一个重要的提示\n就是我的personal token权限太低 因为我只给了personal token访问repo的权限\n要进行在git当中缓存github的凭据我就需要再生成一个至少包括三个权限的凭据\n\nrepo\nread:org\nworkflow\n\n最后我在github上面生成了一个新的包含这三个权限的personal token, 顺利通过了github cli 将 github 的凭据缓存到了git\n然后我再打开 vscode 就不会出现烦人的弹窗了\n真妙呀\n","plink":"http://lipanpanx.com/post/2021/关闭vscode烦人的Github登陆弹窗/"},{"title":"Vue生命周期钩子","date":"2021-11-05T11:03:32.000Z","date_formatted":{"ll":"2021年11月5日","L":"2021/11/05","MM-DD":"11-05"},"updated":"2021-11-15T02:43:30.871Z","content":"Vue生命周期钩子是Vue开发者为Vue使用者预留的接口,使用这些接口我们能够在Vue生命周期的各个阶段做一些灵活的数据控制,来达到一些不可告人的目的.\n生命周期钩子的使用\n在我们创建Vue实例的时候,需要提供一个对象,这个对象包括创建Vue实例的各种Options, Vue生命周期钩子是这些Options的一部分, 他们的值都是函数,当Vue实例到达某个生命周期后,就会尝试去调用这些生命周期对应的钩子函数. 对于Vue2.x而言目前已知的钩子函数包括下面11个:\n12345678910111213141516&lt;script&gt;    let vue = new Vue(&#123;        el: &#x27;#app&#x27;,        beforeCreate() &#123; &#125;,        created() &#123; &#125;,        beforeMount() &#123; &#125;,        mounted() &#123; &#125;,        beforeUpdate() &#123; &#125;,        updated() &#123; &#125;,        activated() &#123; &#125;,        deactivated() &#123; &#125;,        beforeDestroy() &#123; &#125;,        destroyed() &#123; &#125;,        errorCaptured() &#123; &#125;,    &#125;);&lt;/script&gt;\nbeforeCreate\n\n在调用beforeCreate的时候, 仅仅表示Vue实例刚刚被创建出来, 此时此刻还没有初始化好Vue实例中的数据和方法, 所以此时此刻还不能访问Vue实例中保存的数据和方法\n\ncreated\n\n在调用created的时候, 是我们最早能够访问Vue实例中保存的数据和方法的地方\n\nbeforeMount\n\n在调用beforeMount的时候, 表示Vue已经编译好了最终模板, 但是还没有将最终的模板渲染到界面上\n\nmounted\n\n在调用mounted的时候, 表示Vue已经完成了模板的渲染, 表示我们已经可以拿到界面上渲染之后的内容了\n\nbeforeUpdate\n\n在调用beforeUpdate的时候, 表示Vue实例中保存的数据被修改了\n注意点: 只有保存的数据被修改了才会调用beforeUpdate, 否则不会调用\n注意点: 在调用beforeUpdate的时候, 数据已经更新了, 但是界面还没有更新\n\nupdated\n\n在调用updated的时候, 表示Vue实例中保存的数据被修改了, 并且界面也同步了修改的数据了\n也就是说: 数据和界面都同步更新之后就会调用updated\n\nactivated\n\nkeep-alive 缓存的组件激活时会调用activated\n\ndeactivated\n\nkeep-alive 缓存的组件停用时会调用deactivated\n\nbeforeDestroy\n\n在调用beforeDestroy的时候, 表示当前组件即将被销毁了\n注意点: 只要组件不被销毁, 那么beforeDestroy就不会调用,beforeDestroy函数是我们最后能够访问到组件数据和方法的函数\n\ndestroyed\n\n在调用destroyed的时候, 表示当前组件已经被销毁了\n注意点: 只要组件不被销毁, 那么destroyed就不会调用, 不要在这个生命周期方法中再去操作组件中数据和方法\n\nerrorCaptured\n\n捕获一个来自子孙组件的错误时会调用errorCaptured\n\n","plink":"http://lipanpanx.com/post/2021/Vue生命周期/"},{"title":"Vuex基本使用","date":"2021-11-03T18:36:59.000Z","date_formatted":{"ll":"2021年11月3日","L":"2021/11/03","MM-DD":"11-03"},"updated":"2021-11-15T02:43:30.871Z","content":"","plink":"http://lipanpanx.com/post/2021/Vuex基本使用/"},{"title":"VueRouter基本使用","date":"2021-11-03T18:35:48.000Z","date_formatted":{"ll":"2021年11月3日","L":"2021/11/03","MM-DD":"11-03"},"updated":"2021-11-15T02:43:30.871Z","content":"VueRouter基本使用\n\n导入Vue Router (VueRoute.js的导入语句要放在Vue.js导入语句的下面)\n写好需要被路由的组件 并且成功注册组件\n使用new VueRouter()创建路由对象的实例,并且在路由对象的routes选项当中添加路由规则\n将路由对象挂载到Vue实例中\n通过 &lt;router-link&gt;&lt;/router-link&gt;渲染锚点链接\n通过&lt;router-view&gt;&lt;router-view&gt;渲染匹配到的组件\n\nVueRouter实例 linkActiveClass选项\n一般组件路由\n重定向路由\n嵌套路由\n网页中多个 router-view的 命名路由\nrouter-link的默认标签是 也可以改成&lt;button&gt;\n通过router-link 传递参数\n通过链接传递参数:\n切换到第一个界面\n切换到第二个界面\n","plink":"http://lipanpanx.com/post/2021/VueRouter基本使用/"},{"title":"Vue2组件化","date":"2021-11-03T10:56:47.000Z","date_formatted":{"ll":"2021年11月3日","L":"2021/11/03","MM-DD":"11-03"},"updated":"2021-11-15T02:43:30.871Z","content":"组件化的意义\n自定义组件\n自定义一个组件方法有很多,但是背后的创建逻辑却大同小异,有三个核心要素是必须的:\n1&gt;组件构造(传递给构造器的组件模板只能有一个根元素)\n2&gt;组件注册\n3&gt;组件使用\n基于上面的三个核心要素诞生了好多创建组件的方式,下面我简单介绍一下我使用vscode snippets创建组件的过程:\n创建全局组件\n1234567891011&quot;Vue.component&quot;: &#123;    &quot;prefix&quot;: &quot;Vue.component&quot;,    &quot;body&quot;: [        &quot;Vue.component(&#x27;$&#123;1:组件名称&#125;&#x27;, &#123;&quot;,        &quot;    template:&#x27;#$&#123;1:组件模板id&#125;&#x27;, //$&#123;0:&lt;template id=&#x27;$&#123;1:组件模板id&#125;&#x27;&gt; &lt;div class=&#x27;$&#123;1:组件根元素类名&#125;&#x27;&gt; &lt;div&gt;我是组件$&#123;1:组件名称&#125;&lt;/div&gt;&lt;/div&gt; &lt;/template&gt;&#125;&quot;,        &quot;    data:function()&#123;return&#123;&#125;&#125;,&quot;,        &quot;    methods:&#123;&#125;,components:&#123;&#125;,&quot;,        &quot;&#125;);&quot;,    ],    &quot;scope&quot;: &quot;javascript&quot;,&#125;,\n全局组件注册需要用到Vue.component(id,[definition])函数,我们可以向这个函数提供 组件名称和组件对象来 注册组件\n当我们传递组件对象的时候 Vue.component()会自动帮助我们使用Vue.extend()构造组件\n上面的这段代码能够帮助用户迅速的注册一个全局组件,在用户输入组件名称之后,snippets会根据输入的名称自动生成用于构造组件的组件对象和组件模板(第5行注释就是模板),然后用户只需要剪切模板到合适的位置就行了, 注册组件和组件模板 都搞定之后  用户只需要在合适的位置使用 &lt;组件名&gt;&lt;/组件名&gt; 就能使用组件啦\n创建局部组件\n1234567891011&quot;const-component&quot;:&#123;    &quot;prefix&quot;: &quot;const-component&quot;,    &quot;body&quot;: [        &quot;const $&#123;1:组件引用名&#125;=&#123;&quot;,        &quot;    template:&#x27;#$&#123;1:组件模板id&#125;&#x27;,&quot;,        &quot;    data:function()&#123;return&#123;&#125;&#125;,&quot;,        &quot;    methods:&#123;&#125;,components:&#123;&#125;,&quot;,        &quot;&#125;; //$&#123;0:&lt;template id=&#x27;$&#123;1:组件模板id&#125;&#x27;&gt; &lt;div class=&#x27;$&#123;1:模板根元素类名&#125;&#x27;&gt; &lt;div&gt;我是组件$&#123;1:组件名称&#125;&lt;/div&gt;&lt;/div&gt; &lt;/template&gt;&#125;&quot;    ],    &quot;scope&quot;: &quot;javascript&quot;,&#125;,\n这段创建局部组件的snippets和上面的 创建全局组件的snippets基本大同小异, 只是局部组件的注册和全局组件的注册有所不同\n局部组件 需要在vue实例的 components字段当中传递组件对象的引用或者直接传递组件对象 代码如下:\n12345678910111213141516let vue = new Vue(&#123;    el: &#x27;#app&#x27;,    data: &#123;&#125;,    methods: &#123;&#125;,    computed: &#123;&#125;,    watch: &#123;&#125;,    filters: &#123;&#125;,    components: &#123;        &quot;组件名称&quot;:组件引用名        &#x27;组件名称&#x27;:&#123;            template:&#x27;#组件模板id&#x27;,            data:function()&#123;return&#123;&#125;&#125;,            methods:&#123;&#125;,props:[],components:&#123;&#125;,        &#125;,     &#125;,&#125;);\n如果直接在vue实例的components字段当中使用直接传递组件对象的方式 去注册局部组件 可以使用下面的snippets:\n1234567891011&quot;sub-component&quot;:&#123;    &quot;prefix&quot;: &quot;sub-component&quot;,    &quot;body&quot;: [        &quot;&#x27;$&#123;1:组件名称&#125;&#x27;:&#123;&quot;,        &quot;    template:&#x27;#$&#123;1:模板id&#125;&#x27;,&quot;,        &quot;    data:function()&#123;return&#123;&#125;&#125;,&quot;,        &quot;    methods:&#123;&#125;,props:[],components:&#123;&#125;,&quot;,        &quot;&#125;, //$&#123;0:&lt;template id=&#x27;$&#123;1:模板id&#125;&#x27;&gt; &lt;div class=&#x27;$&#123;1:模板根元素类名&#125;&#x27;&gt; &lt;div&gt;我是组件$&#123;1:组件名称&#125;&lt;/div&gt;&lt;/div&gt; &lt;/template&gt;&#125;&quot;    ],    &quot;scope&quot;: &quot;javascript&quot;,&#125;,\n局部组件之所以叫局部组件,那就是他的使用范围是被限定的,如果某个Vue实例注册了局部组件,那么这个局部组件就只能在这个实例中使用,全局组件则可以在多个Vue实例当中共用\n自定义组件中的data和methods\n从上方自定义组件的snippets我们也可以看出来 自定义组件时候也可以传递 data 和 methods属性\n因为在自定义组件的模板中 我们也会使用到自定义的函数 也会使用自定义的数据 所以就像Vue实例一样我们也需要这两个属性\n123456&lt;template id=&#x27;test&#x27;&gt;    &lt;div class=&#x27;test&#x27;&gt;        &lt;button @click.prevent=&#x27;clickHandler($event)&#x27;&gt;按钮&lt;/button&gt;        &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt;    &lt;/div&gt;&lt;/template&gt;\n在创建Vue实例所使用 对象 当中 data 和 methods 属性的值都是 一个对象\n自定义组件的 methods属性和 Vue实例创建时候提供的methods属性使用方式几乎相同 都是一个包含若干函数的对象\n但是 自定义组件当中的 data属性却是一个函数 这个和Vue实例创建的时候提供的data属性是完全不同的\n1234567891011Vue.component(&#x27;test&#x27;, &#123;    template: &#x27;#test&#x27;, //    data: function () &#123; return &#123;        msg:&quot;hehe&quot;,    &#125; &#125;,    methods: &#123;        clickHandler(x)&#123;            console.log(x);        &#125;    &#125;, components: &#123;&#125;,&#125;);\n为什么创建自定义组件所传递的组件对象当中的 data属性是一个函数呢,其实原因也很简单,假如我们有一个组件X, 这个组件X我们可能在网页当中使用很多次, 这就是组件的复用, 但是组件复用的前提是每个组件是不完全相同的, 即使都是组件X,每个组件应该显示不同的数据, 如何确保每个组件显示的数据是不同的呢, 这就需要 每个组件和自己的数据绑定而不是和公用的数据绑定, 所以自定义组件的data属性就是一个返回对象的函数, 这个函数会针对每个组件X返回一个对象, 这个对象会和每个组件X进行绑定, 这样以来每个组件X就会有自己独享的数据对象了.\n组件切换与动态组件\n有时候我们需要在不同的组件之间进行切换, 对于一般的组件切换我们可以使用 v-if来实现,v-if虽然也不错 但是官方提供了更加有趣的方案 那就是动态组件, 而且 通过 &lt;keep-alive&gt; 标签 我们可以实现保存组件切换前后的状态\n假设我们有两个组件 分别是 组件aaa 和组件bbb  如果想要通过动态组件实现2个组件之间的切换就比较简单\n123456&lt;div id=&#x27;app&#x27;&gt;    &lt;button @click.prevent=&#x27;clickHandler($event)&#x27;&gt;按钮&lt;/button&gt;    &lt;keep-alive&gt;        &lt;component :is=&#x27;componentx&#x27;&gt;&lt;/component&gt;    &lt;/keep-alive&gt;&lt;/div&gt;\n如上 我们为&lt;component&gt;标签的is属性绑定一个变量 componentx, 用这个变量我们久能控制需要被显示的组件是哪个组件\n然后 通过按钮的点击事件就可以去改变 变量 componentx的值 也就可以切换当前显示的组件了,而且由于&lt;component&gt;标签是被放在 &lt;keep-alive&gt;标签里面的所以组件切换前后 组件的状态能够被很好的保存, 假如组件aaa中有个checkbox是check的状态, 那么切换到组件bbb再切换回组件aaa 这个checkbox依然会保持check的状态\n父子组件\n组件和Vue实例一样都能使用components属性,也就是说每个组件都能通过components属性定义自己的局部组件,也就是每个组将都能有自己的子组件\n就像上文中的局部组件只能在相应的Vue实例当中使用一样  子组件也是只能在父组件当中使用\n如果我们定义了一个父组件father, 并且在father组件对象当中的components属性中又定义了一个组件son, 那么 &lt;son&gt;&lt;\\/son&gt; 就只能在father组件的模板当中使用\n父子组件这样的父子关系,让他们之间的数据交换比其他组件之间更加容易 更加灵活\n子组件使用父组件的数据\n子组件使用父组件中数据的2个步骤:\n1&gt; 首先在父组件的模板当中通过v-bind传递数据\n123456&lt;template id=&#x27;father&#x27;&gt;    &lt;div class=&#x27;father&#x27;&gt;        &lt;div&gt;我是组件father&lt;/div&gt;        &lt;son :xxx=&quot;age&quot; :yyy=&quot;name&quot;&gt;在父组件当中使用子组件&lt;/son&gt;    &lt;/div&gt;&lt;/template&gt;\n2&gt; 然后在子组件的组件对象当中通过props接收数据\n1234567891011121314151617components: &#123;    &#x27;father&#x27;: &#123;        template: &#x27;#father&#x27;,        data: function () &#123; return &#123;            age:28,            name:&quot;lipanpan&quot;        &#125; &#125;,        methods: &#123;&#125;, props: [],         components: &#123;            &#x27;son&#x27;: &#123;                template: &#x27;#son&#x27;,                data: function () &#123; return &#123;&#125; &#125;,                methods: &#123;&#125;, props: [&quot;xxx&quot;,&quot;yyy&quot;], components: &#123;&#125;,            &#125;,        &#125;,    &#125;,&#125;,\n子组件通过props接收到父组件的数据之后,就能在自己的模板中通过 props当中的名称使用数据了\n1234567&lt;template id=&#x27;son&#x27;&gt;    &lt;div class=&#x27;son&#x27;&gt;        &lt;div&gt;我是组件son&lt;/div&gt;        &lt;div&gt;来自父组件的数据xxx:&#123;&#123;xxx&#125;&#125;&lt;/div&gt;        &lt;div&gt;来自父组件的数据yyy:&#123;&#123;yyy&#125;&#125;&lt;/div&gt;    &lt;/div&gt;&lt;/template&gt;\n子组件使用父组件的方法\n子组件使用父组件当中方法的2个步骤:\n1&gt; 首先在父组件中通过v-on传递方法\n123456&lt;template id=&#x27;father&#x27;&gt;    &lt;div class=&#x27;father&#x27;&gt;        &lt;div&gt;我是组件father&lt;/div&gt;        &lt;son @father-func=&#x27;fatherSay&#x27;&gt;在父组件当中使用子组件&lt;/son&gt;    &lt;/div&gt;&lt;/template&gt;\n2&gt; 然后在子组件中自定义一个方法 通过$emit()触发传递过来的方法\n1234567891011121314151617181920212223components: &#123;    &#x27;father&#x27;: &#123;        template: &#x27;#father&#x27;,        data: function () &#123; return &#123;&#125; &#125;,        methods: &#123;            fatherSay()&#123;                alert(&quot;我是father组件的方法&quot;);            &#125;        &#125;, props: [],         components: &#123;            &#x27;son&#x27;: &#123;                template: &#x27;#son&#x27;,                data: function () &#123; return &#123;&#125; &#125;,                methods: &#123;                    sonFunc()&#123;                        this.$emit(&quot;father-func&quot;)                        // 传递给$emit的方法名字是一个字符串                    &#125;                &#125;, props: [], components: &#123;&#125;,            &#125;,         &#125;,    &#125;, &#125;,\n123456&lt;template id=&#x27;son&#x27;&gt;    &lt;div class=&#x27;son&#x27;&gt;        &lt;div&gt;我是组件son&lt;/div&gt;        &lt;button @click.prevent=&#x27;sonFunc($event)&#x27;&gt;按钮&lt;/button&gt;    &lt;/div&gt;&lt;/template&gt;\n子组件将数据传递给父组件\n子组件传递数据给父组件可以通过 调用父组件的方法来实现\n12345678910111213141516171819202122232425components: &#123;    &#x27;father&#x27;: &#123;        template: &#x27;#father&#x27;,        data: function () &#123; return &#123;            input_msg:undefined,        &#125; &#125;,        methods: &#123;            fatherSay(data)&#123;                console.log(&quot;我是father组件的方法&quot;);                this.input_msg=data            &#125;        &#125;, props: [],         components: &#123;            &#x27;son&#x27;: &#123;                template: &#x27;#son&#x27;,                data: function () &#123; return &#123;&#125; &#125;,                methods: &#123;                    sonFunc()&#123;                        this.$emit(&quot;father-func&quot;,Math.random())                    &#125;                &#125;, props: [], components: &#123;&#125;,            &#125;, //        &#125;,    &#125;, //&#125;,\n由上面的代码可以看到 子组件在传递数据给父组件的时候,只需要在使用vm.$emit(&quot;xxx&quot;,[...args])调用父组件的方法的时候把需要传递的数据当作参数传递过去就行了,然后在父组件的方法中接收和使用子组件当中传递过来的参数\n多级组件数据传递\n组件中的命名注意点\n组件名子的命名\n\n注册组建的时候如果组件的名字使用了驼峰命名法, 那么html中使用组件的时候需要使用短横线命名法去使用这个组件. 例如: 注册时: myFather -&gt; 使用时: &lt;my-father&gt;&lt;/my-father&gt;\n\n12345Vue.component(&#x27;myFather&#x27;, &#123;    template: &#x27;#myFather&#x27;, //    data: function () &#123; return &#123;&#125; &#125;,    methods: &#123;&#125;, components: &#123;&#125;,&#125;);\n1234567891011&lt;body&gt;    &lt;div id=&#x27;app&#x27;&gt;        &lt;!-- &lt;myFather&gt;&lt;/myFather&gt; 注册组件的时候使用驼峰命名 使用组件的时候不能使用驼峰命名 --&gt;         &lt;my-father&gt;&lt;/my-father&gt;    &lt;/div&gt;&lt;/body&gt;&lt;template id=&#x27;myFather&#x27;&gt;    &lt;div class=&#x27;myFather&#x27;&gt;        &lt;div&gt;我是组件myFather&lt;/div&gt;    &lt;/div&gt;&lt;/template&gt;\n组件传入变量命名\n\n父组件传递数据给子组件的时候, 传入的变量名如果使用短横线命名方式,子组件得到的变量会被转换称为驼峰命名方式的变量. 例如: 传递时: parent-name=“name” -&gt; 接收时: props: [“parentName”]\n\n123456789101112131415&lt;template id=&#x27;father&#x27;&gt;    &lt;div class=&#x27;father&#x27;&gt;        &lt;div&gt;我是组件father&lt;/div&gt;        &lt;!-- &lt;son :parentName=&#x27;names&#x27;&gt;&lt;/son&gt; 父组件中使用驼峰命名法传递给子组件的变量名会被全部转换成为小写--&gt;        &lt;son :parent-name=&#x27;names&#x27;&gt;&lt;/son&gt;         &lt;!-- 使用短横线命名法传递给子组件的变量名 会被转换成为驼峰命名法 --&gt;    &lt;/div&gt;&lt;/template&gt;&lt;template id=&#x27;son&#x27;&gt;    &lt;div class=&#x27;son&#x27;&gt;        &lt;div&gt;我是组件son&lt;/div&gt;        &lt;div&gt;来自父组件的数据:&#123;&#123;parentName&#125;&#125;&lt;/div&gt;    &lt;/div&gt;&lt;/template&gt;\n12345678910111213Vue.component(&#x27;father&#x27;, &#123;    template: &#x27;#father&#x27;, //    data: function () &#123; return &#123;        names:[&quot;zhangsan&quot;,&quot;lisi&quot;]    &#125; &#125;,    methods: &#123;&#125;, components: &#123;        &#x27;son&#x27;: &#123;            template: &#x27;#son&#x27;,            data: function () &#123; return &#123;&#125; &#125;,            methods: &#123;&#125;, props: [&quot;parentName&quot;], components: &#123;&#125;,        &#125;, //    &#125;,&#125;);\n组件传入的方法命名\n\n父组件将自己的方法传递给子组件的时候, 传入的方法名字如果使用驼峰命名法, 这个传入的方法名会被转换成为全部小写的形式,因为html属性是大小写不敏感的, 所以我们用v-on绑定的事件名称即使有大写字母也会全部被抓换成为小写.\n例如: 传递时: @parent-say=“say” -&gt; 触发时: this.$emit(“parent-say”);\n\n12345678910111213&lt;template id=&#x27;father&#x27;&gt;    &lt;div class=&#x27;father&#x27;&gt;        &lt;div&gt;我是组件father&lt;/div&gt;        &lt;son @fatherFunc=&#x27;say&#x27;&gt;&lt;/son&gt;    &lt;/div&gt;&lt;/template&gt;&lt;template id=&#x27;son&#x27;&gt;    &lt;div class=&#x27;son&#x27;&gt;        &lt;div&gt;我是组件son&lt;/div&gt;        &lt;button @click.prevent=&#x27;clickHandler($event)&#x27;&gt;触发器按钮&lt;/button&gt;    &lt;/div&gt;&lt;/template&gt;\n12345678910111213141516171819202122Vue.component(&#x27;father&#x27;, &#123;    template: &#x27;#father&#x27;,    data: function () &#123; return &#123;        names:[&quot;zhangsan&quot;,&quot;lisi&quot;]    &#125; &#125;,    methods: &#123;        say()&#123;            console.log(&quot;我是父组件的方法&quot;);        &#125;    &#125;,     components: &#123;        &#x27;son&#x27;: &#123;            template: &#x27;#son&#x27;,            data: function () &#123; return &#123;&#125; &#125;,            methods: &#123;                clickHandler($event)&#123;                    this.$emit(&quot;fatherfunc&quot;)                &#125;            &#125;, props: [], components: &#123;&#125;,        &#125;,    &#125;,&#125;);\n组件中的插槽是什么?\n默认情况下使用子组件时在子组件中编写的元素是不会被渲染的,如果子组件中有部分内容是使用时才确定的, 那么我们就可以使用插槽. 插槽就是在子组件中放一个&quot;坑&quot;, 以后由父组件来&quot;填&quot;\n123456&lt;template id=&#x27;father&#x27;&gt;    &lt;div class=&#x27;father&#x27;&gt;        &lt;div&gt;我是组件father&lt;/div&gt;        &lt;son&gt;如果没有插槽 这句话是不会被渲染到页面上的 只会渲染son组件模板当中的内容 &lt;/son&gt;    &lt;/div&gt;&lt;/template&gt;\n什么是匿名插槽?\n匿名插槽是子组件根元素当中的 &lt;slot&gt;可以有默认值&lt;/slot&gt;标签, 这些标签所在的位置就是预留的坑位,当我们在父组件当中使用子组件时如果往子组件的标签对当中写入了内容这些被写入的内容就会把  &lt;slot&gt;&lt;/slot&gt;标签以及其包裹的内容替换掉,如果子组件当中有多出&lt;slot&gt;&lt;/slot&gt;则替换多次\n1234567891011121314&lt;template id=&#x27;father&#x27;&gt;    &lt;div class=&#x27;father&#x27;&gt;        &lt;div&gt;我是组件father&lt;/div&gt;        &lt;son&gt;我会替换掉slot标签以及被slot标签包裹的内容&lt;/son&gt;    &lt;/div&gt;&lt;/template&gt;&lt;template id=&#x27;son&#x27;&gt;    &lt;div class=&#x27;son&#x27;&gt;        &lt;slot&gt;插槽默认内容 我在网页当中会直接被渲染成字符串&lt;/slot&gt;        &lt;div&gt;我是组件son&lt;/div&gt;        &lt;slot&gt;插槽默认内容 我在网页当中会直接被渲染成字符串&lt;/slot&gt;    &lt;/div&gt;&lt;/template&gt;\n什么是具名插槽?\n具名插槽和匿名插槽所差无几,只不过具名插槽的&lt;slot&gt;标签 有个name属性,这个属性就是插槽的名字, 在父组件中向子组件标签对中插入内容时候 可以通过slot=name属性控制插入到对应 name的插槽当中去\n12345678910111213141516171819&lt;template id=&#x27;father&#x27;&gt;    &lt;div class=&#x27;father&#x27;&gt;        &lt;div&gt;我是组件father&lt;/div&gt;        &lt;son&gt;            &lt;div slot=&quot;one&quot;&gt;往插槽名字为one的插槽中插入内容1&lt;/div&gt;            &lt;div slot=&quot;two&quot;&gt;往插槽名字为two的插槽当中插入内容&lt;/div&gt;            &lt;div slot=&quot;one&quot;&gt;往插槽名字为one的插槽中插入内容2&lt;/div&gt;            &lt;div slot=&quot;two&quot;&gt;往插槽名字为two的插槽当中插入内容&lt;/div&gt;        &lt;/son&gt;    &lt;/div&gt;&lt;/template&gt;&lt;template id=&#x27;son&#x27;&gt;    &lt;div class=&#x27;son&#x27;&gt;        &lt;slot name=&#x27;one&#x27;&gt;插槽默认内容&lt;/slot&gt;        &lt;div&gt;我是组件son&lt;/div&gt;        &lt;slot name=&#x27;two&#x27;&gt;插槽默认内容&lt;/slot&gt;    &lt;/div&gt;&lt;/template&gt;\n什么是作用域插槽?\n作用域插槽就是子组件当中的数据通过&lt;slot v-bind:'xxx'='xxx'&gt;&lt;/slot&gt; 的形式传递给父组件,然后父组件通过 &lt;template slot-scope='obj'&gt;&lt;template&gt;的形式来使用子组件当中的数据\n12345678910111213141516171819202122&lt;template id=&#x27;son&#x27;&gt;    &lt;div class=&#x27;son&#x27;&gt;        &lt;div&gt;我是组件son&lt;/div&gt;        &lt;slot :names=&quot;names&quot; :test=&quot;test&quot;&gt;插槽默认内容&lt;/slot&gt;    &lt;/div&gt;&lt;/template&gt;&lt;template id=&#x27;father&#x27;&gt;    &lt;div class=&#x27;father&#x27;&gt;        &lt;div&gt;我是组件father&lt;/div&gt;        &lt;son&gt;            &lt;template slot-scope=&quot;obj&quot;&gt;                &lt;hr&gt;                &lt;div v-for=&quot;name in obj.names&quot; :key=&quot;name.id&quot;&gt;                    &#123;&#123; name &#125;&#125;                &lt;/div&gt;                &lt;hr&gt;                &#123;&#123;obj&#125;&#125;            &lt;/template&gt;        &lt;/son&gt;    &lt;/div&gt;&lt;/template&gt;\nv-slot指令怎么使用?\nv-slot指令是 Vue2.6 之后引入的指令,v-slot指令 使得在父组件当中书写插入到子组件当中的内容时更加的方便, 我写了2个snippets来快速使用这个指令:\n12345678910111213141516&quot;slot&quot;:&#123;    &quot;prefix&quot;: &quot;slot&quot;,    &quot;body&quot;: [        &quot;&lt;slot $&#123;1:name=&#x27;$&#123;2:slot-name&#125;&#x27;&#125;$&#123;0&#125;&gt;插槽默认内容&lt;/slot&gt;&quot;    ],    &quot;scope&quot;: &quot;html&quot;,&#125;,&quot;vslot&quot;:&#123;    &quot;prefix&quot;: &quot;vslot&quot;,    &quot;body&quot;: [        &quot;&lt;template #$&#123;1:default&#125;=&#x27;obj&#x27;&gt;$&#123;0:需要被插入的内容&#125;&lt;/template&gt;&quot;    ],    &quot;scope&quot;: &quot;html&quot;,&#125;,\n首先就是创建插槽的 slot代码段,这个代码段在子组件当中使用 可以快速创建匿名插槽和具名插槽, 在写完插槽的名字之后 你就可以进行随意的数据绑定把子组件的数据传递给父组件的使用者\n然后就是vslot代码段, 这个代码段在父组件当中使用,  可以快速的创建 带v-slot(#)属性的 template标签, 这个标签对应的默认插槽是匿名插槽(#default), 这个标签同时又一个默认对象obj,这个对象能够接收 子组件的插槽通过v-bind传递过来的数据\n123456789101112131415161718&lt;template id=&#x27;father&#x27;&gt;    &lt;div class=&#x27;father&#x27;&gt;        &lt;div&gt;我是组件father&lt;/div&gt;        &lt;son&gt;            &lt;template #one=&#x27;obj&#x27;&gt;                &#123;&#123;obj&#125;&#125;                 &lt;hr&gt;            &lt;/template&gt;        &lt;/son&gt;    &lt;/div&gt;&lt;/template&gt;&lt;template id=&#x27;son&#x27;&gt;    &lt;div class=&#x27;son&#x27;&gt;        &lt;div&gt;我是组件son&lt;/div&gt;        &lt;slot name=&#x27;one&#x27; :names=&quot;names&quot; :test=&quot;test&quot;&gt;插槽默认内容&lt;/slot&gt;    &lt;/div&gt;&lt;/template&gt;\n","plink":"http://lipanpanx.com/post/2021/Vue2组件化/"},{"title":"搭建Hexo博客","date":"2021-11-01T17:22:48.000Z","date_formatted":{"ll":"2021年11月1日","L":"2021/11/01","MM-DD":"11-01"},"updated":"2021-11-15T02:43:30.871Z","content":"重新搭个博客, 这里做一下记录\n\n0x10 前情提要\n最近决定重新搞个博客,申请个域名,搞的大气一些\n之前的 xxx.gitee.com 确实有点拿不出手了\n0x20 博客方案\n搭建博客 现在有很多的方案,由于是个人博客,平常就是写一些技术文,也没有什么特殊的需求\n所以就搞成静态博客就行了,但是静态博客也有很多方案可以选择 hexo hugo vuepress 等等\n最终我还是选择了 hexo, hexo是js写的没有hugo(go语言写的)快,但是hexo相对比较成熟,主题的可选择项又多,而且我知道有比较厉害的博客是用hexo+next实现的, 比如 cuiqingcai.com, 至于主题,我选择的是一个非常小众的主题inside,我感觉不错,所以就用了,由于是小众主题我已经做好了踩坑的准备了\n0x30 着手开始搭建\n既然方案都想好了那就开始搭建\n0x31 域名购买\n这个比较简单 阿里云腾讯云都可以买,我在腾讯云上面买下了 lipanpanx.com 年费是61\n直接下单就行了,非常简单,不过如果是第一次买的话, 他会要求你进行实名认证, 你需要填写一个信息模板,然后等待审核,认证成功后才能购买,我的过往经验告诉我在腾讯云买域名要比在阿里云买更快,但是腾讯云的域名数据库貌似要比阿里云更新的慢,有些域名在阿里能搜到在腾讯搜不到\n0x32 域名解析服务\n域名解析我用的 cloudflare, 免备案,免费的全球CDN,DNS刷新速度快,域名保护,代码压缩,还有酸爽的开发者模式,还要啥自行车,闭着眼选\n0x33 代码仓库的架构\n源码仓库结构是大仓库套小仓库的形式,把博客的仓库和主题的仓库分割开来,把主题仓库放到博客的仓库里面,通过submodule 进行管理,这个嵌套的源码仓库是私有的仓库,同时还会有个公共的仓库,用来放置最后生成的静态文件:\n我解释下为啥要这么做:\n首先源码仓库进行套娃的原因是确保主题仓库的稳定性,毕竟主题不是自己维护的,所以稳定性非常的重要,万一那天我喝多了对主题瞎改一通,或者在代码有大量更新的时候不小心删除了某个非常重要的主题文件,结果在提交代码的时候正好眼瞎没看到更改, 全部提交, 后面排错真的是瞅瞎眼,或者是主题的作者对主题做了重要的更新,也能很容易的进行同步,如果你直接把主题代码纳入到你的源码仓库,而不是分而治之,那你在更新主题的时候还需要去删掉之前所有的主题文件,然后重新添加新的主题文件,那样的话主题就完全不受版本控制了,而且你自己的更改也无法保留,这非常的蛋疼, 所以源码仓库中的博客仓库和主题仓库非常两个仓库是非常有必要的\n同时还有个问题就是我使用github pages部署我的静态站点, github pages可以很方便的绑定自己的域名,但是github pages仅仅支持公共仓库,对于私有的仓库github pages不提供服务, 为了保护我的源码仓库,我把源码仓库搞成私有的,然后使用github actions在我每次提交代码的时候自动执行生成静态站点文件的指令, 然后把生成的静态站点文件自动部署到我设置好的公开仓库当中.\n有人会觉得把主题当作仓库clone到项目当中是不合理的,很多主题都提供了npm包,为啥不直接安装主题包呢,把主题仓库clone到自己的源码仓库岂不是很麻烦,确实在绝大多数情况下主题包可以很好的满足人们的需求,但是一些定制化的需求是需要去更改主题源码的,这个时候主题包就无法完成需求了.\n0x34 github绑定多域名的问题\n因为我之前做了一个静态的营销网站quenmaimai.com 这个网站使用的仓库是 lipanpan-hub.github.io 这个仓库是github pages的专用仓库, 我在这个仓库里面放了cname文件, 把quenmaimai.com 绑定到了我的github,这样一来我所有的新项目仓库 如果开通 github pages 就会被定向到 quenmaimai.com/仓库名称 这个地址, 但是我申请了新的域名 lipanpanx.com, 我希望某个特定的仓库可以和 lipanpanx.com 进行绑定,然后其他的仓库仍旧和 quenmaimai.com进行绑定, 这个操作确实有点骚气了, 我找了网上的各路大神发的帖子,一顿操作猛如虎,然后一看二百五,没一个能用的,最后通过google找到一篇国外老铁发的文章, 他遇到的问题和我相同, 给出的解决方案也很清晰,亲测完美解决我的问题, 方案如下:\n\n在你的域名服务商网站 找到你的域名设置DNS的地方 添加5条DNS解析记录\n“A Record” with host “@” and value “185.199.108.153”\n“A Record” with host “@” and value “185.199.109.153”\n“A Record” with host “@” and value “185.199.110.153”\n“A Record” with host “@” and value “185.199.111.153”\n“CNAME Record” with host “www” and value “github用户名.github.io”\n\n前四条A记录 指向 github, 最后一条cname记录指向 github pages 的专用仓库地址 github用户名.github.io\n同时在仓库的GitHub pages设置页面也要进行域名绑定  最后就能成功访问 lipanpanx.com 啦\n0x35 github actions的安全问题\ngithub actions一般是在 github的虚拟机里面执行的(也有在其他地方执行的比如容器,比如自己的主机), 可以执行的操作有非常多, 有时候为了方面我们会用到github官方的一些 actions 或者一些第三方的 actions,无论这些actions本身是否是安全的,一定要确定你使用这些actions的方式是安全的.如果阅读了github actions的官方文档就会发现 GitHub actions的文档几乎在任何地方都会提醒你要确保安全, 因为一些actions会操作仓库,所以会需要你提供 personal token给它, 但是personal token的权限实在是太大, 向我这种私有的源码仓库还好, 有些共有的源码仓库如果你直接把person token 填写到actions里面 就非常的危险, 因为这意味着任何访问到你仓库的人都能拿到你的personal token, 所以可以把把你的personal token搞成变量以变量的形式提供给actions,如下图所示:\n\n在途中3号点位处 点击 添加新的 repo secret 就能添加变量了,添加完成变量就能在actions当中访问了\n比如你添加了一个  PERSONAL_TOKEN 的变量, 那么在actions当中你就能通过 $ 去访问\n0x36 inside主题代码注入\n0x37 主题配置文件\n0x37 跪求搜索引擎收录自己的网站\n提交 sitemap的文件的前提是 首先你要有 sitemap文件\n但是如果获得 sitemap文件呢\n提交sitemap的前提是验证网站的所有权\n","thumbnail":"https://search.pstatic.net/common/?src=https://i.imgur.com/9G83pZh.jpg","plink":"http://lipanpanx.com/post/2021/搭建Hexo博客/"},{"title":"checkboxland尝鲜","date":"2021-10-30T09:59:16.000Z","date_formatted":{"ll":"2021年10月30日","L":"2021/10/30","MM-DD":"10-30"},"updated":"2021-11-15T02:43:30.871Z","content":"checkboxland显示汉字的方法\n\n0x10 checkboxland\n前两天 在 github trending 上看到一个开源项目\ncheckboxland 这个项目是用 checkbox 去组成像素点可以在网页上表达图像的这么个工具 github地址:\nhttps://github.com/bryanbraun/checkboxland\n我感觉这个小东西 真的挺有意思\n用checkbox 不仅仅可以放图片 放动画 玩贪吃蛇 甚至可以在网页上面播放视频\n所以我就抽空玩了一下 本来 想想用这个写一句话放在站点上 做滚动广告牌 类似于这样:\n\n但是一个很明显的事情 就是这个项目是一个比较新的项目,支持中文是不可能支持中文的, 但是我实在是手痒, 最后想想决定自己去做几个汉字的小字库\n由于我想要显示的内容是 李攀攀全宇宙最帅 所以我打算先做我的名字\n0x20 汉字取模\n做这种点阵的汉字字模 我还是有点经验的的\n首先 我找到了一个在线的取模工具 我是取模工具\n这个工具可以说是非常棒了, 把你需要取模的 汉字输进去 他会返回一串 16进制的数字串.\n比如我的姓氏 李, 我选择的字体是16x16的宋体, 我按照 从左到右从上到下 横向8点左高位的方式取模\n最后得到的字符串是:\n120x01,0x00,0x01,0x08,0x7F,0xFC,0x01,0x00,0x05,0x40,0x09,0x30,0x31,0x0E,0xC1,0x04,0x0F,0xE0,0x00,0x40,0x01,0x88,0x7F,0xFC,0x01,0x00,0x01,0x00,0x05,0x00,0x02,0x00\n然后再通过js 把这些16进制的数字串中的每一个数字转换成为 8位的二进制字符就行了\n123456789101112131415161718192021function binary(num, Bits) &#123;  var resArry = [];  var xresArry = [];  i = 0;  for (; num &gt; 0;) &#123;    resArry.push(num % 2);    num = parseInt(num / 2);    i++;  &#125;  for (j = i - 1; j &gt;= 0; j--)    xresArry.push(resArry[j]);  if (Bits &lt; xresArry.length) &#123;    console.log(&quot;位数小于二进制位数&quot;)  &#125;  if (Bits) &#123;    for (var r = xresArry.length; r &lt; Bits; r++) &#123;      xresArry.unshift(0);    &#125;  &#125;  return xresArry.join().replace(/,/g, &#x27;&#x27;);&#125;\n每2个8位为一组拼接成为 16x16 的二进制矩阵, 然后就能在 checkboxland 里面进行显示了\n比如 李 和 攀 的矩阵就是:\n12345678910111213141516171819202122232425262728293031323334[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0],[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0],[0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0],[1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0],[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0],[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0],[0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0],[1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0],[0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0],[0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0],[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0],[0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0],[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],[0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],[0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0],[1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0],[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],\n0x30 checkbox显示汉字\n最后我决定先把我的名字搞上去 直接把这个二进制的矩阵传给 checkboxland的实例就能显示出来了\n显示效果是这样的:\n\n不过还有个蛋疼的问题 就是 作者说checkbox的数量最好不要超过1500个 不然就会遇到性能问题\n这…\n我显示这三个汉字 就用掉了八百多个checkbox\n这玩意的最终的使用场景可能也就是显示字了, 汉字这个东西实在比较耗费盒子😂\n但是我感觉 网友还是能玩出花来的 这东西有意思\n","thumbnail":"https://search.pstatic.net/common/?src=https://i.imgur.com/nghbeyx.png","plink":"http://lipanpanx.com/post/2021/checkboxland尝鲜/"},{"title":"utools插件重载问题","date":"2021-10-27T07:47:05.000Z","date_formatted":{"ll":"2021年10月27日","L":"2021/10/27","MM-DD":"10-27"},"updated":"2021-11-15T02:43:30.871Z","content":"utools插件开发 中 plugin.json 中的配置无法生效问题\n\n0x10 需求\n最近两天打算找个不限制流量, 不限制容量的 图床, 之前 我一直用阿里云的OSS, 太鸡儿贵了\n因为我看到国外的不少图床 都是免费的 并且不限制容量不限流量, 我太心动了\n所以我打算把我国内的图床 换成国外的图床 然后在国内访问\n想法有了之后 我就开始动手折腾了,把所有的图片上传到国外的图床, 然后通过代理服务器访问就好了\n这就需要转链, 把原本图片的链接 转换成为 通过代理服务器访问的链接,所以我就需要搞个 utools工具  来帮助我方便的转链\n0x20 开搞\n这么久没有玩 utools也从1.x 升级到 2.x 了\n不过插件的开发方式还是大同小异\n开发过程挺顺利 不过中途遇到了几个坑, 我再这里记录一下\n0x21 utools加载插件的方式变了\nutools 1.x 可以直接加载插件 但是2.x 明显行不通\n2.x 如果你想要加载插件 你就需要首先下载一个 开发者工具 插件 这是一个开发utools插件的 插件, 如下图:\n\n0x22 utools插件重载\n本次插件开发当中遇到的一个最为蛋疼的问题就是插件重载的问题\nutools 识别不同插件是通过 一个plugin.json的文件\n这个文件里面可以定义  在什么时候什么条件下去唤醒 utools\n我在里面写了个通过正则表达式去匹配链接的方式去唤醒我的插件\n也就是说当我把国外的图床上图片的链接粘贴到utools的时候,utools会用我写好的正则表达式去尝试匹配这个链接,如果匹配成功  则utools 会调用我的插件 对 这个链接进行转链\n但是中途发现一个问题 就是链接 怎么都无法匹配成功\n我一度怀疑是我的正则表达式有问题导致无法成功匹配\n最后调试来调试去 发现 我无论怎么改正则表达式 就是无法匹配, 我才开始怀疑utools\n\n我已经 图中① 处的开关打开了\n按理说每次我插件UI进入隐藏状态之后 插件就会完全退出 等我再次进入插件 插件的代码都会重载\n本来我以为所有的插件代码都会自动重载\n但是 其实 实际情况并不是我想想的那样 如果你改动的是插件的逻辑代码 当你打开 图中①处的开关时候,插件确实会重载 但是如果你改动的是plugin.json 当中的内容, plugin.json 是不会被自动重载的, utools开发工具的自动重载 仅仅重载你插件的逻辑代码 不会重载你的 plugin.json文件, 这个文件 属于你的插件的配置文件\n好鸡儿蛋疼, 每次更改plugin.json 都需要 手动去重载 这个文件, 就是手动去按图中② 处的更新按钮\n0x23 js正则表达式的坑\n还有个比较坑的问题就是js的 正则表达式的坑:\n1&quot;text string&quot;.match(/exp/flags)\n我们使用 正则表达式的时候 一般会使用 不同的flag\njs 的正则表达式 也有各种flag  有  g  i m u y s 等各种flag\n但是在使用 match 函数的 时候 如果你的正则表达式使用的flag中有 g 这个flag\n则match 函数返回的匹配数据当中 不包含正则表达式匹配到的group数据\nmdn 中的原文是这样的:\n12If the g flag is used, all results matching the complete regular expression will be returned, but capturing groups will not.if the g flag is not used, only the first complete match and its related capturing groups are returned. In this case, the returned item will have additional properties as described below.\n一旦你的正则表达式使用了这个g flag,\n则match 函数返回的就不是详细的匹配数据,而仅仅是一个匹配结果,这样的话不是很方便做细致的调试\n","plink":"http://lipanpanx.com/post/2021/utools插件重载/"},{"title":"关于我","date":"2021-10-27T07:36:22.000Z","date_formatted":{"ll":"2021年10月27日","L":"2021/10/27","MM-DD":"10-27"},"updated":"2021-11-15T02:43:30.871Z","content":"","plink":"http://lipanpanx.com/about/"}]