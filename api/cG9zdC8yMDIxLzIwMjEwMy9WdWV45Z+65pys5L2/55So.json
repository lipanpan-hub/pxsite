{"title":"Vuex基本使用","date":"2021-03-04T18:36:59.000Z","date_formatted":{"ll":"2021年3月4日","L":"2021/03/04","MM-DD":"03-04"},"link":"post/2021/202103/Vuex基本使用","categories":["Vue相关"],"updated":"2022-01-16T00:35:15.352Z","content":"<h2 id=\"0x10-vue子组件之间数据传递\">0x10 Vue子组件之间数据传递<a title=\"#0x10-vue子组件之间数据传递\" href=\"#0x10-vue子组件之间数据传递\"></a></h2>\n<p>在vue当中 同一个父组件下的子组件之间进行数据传递是非常蛋疼的,子组件之间并不能够直接传递数据,想要传递数据就需要首先将一方的数据通过函数传递给父组件, 然后在父组件中再把这个数据传递给另一方,如果组件的层级比较深,这样的操作可以说是非常麻烦了.</p>\n<h2 id=\"0x20-vuex的基本使用\">0x20 Vuex的基本使用<a title=\"#0x20-vuex的基本使用\" href=\"#0x20-vuex的基本使用\"></a></h2>\n<p><a href=\"https://github.com/vuejs/vuex\" target=\"_blank\">vuex官方github仓库地址</a>    // vuex的3.x版本和4.x版本是在同一个仓库当中release的<br>\n<a href=\"https://vuex.vuejs.org/\" target=\"_blank\">vuex 3.x 英文文档地址</a><br>\n<a href=\"https://vuex.vuejs.org/zh/\" target=\"_blank\">vuex 3.x 中文文档地址</a></p>\n<p><a href=\"https://next.vuex.vuejs.org/index.html\" target=\"_blank\">vuex 4.x 英文文档地址</a><br>\n<a href=\"https://next.vuex.vuejs.org/zh/index.html\" target=\"_blank\">vuex 4.x 中文文档地址</a></p>\n<p>要想使用vuex 首先下载和引入vuex, 在官方github的release页面可以下载对应版本的vuex,下载好压缩包并解压之后,打开dist目录就能找到我们需要的vuex.js,把这个vuex.js引入到我们的项目当中就行了,不过需要注意的是 在引入vuex.js之前一定要先引入vue.js.</p>\n<p>上面我也说到了, vue的子组件之间传递数据还是非常蛋疼的,显然 vuex就是来解决这个问题的,那么如何使用vuex在子组件之间传递数据呢,其实也非常的简单:</p>\n<p>首先通过<code>new Vuex.Store(&#123;&#125;)</code>创建一个Store实例 并传递一个包含所需options的对象,这个对象中有个state字段里面包含了需要在子组件当中传递的数据,比如:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">    <span class=\"attr\">state</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">count</span>:<span class=\"number\">0</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>然后我们把实例 store 挂在到父组件当中的store字段<br>\n最后就能够在子组件当中操作count了,操作的方式也非常简单 直接通过<code>this.$store.state.count</code>就能操作这个count的值了</p>\n<p>但是这样直接操作的方式还是存在问题的,如果多个组件都去操作这个变量的时候,如果这个变量的值出现了问题你很难去判定到底是哪个组件的错误操作导致的,所以对于store.state当中的数据的公共操作可以提取出来,在创建Store实例时提供给 mutations 选项.具体代码如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">    <span class=\"attr\">state</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">count</span>:<span class=\"number\">0</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">mutations</span>: &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">add</span>(<span class=\"params\">state</span>)</span>&#123;</span><br><span class=\"line\">            state.count++;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">sub</span>(<span class=\"params\">state</span>)</span>&#123;</span><br><span class=\"line\">            state.count--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>在上述代码当中我们可以看到,在mutations当中我们低通了对count进行自增和自减的函数,我们想要在子组件中调用这个函数的时候只需要通过<code>this.$store.commit(&quot;函数名字&quot;)</code> 就行了,当然我们在调用函数的时候还可以传递参数,这个参数就是mutation的载荷(payload) <code>this.$store.commit(&quot;函数名字&quot;,payload)</code> 这个payload参数可以就是一般的参数也可以是一个对象,当然我们在mutation的对应函数里面接收这个payload就能正常使用了.</p>\n<p>除了使用<code>this.$store.commit(&quot;函数名字&quot;)</code> 的方式调用mutations当中的函数外还可以通过下面的方式调用:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.$store.commit(&#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>:<span class=\"string\">&quot;函数名字&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">xxx</span>:xxx,</span><br><span class=\"line\">&#125;),</span><br><span class=\"line\">------------------------------------------------------------------</span><br><span class=\"line\"><span class=\"comment\">//  当commit接收到是一个对象的时候,mutation中对应的函数操作保持不变</span></span><br><span class=\"line\">mutations: &#123;</span><br><span class=\"line\">  函数名字 (state, payload) &#123;</span><br><span class=\"line\">    state.count += payload.xxx</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>另外store也是支持计算属性的,这个计算属性和computed是差不多的,在创建Store实例的时候在提供的对象当中提供getters选项,这个getters选项当中的函数的返回值会被缓存起来,且只有当它的依赖值发生了改变才会被重新计算。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">    <span class=\"attr\">state</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">msg</span>:<span class=\"string\">&quot;lipanpanx.com&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">getters</span>: &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">test</span>(<span class=\"params\">state</span>)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;调用getter当中的test函数&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> state.msg+<span class=\"string\">&quot;真不错&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>在getters当中提供了计算属性之后,访问这个属性也非常的简单,首先将store绑定到组件是必须的,然后在组件当中使用<code>this.$store.getters.test</code> 就能访问你的计算属性了</p>\n<p>当然如果你也可以让getters中的函数返回另外一个方法,这样以来就方便传参, 但是你返回的这另一个方法会被缓存起来, 方法毕竟不是一个固定的值,所以这个方法每次都会被重新调用来获取结果:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">    <span class=\"attr\">state</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">msg</span>: <span class=\"string\">&quot;lipanpanx.com&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">xlist</span>: [<span class=\"string\">&quot;x&quot;</span>,<span class=\"string\">&quot;xx&quot;</span>,<span class=\"string\">&quot;xxx&quot;</span>,<span class=\"string\">&quot;xxxx&quot;</span>],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">getters</span>: &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">test</span>(<span class=\"params\">state</span>)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;调用getter当中的test函数&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> state.msg + <span class=\"string\">&quot;真不错&quot;</span>;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">testf</span>(<span class=\"params\">state</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">id</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;这个方法每次都会被重新调用&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> state.xlist[id]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n","prev":{"title":"Vue生命周期钩子","link":"post/2021/202103/Vue生命周期"},"next":{"title":"Vue2组件化","link":"post/2021/202103/Vue2组件化"},"plink":"http://blog.lipanpanx.com/post/2021/202103/Vuex基本使用/","toc":[{"id":"0x10-vue子组件之间数据传递","title":"0x10 Vue子组件之间数据传递","index":"1"},{"id":"0x20-vuex的基本使用","title":"0x20 Vuex的基本使用","index":"2"}],"reward":true,"copyright":{"author":"李攀攀","link":"<a href=\"http://blog.lipanpanx.com/post/2021/202103/Vuex基本使用/\" title=\"Vuex基本使用\">http://blog.lipanpanx.com/post/2021/202103/Vuex基本使用/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"},"reading_time":"1225 字约 8 分钟"}