{"title":"Javascript IIFE(Immediately Invoked Function Expression)","date":"2020-10-20T15:38:35.000Z","date_formatted":{"ll":"2020年10月20日","L":"2020/10/20","MM-DD":"10-20"},"link":"post/2020/202010/Javascript-IIFE","categories":["JS相关"],"updated":"2022-04-11T03:41:31.970Z","content":"<p><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/IIFE\" target=\"_blank\">IIFE</a></p>\n<p>JS 里面有个非常有趣的概念 IIFE(Immediately Invoked Function Expression) 这个东西直译过来就是立即调用函数表达式 也被称作 自执行匿名函数(Self-Executing Anonymous Function )</p>\n<p>他的语法格式如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  statements;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"comment\">// function 无名字同时外部括号不能省略</span></span><br></pre></td></tr></table></figure>\n<p>这玩意 和 Python中立即执行的意境神似:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>*<span class=\"built_in\">range</span>(<span class=\"number\">4</span>),</span><br><span class=\"line\"><span class=\"comment\"># (0,1,2,3)</span></span><br></pre></td></tr></table></figure>\n<p>下面讲下 IIFE 的三个应用场景:</p>\n<p>1, 避免污染全局名称空间</p>\n<p>因为我们的应用程序可以包含来自不同源文件的许多函数和全局变量，所以限制全局变量的数量非常重要。如果我们有一些不需要再次使用的初始化代码，我们可以使用 IIFE 模式。因为我们不会再次重用代码，所以在这种情况下使用 IIFE 比使用函数声明或函数表达式要好。</p>\n<p>2, 设计模式当中会用到 IIFE,比如模块模式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> makeWithdraw = <span class=\"function\"><span class=\"params\">balance</span> =&gt;</span> (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">copyBalance</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> balance = copyBalance; <span class=\"comment\">// This variable is private</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> doBadThings = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;I will do bad things with your money&quot;</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  doBadThings();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">withdraw</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">amount</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (balance &gt;= amount) &#123;</span><br><span class=\"line\">        balance -= amount;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> balance;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Insufficient money&quot;</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)(balance);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> firstAccount = makeWithdraw(<span class=\"number\">100</span>); </span><br><span class=\"line\"><span class=\"comment\">// &quot;I will do bad things with your money&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(firstAccount.balance); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(firstAccount.withdraw(<span class=\"number\">20</span>)); <span class=\"comment\">// 80</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(firstAccount.withdraw(<span class=\"number\">30</span>)); <span class=\"comment\">// 50</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(firstAccount.doBadThings); </span><br><span class=\"line\"><span class=\"comment\">// undefined; this method is private</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> secondAccount = makeWithdraw(<span class=\"number\">20</span>); </span><br><span class=\"line\"><span class=\"comment\">// &quot;I will do bad things with your money&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(secondAccount.withdraw(<span class=\"number\">30</span>)); <span class=\"comment\">// &quot;Insufficient money&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(secondAccount.withdraw(<span class=\"number\">20</span>));  <span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure>\n<p>3, 在不支持 es6 语法的 for 循环中使用 IIFE</p>\n<p>在 ES6 中引入 let 和 const 语句以及块作用域之前，我们可以在一些旧代码中看到下面对 IIFE 的使用。假设我们想要创建两个按钮分别是 Button 0 和 Button 1 被点击的时候我们希望执行alert并分别输出0和1, 下面的代码是无法达到我们的目的的, 因为var定义的变量<code>i</code>位于全局作用域,所以最后我们执行alert的时候输出的总是2:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> button = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&quot;button&quot;</span>);</span><br><span class=\"line\">  button.innerText = <span class=\"string\">&quot;Button &quot;</span> + i;</span><br><span class=\"line\">  button.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(i);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(button);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<p>因为在ES6之前不支持let, 而var语句仅支持在全局作用域和函数作用域内定义变量,所以针对上述问题我们可以使用IIFE来解决, 此时 onclick的值不再是一个简单的函数,而是一个立即执行匿名函数, 这个函数返回另外一个函数,被返回的函数在自己的函数作用域内部存储了立即执行匿名函数传递给它的i值, 确保了触发按钮点击事件的时候alert打印的值是正确的.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> button = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&quot;button&quot;</span>);</span><br><span class=\"line\">  button.innerText = <span class=\"string\">&quot;Button &quot;</span> + i;</span><br><span class=\"line\">  button.onclick = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">copyOfI</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      alert(copyOfI);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;)(i);</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(button);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<p>当然如果使用ES6语法我们可以轻松解决上述问题:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> button = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&quot;button&quot;</span>);</span><br><span class=\"line\">  button.innerText = <span class=\"string\">&quot;Button &quot;</span> + i;</span><br><span class=\"line\">  button.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(i);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(button);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// Uncaught ReferenceError: i is not defined.</span></span><br></pre></td></tr></table></figure>\n","prev":{"title":"JS的for...in和for...of","link":"post/2020/202010/JS的for-in和for-of"},"next":{"title":"JS function default parameters and rest parameters","link":"post/2020/202010/JS-function-default-parameters-and-rest-parameters"},"plink":"http://blog.lipanpanx.com/post/2020/202010/Javascript-IIFE/","reward":true,"copyright":{"author":"李攀攀","link":"<a href=\"http://blog.lipanpanx.com/post/2020/202010/Javascript-IIFE/\" title=\"Javascript IIFE(Immediately Invoked Function Expression)\">http://blog.lipanpanx.com/post/2020/202010/Javascript-IIFE/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"},"reading_time":"829 字约 6 分钟"}