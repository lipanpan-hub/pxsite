{"title":"Hexo+Inside+Github+(NetlifyCMS+Vercel+Cloudflare)构建全球可高速访问的静态站点","date":"2021-11-16T07:27:20.000Z","date_formatted":{"ll":"2021年11月16日","L":"2021/11/16","MM-DD":"11-16"},"thumbnail":"https://search.pstatic.net/common/?src=https://i.imgur.com/USr2l3A.jpg","link":"post/2021/202111/为博客添加内容管理系统","categories":["其他"],"updated":"2021-11-29T23:59:02.099Z","content":"<h2 id=\"0x10-前情提要\">0x10 前情提要<a title=\"#0x10-前情提要\" href=\"#0x10-前情提要\"></a></h2>\n<p>我的博客一直以来都是静态的站点,静态的站点优点还是很多的,很多地方提供免费的托管服务,访问速度快,搜索引擎友好,等等. 但是有优点就有缺点,静态站点的缺点也很明显,无法承载过于复杂的功能,就个人博客而言,如果做成动态网站有管理后台的那种的话就可以随时随地写文章更新文章了,想对文章进行更改校对,任何一个有网的地方登陆后台就可以操作其实还是很爽的,所以我决定给我的静态站点添加一个后台管理系统就是netlifyCMS,这个netlifyCMS是netlify公司的产品, 这个东西可以让你方便的在线 管理 书写 发布你的文章,我尝试了一下效果还是不错的.</p>\n<p><img src=\"https://search.pstatic.net/common/?src=https://i.imgur.com/nSJwqhi.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"0x20-在netlify中部署使用netlifycms\">0x20 在netlify中部署使用netlifyCMS<a title=\"#0x20-在netlify中部署使用netlifycms\" href=\"#0x20-在netlify中部署使用netlifycms\"></a></h2>\n<h3 id=\"0x21-静态站点部署到netlify\">0x21 静态站点部署到netlify<a title=\"#0x21-静态站点部署到netlify\" href=\"#0x21-静态站点部署到netlify\"></a></h3>\n<p>因为 netlifyCMS是netlify公司的展品, 刚开始我不知道我还以为要想使用netlifyCMS就必须把站点放到netlify上面去才行,于是就开始折腾netlify,其实把站点放到netlify上还是比较简单的,我这里简单的讲一下:</p>\n<ol>\n<li>首先注册netlify账号 因为它可以使用第三方账号进行注册,我的项目都在githu上我就选择了直接用github账号进行注册</li>\n<li>然后就是选择git仓库创建网站,这里也很简单 按照它的提示一步步来就醒了 总共三步<br>\n<img src=\"https://search.pstatic.net/common/?src=https://i.imgur.com/zqzMPur.png\" alt=\"\" loading=\"lazy\"><br>\n最后一步这里 你可以选择git仓库的分支, 可以设置安装依赖和运行构建命令的目录, 以及最后保存静态文件部署静态站点的文件夹,当然 这里也可以 设置环境变量 设置serverless 函数的文件夹 不过我们用不着 这两个也就不用管它了.</li>\n</ol>\n<blockquote>\n<p>这里有个非常蛋疼的点 就是这里可以选择一个目录 作为你安装依赖和运行构建命令的目录,但是如果我的项目当中 包含了一个子项目 需要多处安装依赖,然后需要多处运行构建命令呢? 我不知道针对套娃项目 如何在netlify中部署 至少我暂时没有看到设置的地方. 这一点我觉得vercel就做到很好,在vercel当中你可以自己去设置安装依赖和构建项目的命令,这样的话对于需要多处安装依赖的项目你直接可以把命令写在packge.json的scripts当中 然后提交给vercel一个运行script的命令就行了 比如你的script设置成为<code>&quot;vercel_install&quot;: &quot;npm install &amp;&amp; cd themes/inside &amp;&amp; npm install&quot;</code>,然后把 <code>npm run vercel_install</code> 提交给vercel就行了.</p>\n</blockquote>\n<ol start=\"3\">\n<li>最后选择 <code>deploy site</code>,就能把你的网站部署到netlify上面了,是不是很简单</li>\n</ol>\n<h3 id=\"0x22-netlify当中使用netlifycms\">0x22 netlify当中使用netlifyCMS<a title=\"#0x22-netlify当中使用netlifycms\" href=\"#0x22-netlify当中使用netlifycms\"></a></h3>\n<p>1, 首先进入到你的站点 然后点击 <code>site setting</code>进入到你的网站的设置页面,就可以看到一条长长的网站设置菜单<br>\n<img src=\"https://search.pstatic.net/common/?src=https://i.imgur.com/NnGGuTC.png\" alt=\"\" loading=\"lazy\"><br>\n<img src=\"https://search.pstatic.net/common/?src=https://i.imgur.com/CVirQ5w.png\" alt=\"网站设置菜单\" loading=\"lazy\"></p>\n<p>2, 我们看到网站的设置页面有很多的选项可以设置,我们首先打开身份验证服务,选择<code>identity</code>然后点击<code>enable identity</code>即可<br>\n<img src=\"https://search.pstatic.net/common/?src=https://i.imgur.com/jKzVzyd.png\" alt=\"\" loading=\"lazy\"><br>\n开通身份验证服务之后 identity菜单会增加很多的可配置项, 在registration当中我们可以配置为仅仅我们邀请的注册用户才能访问netlifyCMS,在Services当中我们可以配置打开Git Gateway服务,这样一来netlifyCMS就有权读写我们的仓库了.<br>\n<img src=\"https://search.pstatic.net/common/?src=https://i.imgur.com/18Wqeya.png\" alt=\"\" loading=\"lazy\"></p>\n<p>3, 既然后端的验证服务有了我们就需要前端的身份验证页面,前端的验证页面也很简单<br>\n对于hexo框架而言 首先在项目根目录的 <code>/source</code>文件夹下面创建admin文件夹 然后里面放上两个文件<code>index.html</code> 和 <code>config.yml</code>,其中index.html是前端验证页面的入口,config.yml是 netlifyCMS的配置文件,netlifyCMS可以根据这个配置文件来确定以怎样的方式去读取和操作你的文章<br>\n我们直接在index.html 中添加下面的代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Content Manager<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://identity.netlify.com/v1/netlify-identity-widget.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Include the script that builds the page and powers Netlify CMS --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://unpkg.com/netlify-cms@^2.0.0/dist/netlify-cms.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这段代码就是加载两个js文件,一个用来渲染CMS的页面一个用来进行身份验证<br>\n因为我们最终需要 通过 <code>lipanpanx.com/admin/</code> 去访问到CMS, 所以admin文件夹最终会被放到hexo所生成的网站的根目录当中,为了避免hexo对admin文件夹进行过多的操作,我们在hexo的配置文件的 <code>skip_render</code>字段当中添加<code>- admin/**</code>,确保hexo不对admin文件夹当中的内容进行渲染.</p>\n<p>4, 当我们完成前端验证页面入口的添加之后, 把站点部署到 netlify上面然后我们访问自己的站点后面加上/admin/也就是 <code>xxx.com/admin/</code>,就能通过netlify账户进行登陆了,但是这个netlify用户必须是自己邀请的用户(刚才在identity-&gt;registration哪里设置了仅邀请的用户才可以登陆),邀请用户其实也是非常简单的,只需要找到网站实例设置下的 identity页面 点击<code>invite users</code>按钮输入邮箱地址就行了.<br>\n<img src=\"https://search.pstatic.net/common/?src=https://i.imgur.com/UMcdrGe.png\" alt=\"\" loading=\"lazy\"></p>\n<p>5, 登陆账户之后就能看到后台管理的页面了,但是目前的后台管理系统空空如也,需要合理的设置<code>/source/admin/config.yml</code>文件,才能够让自己的后台管理系统正常的工作:<br>\n我在 netlifyCMS的官方文档当中找到了 <a href=\"https://cms-demo.netlify.com/#/collections/posts\" target=\"_blank\">官方的demo</a> 和 <a href=\"https://github.com/netlify/netlify-cms/blob/master/dev-test/config.yml\" target=\"_blank\">官方demo的配置文件</a>,这两个东西对于想要自己写配置文件的同学是非常重要的参考. 想要进一步学习如何配置netlifyCMS的同学可以看看下面的内容:</p>\n<p>关于 netlifyCMS的配置文件<code>/source/admin/config.yml</code>中各个配置项应该如何配置, 官方文档中的 <code>configuring your site</code> 章节进行了详细的讲解,这一章节又分为两个小节,其中 <a href=\"https://www.netlifycms.org/docs/configuration-options/\" target=\"_blank\"><code>configuration options</code></a>小节中包含了所有我们常用的配置, <a href=\"https://www.netlifycms.org/docs/beta-features/\" target=\"_blank\"><code>beta features</code></a>小节的大部分功能一般用不到,但是也有一小部分是非常有用的. 我这里主要讲解一下 <code>configuring your site</code>小节当中的内容:</p>\n<p>config.yml 文件当中有12个根配置项,这12个根配置项目当中又有3个配置项是必须要有的,分别是: <code>backend</code> <code>media_folder</code> <code>collections</code>, config.yml文件当中至少要包含这三个配置,其他的配置项是可有可无的,这里我先给出一个配置的example,然后再结合代码注释讲解一下这几个配置的作用:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">backend:</span> <span class=\"comment\"># 这个backend实际上就是个中间商它允许你的netlifyCMS和提供内容存储服务的第三方进行通信 这里按照netlifyCMS的文档要求设置即可 如果使用自定义的backend 按照backend要求配置即可</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">git-gateway</span> <span class=\"comment\"># netlifyCMS的一个开源项目 允许你在netlifyCMS当中操作git仓库, 默认使用 netlify identity服务进行合法用户的认证</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">master</span> <span class=\"comment\"># 指定被操作的git仓库的分支 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># local_backend: true  #解除这个注释运行npx netlify-cms-proxy-server 然后再运行hexo s 就能本地调试netlifyCMS </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">media_folder:</span> <span class=\"string\">&#x27;source/images&#x27;</span>  <span class=\"comment\"># netlifyCMS提供了上传文件的功能,可以把本地的文件上传到网站的根目录当中这个选项可以控制上传文件的路径</span></span><br><span class=\"line\"><span class=\"comment\"># public_folder: &#x27;/images&#x27;  # 这里控制 网页中引用上传资源时候的路径</span></span><br><span class=\"line\"><span class=\"comment\"># publish_mode: editorial_workflow  # 这里控制是否使用netlifyCMS 提供的工作流</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">collections:</span>  <span class=\"comment\"># collections下面可以有多个collection 每个collection都必须有一个name 且这个name不能够重复</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">&quot;posts&quot;</span>  <span class=\"comment\"># 必须存在的字段,名字任意 不能重复,这个name并不会显示在netlifyCMS的UI当中</span></span><br><span class=\"line\">    <span class=\"attr\">label:</span> <span class=\"string\">&quot;2021&quot;</span>  <span class=\"comment\"># 在 netlifyCMS当中collection 显示的名字 </span></span><br><span class=\"line\">    <span class=\"attr\">folder:</span> <span class=\"string\">&quot;source/_posts/2021&quot;</span> <span class=\"comment\"># 你的文章所存储的路径 </span></span><br><span class=\"line\">    <span class=\"attr\">sortable_fields:</span> [<span class=\"string\">&#x27;date&#x27;</span>]  <span class=\"comment\"># 控制那些字段用来给文章排序</span></span><br><span class=\"line\">    <span class=\"attr\">create:</span> <span class=\"literal\">true</span>  <span class=\"comment\"># 是否允许在netlifyCMS中创建新的文章</span></span><br><span class=\"line\">    <span class=\"attr\">editor:</span></span><br><span class=\"line\">      <span class=\"attr\">preview:</span> <span class=\"literal\">true</span> <span class=\"comment\"># 在netlifyCMS中写文章和时候是否允许打开预览窗口 </span></span><br><span class=\"line\">    <span class=\"attr\">fields:</span> <span class=\"comment\"># 每篇文章头部的 front-matter 都可以设置与其相对应的widget,在netlifyCMS就可以使用widget设置文章头部的front-matter</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> &#123;<span class=\"attr\">label:</span> <span class=\"string\">&quot;Title&quot;</span>, <span class=\"attr\">name:</span> <span class=\"string\">&quot;title&quot;</span>, <span class=\"attr\">widget:</span> <span class=\"string\">&quot;string&quot;</span>&#125;</span><br><span class=\"line\">      <span class=\"bullet\">-</span> &#123;<span class=\"attr\">label:</span> <span class=\"string\">&quot;Publish Date&quot;</span>, <span class=\"attr\">name:</span> <span class=\"string\">&quot;date&quot;</span>, <span class=\"attr\">widget:</span> <span class=\"string\">&quot;datetime&quot;</span>, <span class=\"attr\">format:</span> <span class=\"string\">&quot;YYYY-MM-DD HH:mm:ss&quot;</span>, <span class=\"attr\">dateFormat:</span> <span class=\"string\">&quot;YYYY-MM-DD&quot;</span>, <span class=\"attr\">timeFormat:</span> <span class=\"string\">&quot;HH:mm:ss&quot;</span>, <span class=\"attr\">required:</span> <span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">      <span class=\"bullet\">-</span> &#123;<span class=\"attr\">label:</span> <span class=\"string\">&quot;Updeted Date&quot;</span>, <span class=\"attr\">name:</span> <span class=\"string\">&quot;updated&quot;</span>, <span class=\"attr\">widget:</span> <span class=\"string\">&quot;datetime&quot;</span>, <span class=\"attr\">format:</span> <span class=\"string\">&quot;YYYY-MM-DD HH:mm:ss&quot;</span>, <span class=\"attr\">required:</span> <span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">      <span class=\"bullet\">-</span> &#123;<span class=\"attr\">label:</span> <span class=\"string\">&quot;Tags&quot;</span>, <span class=\"attr\">name:</span> <span class=\"string\">&quot;tags&quot;</span>, <span class=\"attr\">widget:</span> <span class=\"string\">&quot;list&quot;</span>, <span class=\"attr\">required:</span> <span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">      <span class=\"bullet\">-</span> &#123;<span class=\"attr\">label:</span> <span class=\"string\">&quot;Categories&quot;</span>, <span class=\"attr\">name:</span> <span class=\"string\">&quot;categories&quot;</span>, <span class=\"attr\">widget:</span> <span class=\"string\">&quot;list&quot;</span>, <span class=\"attr\">required:</span> <span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">      <span class=\"bullet\">-</span> &#123;<span class=\"attr\">label:</span> <span class=\"string\">&quot;Body&quot;</span>, <span class=\"attr\">name:</span> <span class=\"string\">&quot;body&quot;</span>, <span class=\"attr\">widget:</span> <span class=\"string\">&quot;markdown&quot;</span>, <span class=\"attr\">required:</span> <span class=\"literal\">false</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>其实 collections 又分为 <code>folder collections</code> 和 <code>file collections</code> 这两者的区别在官方文档的<a href=\"https://www.netlifycms.org/docs/collection-types/\" target=\"_blank\">collections types</a>进行了详细的说明,我这里就不在赘述, 因为我需要在一个collection中管理多篇格式相同的文章所以我使用folder collections,关于collection下面的各种widget的应该如何配置 查看官方文档可以得到更加详细的信息.</p>\n<p>这些内容全部做完之后,只要我们更新代码然后提交到github,就能触发netlify去构建我们的项目生成网站的静态文件并进行部署,我们通过netlify提供的临时域名就能够访问我们的站点了, 然后我们通过在域名后面添加 /admin/ 就能够访问netlifyCMS了,在netlifyCMS当中可以随意的添加删除文章.会自动同步到github仓库,如果此时我们还想要在本地写文章的话,在本地写之前可以先和remote仓库进行同步,把remote仓库中的内容拉下来之后可以继续写不会和netlifyCMS有所冲突. 这样看起来一切都挺好的,这篇文章已经可以结束了, 但是经过我的试用我发现把博客放在 netlify的速度奇慢无比, 甚至不如我之前放在 github pages 用cloudflare cdn 加速来的快, 加载一个网页需要 3-4秒钟, 这谁受得了啊, 于是我就开始在网上进行了一番搜索, 终于我找到了一篇神奇的文章, 文章的作者也是苦于netlify的速度非常的慢最后通过把博客部署在vercel上面加快了博客的访问速度,还给出了访问速度的对比结果:<a href=\"https://opnir.cn/2020/11/netlify-vs-vercel-for-static-websites-speed.html\" target=\"_blank\">点击此处查看</a>. 但是我是需要使用netlifyCMS的呀, 如果单纯的把博客部署在vercel上面对我来说并没有任何的意义, 所以我搜了一下结果发现 netlifyCMS还真的能够在 vercel上面使用,真的是太棒了 这样依赖既能够使用netlifyCMS又能增加博客的访问速度 何乐而不为呢.</p>\n<h2 id=\"0x30-在vercel上面部署和使用netlifycms\">0x30 在Vercel上面部署和使用netlifyCMS<a title=\"#0x30-在vercel上面部署和使用netlifycms\" href=\"#0x30-在vercel上面部署和使用netlifycms\"></a></h2>\n<h3 id=\"0x31-netlifycms是如何运作的?\">0x31 netlifyCMS是如何运作的?<a title=\"#0x31-netlifycms是如何运作的?\" href=\"#0x31-netlifycms是如何运作的?\"></a></h3>\n<p>要想在vercel上面使用netlifyCMS,就要搞清楚这东西是如何运作的,之前我们也提到了在我们访问<code>xxx.com/admin/</code>的时候 <code>/source/admin/index.html</code>会被加载,这个hmtl文件中的内容 就是引入两个JS文件,一个负责页面的渲染,一个负责用户认证, 所以netlifyCMS的最核心的功能其实就是这两个, 页面渲染靠前端的JS能够完成,而用户认证一般情况下需要靠后端配合来完成,那么netlifyCMS是如何在无后端的情况下实现的呢? 其实netlifyCMS之所以能够完成用户认证其实是使用了第三方的认证服务,一般情况下我们可以使用serverless函数和第三方的认证服务进行对接,对于serverless函数的指定是在 <code>/source/admin/config.yml</code>文件当中<code>backend</code>字段进行配置的,其实netlifyCMS的<a href=\"https://www.netlifycms.org/docs/backends-overview/\" target=\"_blank\">文档</a>中也说的非常清楚了:<code>A backend is JavaScript code that allows Netlify CMS to communicate with a service that stores content - typically a Git host</code>,当我们在netlify中使用netlifyCMS的时候, 经过合适的配置之后netlify中的serverless函数会在用户请求登陆的时候加载然后和netlify的用户认证服务进行通信判断用户的合法性, 所以在vercel中使用netlifyCMS我们也可以使用serverless函数去 和第三方的认证服务去通信(比如github的oauth)进行用户合法性的认证. 那么接下来的问题就是 如何实现这些serverless函数并且在vercel当中进行调用呢,这其实是一个头疼的问题,不过好在我们有万能的github.</p>\n<p>其实netlifyCMS是一个开源的东西: <a href=\"https://github.com/netlify/netlify-cms\" target=\"_blank\">github仓库地址</a>,对于如何实现自己的的backend,虽然在netlifyCMS的官方文档中没有进行说明,不过在这个开源仓库当中的package文件夹当中 还是给出了大量可供参考的代码的,不过只读代码还是有点苦涩的.还好在国外有大佬已经实现了可以在vercel上部署的使用GitHub oauth 认证服务的demo了: <a href=\"https://github.com/ublabs/netlify-cms-oauth\" target=\"_blank\">仓库地址</a>, 简直太令人感动了.</p>\n<h3 id=\"0x32-在vercel中部署使用netlifycms\">0x32 在Vercel中部署使用netlifyCMS<a title=\"#0x32-在vercel中部署使用netlifycms\" href=\"#0x32-在vercel中部署使用netlifycms\"></a></h3>\n<p>把国外大佬的仓库clone到本地,对于还没有创建hexo项目的用户可以直接在这里仓库里面创建hexo项目,直接用就完了<br>\n对于已经创建hexo项目的用户只需要 把demo当中的 /api 和 /lib 两个文件夹和 vercel.json 拷贝到字节的hexo项目的根目录,然后找到package.json文件当中的3个依赖合并到自己hexo项目的package.json文件当中去就行了.</p>\n<p>完成上面的操作之后 再去配置 <code>/source/admin/config.yml</code>文件当中的<code>backend</code>字段:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">backend:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">github</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">lipanpan-hub/xsite</span>      <span class=\"comment\"># github仓库地址</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">master</span>                <span class=\"comment\"># 选择仓库分支</span></span><br><span class=\"line\">  <span class=\"attr\">base_url:</span> <span class=\"string\">https://xsite-sage.vercel.app/</span>  <span class=\"comment\"># 这个可以先留空等到vercel部署完成之后得到链接 再填写</span></span><br><span class=\"line\"><span class=\"comment\"># config.yml 文件的其他配置 照旧填写 </span></span><br></pre></td></tr></table></figure>\n<p>然后把你的项目部署到vercel上面 得到临时域名 把这个域名填写到backend-&gt;base_url处<br>\n然后 打开 github的 <a href=\"https://github.com/settings/developers\" target=\"_blank\">develop setting</a> 点击 <code>oauth apps</code> 再点击 <code>new oauth app</code> 进入下面的页面:<br>\n<img src=\"https://search.pstatic.net/common/?src=https://i.imgur.com/YjqnKWN.png\" alt=\"\" loading=\"lazy\"></p>\n<p>这张表单有三个必填项: 第一个application name 随便填写, 第二个hompage URL填写为刚到得到的 vercel临时域名,第三个authorization callback URL填写为刚才的临时域名后面再添加/callback:<code>vercel临时域名/callback</code> 然后点击<code>register application</code>成功注册程序之后,拿到<code>clinet ID</code> 和 <code>client secret</code>, 其中client secret 需要你点击 <code>generate a new clinet secret</code> 按钮去生成.</p>\n<p>拿到 <code>client ID</code> 和 <code>client secret</code> 之后 进入vercel 你的网站项目 然后再项目主页点击 <code>settings-&gt;enviroment variables</code> 添加两个环境变量 分别是:<code>OAUTH_GITHUB_CLIENT_ID</code> 和 <code>OAUTH_GITHUB_CLIENT_SECRET</code>, 这两个环境变量的值就是刚才得到的<code>client ID</code> 和 <code>client secret</code>.</p>\n<p>然后在vercel上重新部署你的网站项目就可以了.重新部署完成之后打开vercel提供的临时域名你就可以访问自己的站点了,同时在这个域名后面加入/admin/ 你就能访问文章管理后台页面了 这个页面使用github进行登陆认证.</p>\n<p>然而有些同学会在这里遇到一个奇怪的问题,就是访问/admin/页面的时候会得到一个错误的提示:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Error</span> loading the CMS configuration</span><br><span class=\"line\">Config Errors:</span><br><span class=\"line\"><span class=\"built_in\">Error</span>: Failed to load config.yml (<span class=\"number\">404</span>)</span><br><span class=\"line\">Check your config.yml file.</span><br></pre></td></tr></table></figure>\n<p>下面我说一下我的解决方法:</p>\n<is-cipher placeholder=\"\">U2FsdGVkX187LOAy6h5/Qxzfujc8d0U23eAjUuEad6vFg6VYYPF7BYYB/muy8es68obv5T0PFgnvDNHYl3SLf73FEQ0iYndJPN3SB8oHm8CeVDQt9P3MaPGnP64GDR/4uMPefEpDya9Ye88d3WlNbUWV9nm8ARHug4PIEK+j+5RqlaF4qWxf32T3Q66mZ8cpE7f2hFAnbA7ptZkt3j3jvo9CbyxEB0WRqEiI39OUmkDiY47JW/Qo9+yuclo1LW8I2Dph+nIAHY7nLIkNa+JuhvcSCNwoyIaal/6B/QmZJMbQuDHeJDaE5PZqzPPuQR0BekLBnoM/tisEeBlaW6WHYky78WvpXIS4Gk5uI2zaNiyl8oIKO5rd6lV4a6uNAgUSwziWgCKhdNWANcBVWTvAT85tpMrlNhrcDf/of7YgmDxEdMOfuAL9CfGTVzCoUyZ5SEjMp/d5YAS7pAvhou4rLcC4Lu9yPkdvlx4QjSI8ZYGbvUOC30hC0GFS6KjxhqFm7ZBIdTjTFwJBmcwJt3uqs4iMfVQX+K4/FDY2ct9VCW5G7gJUdZgBbC2UdktV1xF3VgT70l+4PNqC8o24U2xd9Lun+WaHxLlwRv5ZM2abisIS6sLYf3ZPZ0sZ/blTtlvVoD+WqtYMT802qceXYPJ+1PA7ElvZxEXaFSWlf8KCXoPLewYc9IA124MZjuovVyyuLxPSd/AqwLTXtRjFgyEaHXlsrjceU/laiA01dycnWrBgo+ariIUBzttLJkPrJPM4W27vnvD3kXEzHyVooS0qsUuO0vypH/EhtZo123FcGgBur+rVTSDYJHt8NtObbYf7wa8RoQINfzySLpnvnEr0UTkQWGGfYpUG0Smv6n8sKj2M2QemiGeYbpaIR+5FUGxPKpFZXtR2Zt9kt8hsKQmF2V432ELJ5gh/s6aMRORrMi1jUwpWHCjOWbV8WZH14WIoQOyA9tffvrT9ISIOPi66JtjV+Lm3JM6Rpi7ikOMu5UlkbsC6DxC88vaRvYXroW48xuX4FkGZD7qqrSJ4hFNs1GnIffB1H4wX1dVMuu51HUccbzuiTRMCln3UIIYxG1iFtPDK5sPRnxAR+Qr7Q9+37tYBFtY1UPOoom8uHqJ59bKEtsgxxmjFbB3JK+5eNGZCZiCf7yyH6MJWg6hTbgexDhWkqNgKF4z7XENlDF3cAchJtlKeA1kyRPlKA1g/lrounbOnjPvi57P41fuI7Ks8tFP7mAg48jq18TZFiflxuFpaeSmGllouoiNGU7jMcb8Iqhjy2mnjmBOQ789QHUDlOcPSFP4dApd0rYeGOVTMu9dBuj/PFVeYxOb/V+07TuYekR1qbbwNMFl8mqIeQSWYafzQ+mBWuOgmYHHo5t16Sn0=</is-cipher><h2 id=\"自定义域名\">自定义域名<a title=\"#自定义域名\" href=\"#自定义域名\"></a></h2>\n<p>当我们的 在vercel上成功的部署项目之后,访问速度确实加快了,而且新添加的netlifyCMS也确实挺好用,但是访问的时候使用的是vercel的临时域名,这个域名非常的长太难记忆了而且都是乱码组成的根本拿不出手啊, 所以绑定一个专业的域名还是非常有必要的, 对于刚申请的域名直接把nameserver设置为vercel的nameserver然后绑定就能用了,但是我并不想要这么干,我只想把自己的域名放在cloudflare上面进行管理,然后配合vercel使用,原因有下面几个:</p>\n<ul class=\"φbr\" class=\"φbr\" class=\"φbr\" class=\"φbr\">\n<li><input type=\"checkbox\" disabled=\"\" checked=\"\"><i></i>首先我所有的域名都是放在cloudflare上面进行管理的 我不想要搞的东一个西一个很乱</li>\n<li><input type=\"checkbox\" disabled=\"\" checked=\"\"><i></i>然后更改nameserver需要时间 我不想等</li>\n<li><input type=\"checkbox\" disabled=\"\" checked=\"\"><i></i>之前vercel出现过在大陆访问不了的情况,对于这种情况如果以后再出现,就可以通过cloudflare代理访问,站点仍然可以正常部署在vercel</li>\n<li><input type=\"checkbox\" disabled=\"\" checked=\"\"><i></i>cloudflare 提供的各种网站安全 网站加速的功能 想用随时可以用</li>\n</ul>\n<p>打开 <a href=\"https://vercel.com/docs\" target=\"_blank\">vercel docs</a> 在顶部导航栏的 support 中我们可以找到一篇文章<a href=\"https://vercel.com/support/articles/using-cloudflare-with-vercel\" target=\"_blank\">How do I use a Cloudflare domain with Vercel?</a> 这篇文章详细的介绍了如何将 cloudfalre和 vercel配合使用进行自定义域名.</p>\n<p>由于目前国内访问vercel的速度还是比较快的,所以我这里就讲一下不使用cloudflare代理的情况下如何为vercel项目绑定自定义域名:<br>\n<img src=\"https://search.pstatic.net/common/?src=https://i.imgur.com/KPZwzEi.png\" alt=\"\" loading=\"lazy\"></p>\n<p>在上图当中我在project settings 当中为项目绑定了两个地址 <code>lipanpanx.com</code> 和 <code>blog.lipanpanx.com</code> 要想要这两个地址生效,只需要在 cloudflare的dns设置当中 添加2条cname记录指向<code>cname.vercel-dns.com</code>,并且proxy status 设置为 <code>dns only </code>如下图所示:<br>\n<img src=\"https://search.pstatic.net/common/?src=https://i.imgur.com/ZMtyqOC.png\" alt=\"\" loading=\"lazy\"></p>\n<p>操作完cloudflare之后 回到vercel项目的project setting-&gt;domains 点击 <code>add</code>按钮 添加 <code>lipanpanx.com</code> 和 <code>blog.lipanpanx.com</code>就行了.</p>\n","next":{"title":"netlify-cli安装E404错误(找不到依赖项)解决","link":"post/2021/202111/netlify-cli安装教程"},"plink":"http://blog.lipanpanx.com/post/2021/202111/为博客添加内容管理系统/","toc":[{"id":"0x10-前情提要","title":"0x10 前情提要","index":"1"},{"id":"0x20-在netlify中部署使用netlifycms","title":"0x20 在netlify中部署使用netlifyCMS","index":"2","children":[{"id":"0x21-静态站点部署到netlify","title":"0x21 静态站点部署到netlify","index":"2.1"},{"id":"0x22-netlify当中使用netlifycms","title":"0x22 netlify当中使用netlifyCMS","index":"2.2"}]},{"id":"0x30-在vercel上面部署和使用netlifycms","title":"0x30 在Vercel上面部署和使用netlifyCMS","index":"3","children":[{"id":"0x31-netlifycms是如何运作的?","title":"0x31 netlifyCMS是如何运作的?","index":"3.1"},{"id":"0x32-在vercel中部署使用netlifycms","title":"0x32 在Vercel中部署使用netlifyCMS","index":"3.2"}]},{"id":"自定义域名","title":"自定义域名","index":"4"}],"reward":true,"copyright":{"author":"李攀攀","link":"<a href=\"http://blog.lipanpanx.com/post/2021/202111/为博客添加内容管理系统/\" title=\"Hexo+Inside+Github+(NetlifyCMS+Vercel+Cloudflare)构建全球可高速访问的静态站点\">http://blog.lipanpanx.com/post/2021/202111/为博客添加内容管理系统/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"},"reading_time":"4901 字约 33 分钟"}