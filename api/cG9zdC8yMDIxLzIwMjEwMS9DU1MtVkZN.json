{"title":"CSS visual formatting model","date":"2021-01-06T16:50:02.000Z","date_formatted":{"ll":"2021年1月6日","L":"2021/01/06","MM-DD":"01-06"},"link":"post/2021/202101/CSS-VFM","updated":"2021-12-07T03:56:32.891Z","content":"<p>今天打算讲一下 CSS 的 VFM FC BFC IFC GFC FFC 这些东西,其实在这些东西是属于CSS的VFM的,我也是参考CSS WG的CSS2.2草稿当中的第9章VFM来写文章的,基本上相当于一个口语化翻译,如果不翻译看起来还是挺累的.</p>\n<p>首先我们进入到W3C CSS WG 在2020年12月22号发表的最新的工作日志<a href=\"https://www.w3.org/TR/2020/NOTE-css-2020-20201222/\" target=\"_blank\">CSS Snapshot 2020</a>,然后找到 <a href=\"https://drafts.csswg.org/css2/#visual-formatting-model\" target=\"_blank\">visual formatting model</a>,VFM这个东西在CSS WG 发布的最新的CSS level2 草稿的第9章, 内容还挺多的, 主要讲解了下面几个东西:</p>\n<ol>\n<li>VFM的介绍</li>\n<li>box 生成控制</li>\n<li>位置 schemes</li>\n<li>normal flow</li>\n<li>floats</li>\n<li>绝对定位</li>\n<li>display postion 和 float之间的关系</li>\n<li>normal flow 和 floats 和 绝对定位对比</li>\n<li>分层显示</li>\n<li>文本方向</li>\n</ol>\n<h2 id=\"introduction-to--visual-formatting-model\">introduction to  visual formatting model<a title=\"#introduction-to--visual-formatting-model\" href=\"#introduction-to--visual-formatting-model\"></a></h2>\n<p>文档树当中的每个元素会在VFM中生成0个或者多个box, 这些box的位置由下面几个东西决定:</p>\n<ol>\n<li>box dimensions and type.</li>\n<li>positioning scheme (normal flow, float, and absolute positioning).</li>\n<li>relationships between elements in the document tree.</li>\n<li>external information (e.g., viewport size, intrinsic dimensions of images, etc.)</li>\n</ol>\n<p>在CSS 2中，许多盒子的位置和大小都是根据一个叫做包含块的矩形盒子的边缘来计算的。<br>\n一般来说，生成的盒子充当包含后代盒子的块;我们说一个盒子为它的后代“建立”包含块<br>\n短语“一个盒子的包含块”意思是“盒子所在的包含块”，而不是它生成的那个。</p>\n<h2 id=\"controlling-box-generation\">controlling box generation<a title=\"#controlling-box-generation\" href=\"#controlling-box-generation\"></a></h2>\n<p>box的类型 会影响 box在VFM当中的行为,用display属性可以控制 box 的类型.<br>\n下面描述了可以被CSS2生成的 box 类型:</p>\n<ol>\n<li>block boxes</li>\n<li>anonymous block boxes</li>\n<li>inline boxes</li>\n<li>anonymous inline boxes</li>\n<li>run-in boxes</li>\n</ol>\n<hr>\n<p>通过display属性可以控制一个元素是否是block level element,<br>\n一个block level element会生成 一个 principal block level box(包含子代盒子和生成的内容)<br>\nblock level box 是块级格式上下文(BFC)的参与者.</p>\n<p>一般情况下 block level box 也是一个 block container box(除了table box和 replaced element).<br>\nblock container box 要么只包含 block level box 要么只包含inline level box(建立在IFC中)</p>\n<p>但是并不是所有的 block container box 都是block level box: non-replaced inline blocks and non-replaced table cells都是 block container 但是他们不是 block-level box.</p>\n<p>对于那些 同时是block container 的 block level box我们称之为  block box.<br>\n因为大多数的 block level box都是 block container 因此大多数的block level box可以被称为 block box.</p>\n<p>block level box 和 block container box和 block box 我们可以统称为 block.</p>\n<p>匿名block box 例子:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">DIV</span>&gt;</span></span><br><span class=\"line\">  Some text</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">P</span>&gt;</span>More text</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">DIV</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这段代码当中假设 DIV和P的display属性都是block,<br>\nDIV当中同时出现了 inline content(Some text) 和 block content(More text),<br>\n但是DIV是一个 block container box, 如果一个 block container box当中存在一个box level box, VFM就会强制让内部的所有元素变成 block level box, 因为P是block level box 所以 <code>Some text</code> 会被套上一个 匿名的block box 来确保DIV内部所有的box都是block level box.</p>\n<p>当一个 inline box 包含一个 in-flow block level box, 这个inline box 将会被 block level box打破, 这个 inline box 将会被分成2个box, 分别在 block level box的两边. 被打断之前的部分和被打断之后的部分被封装在匿名 block box内. block level box 变成了 这些匿名 block box的兄弟盒子.<br>\n如果这个 inline box 受到相对定位的影响 任何结果的转变也会反映到 inline box所包含的block level box上面.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">HTML</span> <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">HEAD</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">TITLE</span>&gt;</span>Anonymous text interrupted by a block<span class=\"tag\">&lt;/<span class=\"name\">TITLE</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">STYLE</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">p</span>    &#123; <span class=\"attribute\">display</span>: inline &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">span</span> &#123; <span class=\"attribute\">display</span>: block &#125;</span></span><br><span class=\"line\"><span class=\"css\">  </span><span class=\"tag\">&lt;/<span class=\"name\">STYLE</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">HEAD</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">BODY</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">P</span>&gt;</span></span><br><span class=\"line\">  This is anonymous text before the SPAN.</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">SPAN</span>&gt;</span>This is the content of SPAN.<span class=\"tag\">&lt;/<span class=\"name\">SPAN</span>&gt;</span></span><br><span class=\"line\">  This is anonymous text after the SPAN.</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">P</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">BODY</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上面的内容我们可以看到 P元素包含了 一个匿名文本(C1)然后跟着一个block level element 然后再跟着一段匿名文本(C2), 这块内容的渲染结果就是 首先是BODY这个 block box,这个box包含了一个匿名block box(这个box包含C1),然后跟着SPAN这个block box,然后是另外一个匿名block box(这个box包含着C2).</p>\n<p>匿名box的属性可以继承来自封闭的非匿名盒子,<br>\n对于非继承的属性可以有一个初始值,<br>\n比如 匿名box的字体继承自父盒子 但是它的margin是一个初始值0.</p>\n<p>在导致生成 匿名 block box的 element上设置的属性 让然可以被引用到这个 element的box和内容上面.<br>\n如果你为上面的P元素设置边框, 那么这个边框 围绕着 C1和C2绘制(半开形式).</p>\n<hr>\n<p>通过display属性可以控制一个元素是否是 inline level element<br>\ninline level element 生成 inline level box , inline level box 是内联格式上下文(IFC)的参与者</p>\n<p>并不是所有的inline level box 都是 inline box<br>\n对于那些不是inline box的 inline level box可以称之为 atomic inline level box,<br>\n因为 他们 会 作为一个单独的不透明的盒子 参与到IFC当中去.</p>\n<p>任何直接包含 在一个 block container element(而不是被包含在inline element)的文本 必须被当作匿名的 inline element对待.</p>\n<p>看下面这个例子:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  Some </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span>emphasized<span class=\"tag\">&lt;/<span class=\"name\">em</span>&gt;</span> </span><br><span class=\"line\">  text</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这个例子当中P生成了一个包含 inline box的 block box.<br>\n毫无疑问 EM是 inline element 它生成了 inline box,<br>\n但是 “Some” 和 “text” 是被 block level element§所生成的匿名inline box包裹<br>\n之所以被叫做匿名 inline box 因为他们没有一个相关联的 inline level element</p>\n<p>一些匿名 inline box 从他们的 block parent box继承了一些允许被继承的属性<br>\n那些不允许被继承的属性 可以有一个初始值<br>\n在上面的例子当中 匿名 inline box的 color继承自P 但是他们的背景确实透明的.</p>\n<p>随后根据<code>White-space</code>属性被折叠的空白内容不会生成任何匿名的inline box。</p>\n<h2 id=\"postioning-schemes\">postioning schemes<a title=\"#postioning-schemes\" href=\"#postioning-schemes\"></a></h2>\n<p>在 CSS2当中一个 box 可以有三种布局方案:</p>\n<ol>\n<li>normal flow</li>\n<li>floats</li>\n<li>absolute positioning</li>\n</ol>\n","prev":{"title":"CSS box-shadow样式生成器","link":"post/2021/202101/BoxShadow样式生成器"},"next":{"title":"CSS实现各种奇形怪状","link":"post/2021/202101/CSS实现各种奇形怪状"},"plink":"http://blog.lipanpanx.com/post/2021/202101/CSS-VFM/","toc":[{"id":"introduction-to--visual-formatting-model","title":"introduction to  visual formatting model","index":"1"},{"id":"controlling-box-generation","title":"controlling box generation","index":"2"},{"id":"postioning-schemes","title":"postioning schemes","index":"3"}],"reward":true,"copyright":{"author":"李攀攀","link":"<a href=\"http://blog.lipanpanx.com/post/2021/202101/CSS-VFM/\" title=\"CSS visual formatting model\">http://blog.lipanpanx.com/post/2021/202101/CSS-VFM/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"},"reading_time":"1600 字约 11 分钟"}