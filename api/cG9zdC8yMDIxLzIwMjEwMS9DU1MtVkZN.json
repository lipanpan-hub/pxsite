{"title":"CSS visual formatting model","date":"2021-01-06T16:50:02.000Z","date_formatted":{"ll":"2021年1月6日","L":"2021/01/06","MM-DD":"01-06"},"link":"post/2021/202101/CSS-VFM","categories":["CSS相关"],"updated":"2021-12-16T11:24:50.089Z","content":"<p>今天准备抽时间仔细学习下CSS 的VFM 感觉这个东西还是非常重要的,CSS 的FC BFC IFC GFC FFC都和VFM有非常大的关系,所以我打算翻译一下 W3C CSS WG发布的<a href=\"https://www.w3.org/TR/2011/REC-CSS2-20110607/\" target=\"_blank\">Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification(REC-&gt;REC)</a>中的第9章的内容<a href=\"https://www.w3.org/TR/2011/REC-CSS2-20110607/visuren.html#q9.0\" target=\"_blank\">9 Visual formatting model</a> 喜欢最新内容的朋友可以看看 CSS WG关于 CSS Level2(CSS 2.2)的最新草稿<a href=\"https://drafts.csswg.org/css2/\" target=\"_blank\">Latest editor’s draft</a>, 或者看看CSS WG最新一年度的工作日志<a href=\"https://www.w3.org/TR/2020/NOTE-css-2020-20201222/\" target=\"_blank\">CSS Snapshot 2020</a>,下面就是我关于第9章的一些简单翻译:</p>\n<h2 id=\"introduction-to--visual-formatting-model(9.1)\">introduction to  visual formatting model(9.1)<a title=\"#introduction-to--visual-formatting-model(9.1)\" href=\"#introduction-to--visual-formatting-model(9.1)\"></a></h2>\n<p>文档树当中的每个元素会在VFM中生成0个或者多个box, 这些box的位置由下面几个东西决定:</p>\n<ol>\n<li>box dimensions and type.</li>\n<li>positioning scheme (normal flow, float, and absolute positioning).</li>\n<li>relationships between elements in the document tree.</li>\n<li>external information (e.g., viewport size, intrinsic dimensions of images, etc.)</li>\n</ol>\n<p>在CSS 2中，许多盒子的位置和大小都是根据一个叫被做 containing block 的矩形盒子的边缘来计算的。<br>\n一般来说，生成的盒子充当包含后代盒子的块;我们说一个box 为它的后代建立了 containing block.<br>\n“ a box’s containing block ” 意思是 “盒子所在的包含块”，而不是它生成的那个.</p>\n<h2 id=\"controlling-box-generation(9.2)\">controlling box generation(9.2)<a title=\"#controlling-box-generation(9.2)\" href=\"#controlling-box-generation(9.2)\"></a></h2>\n<p>box的类型 会影响 box在VFM当中的行为,用display属性可以控制 box 的类型.<br>\n下面描述了可以被CSS2生成的 box 类型:</p>\n<ol>\n<li>block boxes</li>\n<li>anonymous block boxes</li>\n<li>inline boxes</li>\n<li>anonymous inline boxes</li>\n<li>run-in boxes</li>\n</ol>\n<hr>\n<p>通过display属性可以控制一个元素是否是block level element,<br>\n一个block level element会生成 一个 principal block level box(包含子代盒子和生成的内容)<br>\nblock level box 是块级格式上下文(BFC)的参与者.</p>\n<p>一般情况下 block level box 也是一个 block container box(除了table box和 replaced element).<br>\nblock container box 要么只包含 block level box 要么只包含inline level box(建立在IFC中)</p>\n<p>但是并不是所有的 block container box 都是block level box: non-replaced inline blocks and non-replaced table cells都是 block container 但是他们不是 block-level box.</p>\n<p>对于那些 同时是block container 的 block level box我们称之为  block box.<br>\n因为大多数的 block level box都是 block container 因此大多数的block level box可以被称为 block box.</p>\n<p>block level box 和 block container box和 block box 我们可以统称为 block.</p>\n<p>匿名block box 例子:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">DIV</span>&gt;</span></span><br><span class=\"line\">  Some text</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">P</span>&gt;</span>More text</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">DIV</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这段代码当中假设 DIV和P的display属性都是block,<br>\nDIV当中同时出现了 inline content(Some text) 和 block content(More text),<br>\n但是DIV是一个 block container box, 如果一个 block container box当中存在一个box level box, VFM就会强制让内部的所有元素变成 block level box, 因为P是block level box 所以 <code>Some text</code> 会被套上一个 匿名的block box 来确保DIV内部所有的box都是block level box.</p>\n<p>当一个 inline box 包含一个 in-flow block level box, 这个inline box 将会被 block level box打破, 这个 inline box 将会被分成2个box, 分别在 block level box的两边. 被打断之前的部分和被打断之后的部分被封装在匿名 block box内. block level box 变成了 这些匿名 block box的兄弟盒子.<br>\n如果这个 inline box 受到相对定位的影响 任何结果的转变也会反映到 inline box所包含的block level box上面.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">HTML</span> <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">HEAD</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">TITLE</span>&gt;</span>Anonymous text interrupted by a block<span class=\"tag\">&lt;/<span class=\"name\">TITLE</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">STYLE</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">p</span>    &#123; <span class=\"attribute\">display</span>: inline &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">span</span> &#123; <span class=\"attribute\">display</span>: block &#125;</span></span><br><span class=\"line\"><span class=\"css\">  </span><span class=\"tag\">&lt;/<span class=\"name\">STYLE</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">HEAD</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">BODY</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">P</span>&gt;</span></span><br><span class=\"line\">  This is anonymous text before the SPAN.</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">SPAN</span>&gt;</span>This is the content of SPAN.<span class=\"tag\">&lt;/<span class=\"name\">SPAN</span>&gt;</span></span><br><span class=\"line\">  This is anonymous text after the SPAN.</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">P</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">BODY</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上面的内容我们可以看到 P元素包含了 一个匿名文本(C1)然后跟着一个block level element 然后再跟着一段匿名文本(C2), 这块内容的渲染结果就是 首先是BODY这个 block box,这个box包含了一个匿名block box(这个box包含C1),然后跟着SPAN这个block box,然后是另外一个匿名block box(这个box包含着C2).</p>\n<p>匿名box的属性可以继承来自封闭的非匿名盒子,<br>\n对于非继承的属性可以有一个初始值,<br>\n比如 匿名box的字体继承自父盒子 但是它的margin是一个初始值0.</p>\n<p>在导致生成 匿名 block box的 element上设置的属性 让然可以被引用到这个 element的box和内容上面.<br>\n如果你为上面的P元素设置边框, 那么这个边框 围绕着 C1和C2绘制(半开形式).</p>\n<hr>\n<p>通过display属性可以控制一个元素是否是 inline level element<br>\ninline level element 生成 inline level box , inline level box 是内联格式上下文(IFC)的参与者</p>\n<p>并不是所有的inline level box 都是 inline box<br>\n对于那些不是inline box的 inline level box可以称之为 atomic inline level box,<br>\n因为 他们 会 作为一个单独的不透明的盒子 参与到IFC当中去.</p>\n<p>任何直接包含 在一个 block container element(而不是被包含在inline element)的文本 必须被当作匿名的 inline element对待.</p>\n<p>看下面这个例子:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  Some </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span>emphasized<span class=\"tag\">&lt;/<span class=\"name\">em</span>&gt;</span> </span><br><span class=\"line\">  text</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这个例子当中P生成了一个包含 inline box的 block box.<br>\n毫无疑问 EM是 inline element 它生成了 inline box,<br>\n但是 “Some” 和 “text” 是被 block level element§所生成的匿名inline box包裹<br>\n之所以被叫做匿名 inline box 因为他们没有一个相关联的 inline level element</p>\n<p>一些匿名 inline box 从他们的 block parent box继承了一些允许被继承的属性<br>\n那些不允许被继承的属性 可以有一个初始值<br>\n在上面的例子当中 匿名 inline box的 color继承自P 但是他们的背景确实透明的.</p>\n<p>随后根据<code>White-space</code>属性被折叠的空白内容不会生成任何匿名的inline box。</p>\n<h2 id=\"postioning-schemes(9.3)\">postioning schemes(9.3)<a title=\"#postioning-schemes(9.3)\" href=\"#postioning-schemes(9.3)\"></a></h2>\n<p>在 CSS2当中一个 box 可以有三种定位方案:</p>\n<ol>\n<li>normal flow</li>\n<li>floats</li>\n<li>absolute positioning</li>\n</ol>\n<p>在CSS2当中normal flow 包括BFC(block formatting context) 和 IFC(inline formatting context)还有 block level box和 inline level box之间的 relative positioning.</p>\n<p>在float模型当中,首先按照 normal flow 放置box,然后再从flow中取出box尽可能的向左右两边放置, content(一般指父盒子当中的内容)会沿着float box的一边流动.</p>\n<p>在绝对定位模型当中, 会把box从normal flow当中彻底的删除(和其他的兄弟box之间再没有任何的关系和影响), 然后会赋予一个位置,这个位置是相对于 这个box的 containing block的.</p>\n<p>out of flow:  如果一个元素使用了 浮动,绝对定位,或者它是根元素 则这个元素被称为 out of flow<br>\nin flow: 如果一个元素不是 out of flow 那么就是 in flow<br>\nflow of an element A: 这是一个集合 这个集合包含A和A下面的所有子代元素</p>\n<p>CSS中通过 position 和 float 这两个属性控制 使用什么样的位置算法去计算box的位置.</p>\n<h2 id=\"normal-flow(9.4)\">normal flow(9.4)<a title=\"#normal-flow(9.4)\" href=\"#normal-flow(9.4)\"></a></h2>\n<p>normal flow 当中的 box 是属于FC(formatting context)的, 一个box可以属于BFC 也可以属于IFC 但是不能同时属于BFC和IFC,  block level box 会参与BFC,而inline level box 会参与IFC.</p>\n<h3 id=\"bfc(block-formatting-context)\">BFC(block formatting context)<a title=\"#bfc(block-formatting-context)\" href=\"#bfc(block-formatting-context)\"></a></h3>\n<p>什么情况下会创建BFC?</p>\n<ol>\n<li>对于浮动,绝对定位的元素,</li>\n<li>对于那些不是block box的block containers(比如:inline-blocks, table-cells, and table-captions),</li>\n<li>对于那些虽然是block box但是 他的overflow 属性却不是 visible的box(除非这个值已经传播到viewport).</li>\n</ol>\n<blockquote>\n<p>对于上面这几种情况,VFM会创建一个BFC 去包裹他们的内容.</p>\n</blockquote>\n<p>BFC内部的布局规则:</p>\n<ol>\n<li>BFC内部的Box会 从containing block 的顶部开始 在垂直方向一个接一个地放置.</li>\n<li>在BFC当中 两个兄弟Box在垂直方向的距离由margin决定, 属于同一个BFC的两个相邻Box的margin会发生重叠.</li>\n<li>在BFC当中 每个box的左边缘 会触碰到 containg block的左边缘(对于从右向左的formatting是右边缘),即使这个box使用了浮动, 除非这个box构建了一个新的BFC(这种情况下box可能会因为浮动而变的更窄)</li>\n</ol>\n<blockquote>\n<p>关于BFC,其实MDN上有一篇更加详细的文章:<a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context\" target=\"_blank\">Block formatting context</a> 这篇文章中同时讲到 GFC(grid formatting context) 和 FFC(flex formatting context) 他们和 BFC很相似 ,只是flex/grid container 内部不允许出现浮动的子元素. 但是外部的浮动用来抑制margin重叠依然能够正常工作.</p>\n</blockquote>\n<blockquote>\n<p>关于GFC更详细的内容参考W3C相关标准:<a href=\"https://www.w3.org/TR/css-grid-2/#grid-formatting-context\" target=\"_blank\">CSS Grid Layout Module Level 2(CRD-&gt;CR)</a><br>\n官运FFC更详细的内容同样参W3C的相关标准:<a href=\"https://www.w3.org/TR/css-flexbox-1/\" target=\"_blank\">CSS Flexible Box Layout Module Level 1(CR-&gt;PR)</a>,不过FFC内容不多标准当中也没详细讲 三言两语就带过了😂</p>\n</blockquote>\n<h3 id=\"ifc(inline-formatting-context)\">IFC(inline formatting context)<a title=\"#ifc(inline-formatting-context)\" href=\"#ifc(inline-formatting-context)\"></a></h3>\n<p>IFC内部的布局规则:</p>\n<ol>\n<li>在IFC当中 box从 containing block的顶部开始一个接着一个水平的排列</li>\n<li>box之间 水平方向上的 margins borders 和 padding 得到保留</li>\n<li>这些box 能够以各种不同的方式 进行垂直对齐: 他们的顶部或者底部能够被对齐, 或者根据他们当中的文本的 baseline 进行对齐</li>\n</ol>\n<blockquote>\n<p>包含这些box 的 长方形区域 在水平方向上形成了 一条line 我们称为  line box.<br>\nline box的宽度 是根据 containing blcok 和是否存在浮动所决定的. 高度 是根据第10.8章中的<a href=\"https://www.w3.org/TR/2011/REC-CSS2-20110607/visudet.html#line-height\" target=\"_blank\">行高计算规则</a>进行计算得出的.</p>\n</blockquote>\n<blockquote>\n<p>line box 的高度总是能够容纳它所包含的所有box, 然而，它可能比它所包含的最高的box还要高(for example,boxes are aligned so that baselines line up).假设存在一个box B, 当 box B的高度小于包含它的line box 的高度时，line box 中B的垂直对齐方式由vertical-align属性决定. 当几个inline level box无法水平地容纳在单个line box 中时，它们被分布在两个或多个垂直堆叠的line box 中。因此，paragraph 是line box的垂直堆栈。line box 没有垂直分隔(除非在其他地方指定)，并且它们从不重叠。</p>\n</blockquote>\n<blockquote>\n<p>一般来说，line box 的左边缘接触其containing block的左边缘，而右边缘接触其containing block的右边缘。然而,浮动的box 可能位于containing block边缘和 line box 边缘之间。因此，尽管在同一个IFC中的inline box 通常具有相同的宽度(一般就是 containing box的宽度)，但如果由于浮动而减少可用的水平空间，它们的宽度可能会变化。同一IFC中的line box 通常在高度上有所不同(例如，某一行可能包含一个很高图像，而其他的行可能只包含文本)。</p>\n</blockquote>\n<blockquote>\n<p>当一行之中的inline box 的总宽度小于包含它们的line box的宽度时，它们在line box 中的水平分布由 text-align 属性决定。如果 text-align的值是 justify, 则浏览器可能 会 拉伸 inline box内部的 spaces 和 words.(inline-table 和 inline-block box 除外)</p>\n</blockquote>\n<blockquote>\n<p>当一个inline box 超过 line box 的宽度时，它会被分成几个box ，这些box分布在几个line box当中。如果一个内联框不能拆分(eg:如果inline box 包含单个字符，或者特定语言的单词打破规则禁止在内联框内被分开，或者对于内联框受到nowrap或pre空白值的影响的情况),inline box 会溢出 line box.</p>\n</blockquote>\n<blockquote>\n<p>当一个inline box 被拆分时，margins borders and padding 在拆分时不会渲染出来.<br>\n由于 bidirectional text processing ，inline box 也可能在同一个line box 内被分割成好几个 box。</p>\n</blockquote>\n<p>看看下面这个例子:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">P</span>&gt;</span></span><br><span class=\"line\">  Several </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">EM</span>&gt;</span>emphasized words<span class=\"tag\">&lt;/<span class=\"name\">EM</span>&gt;</span> </span><br><span class=\"line\">  appear</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">STRONG</span>&gt;</span>in this<span class=\"tag\">&lt;/<span class=\"name\">STRONG</span>&gt;</span> </span><br><span class=\"line\">  sentence, dear.</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">P</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在这个例子当中 P元素生成了一个 block box 包含了5个 inline box, 其中三个是匿名的:</p>\n<ol>\n<li>Anonymous: “Several”</li>\n<li>EM: “emphasized words”</li>\n<li>Anonymous: “appear”</li>\n<li>STRONG: “in this”</li>\n<li>Anonymous: “sentence, dear.”</li>\n</ol>\n<p>为了格式化段落，浏览器将这五个方框转换为行方框。<br>\n在本例中，为P元素生成的box 为line box 建立了containing block 。如果包含块足够宽，所有的inline box 将适合一个line box:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Several emphasized words appear <span class=\"keyword\">in</span> <span class=\"built_in\">this</span> sentence, dear.</span><br></pre></td></tr></table></figure>\n<p>如果不是，inline box 将被分割并分布在几个line box 中。前一段可分为以下几段:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Several emphasized words appear</span><br><span class=\"line\"><span class=\"keyword\">in</span> <span class=\"built_in\">this</span> sentence, dear.</span><br></pre></td></tr></table></figure>\n<p>或者下面这样:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Several emphasized</span><br><span class=\"line\">words appear <span class=\"keyword\">in</span> <span class=\"built_in\">this</span></span><br><span class=\"line\">sentence, dear.</span><br></pre></td></tr></table></figure>\n<p>在这里 如果我们故意把viewport设置的比较窄, 则可以让原有的EM box 被分成两个EM box(称它们为“split1”和“split2”)。<br>\n虽然 EM box由一个变成2个, 但是如果我们对EM设置了margins, borders, padding, or text decorations,这些属性的效果是不会在split1之后或split2之前展现出来的, 2个分分开的盒子看起来仍然还像是同一个整体. 通过下面这个例子可以更加详细的展示出来:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">HTML</span> <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">HTML</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">HEAD</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TITLE</span>&gt;</span>Example of inline flow on several lines<span class=\"tag\">&lt;/<span class=\"name\">TITLE</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">STYLE</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">EM</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">padding</span>: <span class=\"number\">2px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">margin</span>: <span class=\"number\">1em</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border-width</span>: medium;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">border-style</span>: dashed;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">line-height</span>: <span class=\"number\">2.4em</span>;</span></span><br><span class=\"line\"><span class=\"css\">      &#125;</span></span><br><span class=\"line\"><span class=\"css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">STYLE</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">HEAD</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">BODY</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">P</span>&gt;</span>Several <span class=\"tag\">&lt;<span class=\"name\">EM</span>&gt;</span>emphasized words<span class=\"tag\">&lt;/<span class=\"name\">EM</span>&gt;</span> appear here.<span class=\"tag\">&lt;/<span class=\"name\">P</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">BODY</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">HTML</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在P的宽度有限的情况下 效果如下 EM将会被分割称为2个box:<br>\n<img src=\"https://search.pstatic.net/common/?src=https://i.imgur.com/k94DTE6.png\" alt=\"\" loading=\"lazy\"></p>\n<blockquote>\n<p>The margin is inserted before “emphasized” and after “words”.<br>\nThe padding is inserted before, above, and below “emphasized” and after, above, and below “words”.<br>\nA dashed border is rendered on three sides in each case.</p>\n</blockquote>\n<h2 id=\"floats(9.5)\">floats(9.5)<a title=\"#floats(9.5)\" href=\"#floats(9.5)\"></a></h2>\n<p>这一章有空再翻译</p>\n<h2 id=\"absolute-positioning(9.6)\">absolute positioning(9.6)<a title=\"#absolute-positioning(9.6)\" href=\"#absolute-positioning(9.6)\"></a></h2>\n<p>在绝对定位模型中，一个盒子相对于它的包含块显式地偏移。它完全从normal flow 中被删除(它对后面的兄弟节点没有影响)。<br>\n绝对定位的盒子为normal flow 的子代和绝对(但不是固定的)位置的子代建立一个新的包含块。<br>\n但是，绝对位置元素当中的内容不会围绕着其他任何box进行排版。它们可能掩盖另一个盒子的内容(或本身被掩盖)，这取决于重叠盒子的堆栈级别。</p>\n<p>本规范中的 <code>absolutely positioned element</code> 意味着这个元素的position属性的值为 absolute or fixed .</p>\n<p>固定定位是绝对定位的一个子类. 仅有的不同是 对于固定定位的盒子, containing block 是被viewport 所构建的. 对于 连续媒体 当 文档 滚动的时候 固定定位的盒子不会发生移动. 在这方便 他们类似于固定的背景图像. 对于分页媒体 固定定位的 box 在每一个page上重复. 这对于在每个page的底部放置签名就很有用了. 使用固定定位的盒子 他们大于页面区域的位置将会被裁剪掉. 在初始包含块中不可见的固定位置框的部分将不会打印。</p>\n<h2 id=\"relationships-between-display-position-and-float(9.7)\">relationships between display position and float(9.7)<a title=\"#relationships-between-display-position-and-float(9.7)\" href=\"#relationships-between-display-position-and-float(9.7)\"></a></h2>\n<p>这三个属性会影响 box 的 生成和布局 – display  position 和 float之间的交互关系如下:</p>\n<ol>\n<li>如果display 为none, 当 position and float 不进行设置的时候, 则对应的元素不会生成box</li>\n<li>否则, 如果 position 的值为 absolute or fixed,box使用绝对定位, float的computed value为none,display按照下表进行设置, 此时box的位置由 top right bottom left 的值 这个box的 containing box决定.</li>\n<li>否则, 如果 float的值不是 none, 则这个被浮动的box的display属性按照下表进行设置.</li>\n<li>否则, 如果 当前元素是 根元素, 则display的值按照下表进行设置(除非你指定了一个在CSS2.1当中未定义的值)</li>\n<li>否则, display的值就是你手动指定的值<br>\n<img src=\"https://search.pstatic.net/common/?src=https://i.imgur.com/MdmuXcx.png\" alt=\"\" loading=\"lazy\"></li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下面这几章内容有空再翻译</span><br><span class=\"line\">## comparison of normal flow floats and absolute positioning(9.8) </span><br><span class=\"line\">## layered presentation(9.9)</span><br></pre></td></tr></table></figure>\n","prev":{"title":"CSS BFC的应用场景","link":"post/2021/202101/CSS-BFC的应用场景"},"next":{"title":"CSS实现各种奇形怪状","link":"post/2021/202101/CSS实现各种奇形怪状"},"plink":"http://blog.lipanpanx.com/post/2021/202101/CSS-VFM/","toc":[{"id":"introduction-to--visual-formatting-model(9.1)","title":"introduction to  visual formatting model(9.1)","index":"1"},{"id":"controlling-box-generation(9.2)","title":"controlling box generation(9.2)","index":"2"},{"id":"postioning-schemes(9.3)","title":"postioning schemes(9.3)","index":"3"},{"id":"normal-flow(9.4)","title":"normal flow(9.4)","index":"4","children":[{"id":"bfc(block-formatting-context)","title":"BFC(block formatting context)","index":"4.1"},{"id":"ifc(inline-formatting-context)","title":"IFC(inline formatting context)","index":"4.2"}]},{"id":"floats(9.5)","title":"floats(9.5)","index":"5"},{"id":"absolute-positioning(9.6)","title":"absolute positioning(9.6)","index":"6"},{"id":"relationships-between-display-position-and-float(9.7)","title":"relationships between display position and float(9.7)","index":"7"}],"reward":true,"copyright":{"author":"李攀攀","link":"<a href=\"http://blog.lipanpanx.com/post/2021/202101/CSS-VFM/\" title=\"CSS visual formatting model\">http://blog.lipanpanx.com/post/2021/202101/CSS-VFM/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"},"reading_time":"4094 字约 27 分钟"}