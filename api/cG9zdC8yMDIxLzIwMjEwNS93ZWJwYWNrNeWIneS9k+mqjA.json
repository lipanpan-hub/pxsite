{"title":"webpack5 初体验","date":"2021-05-20T07:29:21.000Z","date_formatted":{"ll":"2021年5月20日","L":"2021/05/20","MM-DD":"05-20"},"link":"post/2021/202105/webpack5初体验","updated":"2022-04-11T03:41:31.974Z","content":"<p><a href=\"https://webpack.js.org/\" target=\"_blank\">webpack official site</a></p>\n<h2 id=\"0x10-为什么需要webpack\">0x10 为什么需要webpack<a title=\"#0x10-为什么需要webpack\" href=\"#0x10-为什么需要webpack\"></a></h2>\n<p>在我们开发前端项目的时候会使用各种技术, 这些技术对于项目的开发,调试,维护 都至关重要. 在写css的时候会用到各种 css preprocessor:比如 sass scss less stylus. 在写js的时候会用到 es6语法 和 ts 还有对于commonjs 和 es module 两种模块化方案. 但是这些代码, 是无法被浏览器所识别的, 或者说无法被所有的浏览器所识别,这是个重要的问题.在项目上线之前必须对代码进行处理达到上线要求,当然有很多的小工具可以解决问题. 但是Webpack是个大而全的工具,他会尽可能的解决你所有的问题,实现程序员舒爽的开发体验</p>\n<h2 id=\"0x20-webpack安装和基本使用\">0x20 webpack安装和基本使用<a title=\"#0x20-webpack安装和基本使用\" href=\"#0x20-webpack安装和基本使用\"></a></h2>\n<h3 id=\"webpack安装\">webpack安装<a title=\"#webpack安装\" href=\"#webpack安装\"></a></h3>\n<details><summary>webpack全局安装和局部安装</summary><p>如果是全局安装 可以使用命令:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install webpack -g </span><br></pre></td></tr></table></figure>\n<p>如果是局部安装则可以在项目的根目录执行:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install webpack </span><br></pre></td></tr></table></figure>\n<p>全局安装和局部安装各有各的好处,但是在项目中我还是建议进行局部安装.因为如果你使用的是全局安装的方式,你打包也使用全局的webpack进行打包, 当你的同事clone你的项目的时候,他并不确定你的webpack版本是什么版本,有时候就会造成麻烦,但是如果你是局部安装的化 同事打开你的项目 执行 npm install 之后, 只需要 执行 npx webpack 就可以使用与这个项目相关联的版本进行打包操作, 确保团队内部所有成员的 webpack版本都是一致的</p>\n</details><h3 id=\"webpack配置文件\">webpack配置文件<a title=\"#webpack配置文件\" href=\"#webpack配置文件\"></a></h3>\n<details><summary>webpack默认配置文件名称和位置</summary><p>在webpack安装完成之后, 我们就可以在项目当中创建一个webpack配置文件来指导 webpack的打包行为了:<br>\n本来从 webpack4 开始所有的 配置都可以在执行webpack命令的时候以参数的形式传递, 但是很显然 使用配置文件更加的高效. 在我们执行webpack命令的时候如果后面没有跟任何参数, CLI会按照下面的顺序寻找默认配置文件(优先级递增):</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.webpack/webpackfile.js &gt; .webpack/webpack.config.js &gt; webpack.config.js</span><br></pre></td></tr></table></figure>\n<p>从上我们可以看出CLI会首先去根目录下的 .webpack目录下寻找配置文件然后才去到根目录下面寻找配置文件, 但是他们的优先级递增,也就是说如果项目根目录下面如果存在默认配置文件(webpack.config.js),则项目根目录中的默认配置文件的优先级在所有默认配置文件当中是最高的.</p>\n<p>当然除了使用默认配置文件之外webpack 也可以通过<code>--config</code> 选项强行指定一个配置文件.</p>\n<p>webpack配置文件是一般情况下是js文件(也可以是ts或coffee等文件类型), 我们可以手动写成如下格式(当然也可以使用webpack init生成):</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**<span class=\"doctag\">@type <span class=\"type\">&#123;import(&#x27;webpack&#x27;).Configuration&#125;</span> </span>*/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// webpack 配置项</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = config;</span><br></pre></td></tr></table></figure>\n<p>在webpack的配置文件当中我们可以进行一系列的配置,并通过module.exports进行导出,下面我会讲下webpack的一些常见配置项.</p>\n</details><h3 id=\"webpack打包中的几个基本概念\">webpack打包中的几个基本概念<a title=\"#webpack打包中的几个基本概念\" href=\"#webpack打包中的几个基本概念\"></a></h3>\n<details><summary>chunk and bundle</summary><p><code>bundle</code>: 由多个不同的module生成, bundle中包含了已经经过loading和compilation处理的最终源文件.bundle文件就是最终部署到服务器上的文件.</p>\n<p><code>chunk</code>: chunk 在webpack打包过程中处理文件捆绑过程, webpack中的bundle就是由chunk组成的 ,通常情况下 chunk和bundle是1:1对应的,但是在某些特定配置下却不是这样的,比如当你为了方便调试通过特定的设置为源文件生成单独的map文件时,这个时候chunk和bundle的关系就是1:2.</p>\n<p><code>dependency graph</code>: 在我们的项目中一个文件会依赖另外一个文件或者多个文件,这种依赖关系需要被系统的描述从而确保webpack能够有效的包含所有你的程序需要的module/asset.这种系统的依赖关系描述就是依赖图.</p>\n<p><code>entry point</code>: webpack为你的程序构建依赖图需要一个起始点,这个起始点就是entry point.一般情况下就是一个文件也叫做入口文件.</p>\n<p><code>code splitting</code>: 把你的代码分割称为多个 bundle/chunk 然后就可以按需加载了而不需加载包含很多内容的一整个单独的bundle.</p>\n<p><code>bundle splitting</code>: 优化构建,bundle分割允许webpack为单个程序生成多个bundle, 并且他们的关系是相对独立的,相互之间不会有太多的影响, 分成多个相互独立的文件可以增加并行加载的速度, 而且需要重新发布的时候可以只更新需要更新的文件充分的利用浏览器的缓存减少客户端的下载量.<br>\n<a href=\"https://segmentfault.com/a/1190000017893334\" target=\"_blank\">一篇不错的相关文章</a></p>\n</details><h3 id=\"webpack配置文件中的详细配置项\">webpack配置文件中的详细配置项<a title=\"#webpack配置文件中的详细配置项\" href=\"#webpack配置文件中的详细配置项\"></a></h3>\n<p><a href=\"https://webpack.js.org/configuration/\" target=\"_blank\">webpack configuration</a></p>\n<details><summary>webpack配置选项 entry 和 context</summary><p>在webpack配置文件当中我们需要通过配置项<code>entry</code>去指定一个webpack打包的入口文件,这个入口文件 就是webpack构建bundle 的起始点.</p>\n<p>entry选项可以被赋予的合法值有4中类型:</p>\n<ul>\n<li>string</li>\n<li>[string]</li>\n<li>object = {<br>\n<key> string |<br>\n[string] |<br>\nobject = { import string | [string], dependOn string | [string], filename string, layer string }<br>\n}</li>\n<li>function() =&gt; string |<br>\n[string] |<br>\nobject = { <key> string | [string] } |<br>\nobject = { import string | [string], dependOn string | [string], filename string }</li>\n</ul>\n<p>如果给定的值是一个表示文件路径的字符串, webpack会找到该文件并且作为入口文件</p>\n<p>如果给定的值是一个包含多个路径字符串的数组,webpack会同时将这多个文件作为入口文件,但是位于数组内的文件会被打包到一起形成同一个bundle</p>\n<p>如果给定的值是一个对象就可以生成多个bundle,对象的key对应的是生成的bundle的名字,对象的value的值 可以是字符串,字符串数组 或者是一个descriptor对象. descriptor对象提供了更多的可选项用来配置入口文件,更加详细的内容可以参考官方的文档.</p>\n<p>如果给定的值是一个函数,则这个函数可以返回 如上的 字符串 字符串列表和对象</p>\n<p>在我们配置entry选项指定入口文件的时候一般情况下使用的是相对路径,这个相对路径是使用当前工作目录作为根路径进行解析的, 其实我们有可以通过 context 选项去人为的指定一个根路径, 此时解析 入口文件的相对路径就是从context指定的路径开始解析的.</p>\n</details><details><summary>webpack配置选项 output</summary><p>output配置项是webpack配置当中的一个顶级key,它的值是一个对象,这个对象当中又包含了很多的选项,这些选项决定了, 你如何输出 bundles, assets,以及其他你的项目当中需要打包或者加载的内容.</p>\n<p>output下面的配置项挺多的 我简单讲几个常用的配置项:</p>\n<p><code>output.filename</code>: 它的值是一个字符串或者返回字符串的函数用来指定输出的bundle的名字<br>\n<code>output.path</code>: 它的值是一个绝对路径用来指定输出的目录<br>\n<code>output.publicPath</code>:<br>\n<code>output.chunkFilename</code>:<br>\n<code>output.library</code>:<br>\n<code>output.libraryTarget</code>:</p>\n</details><details><summary>webpack配置选项 module</summary><p>webpack的 module选项是一个相当复杂的选项,它也是一个顶级key,它的值是一个对象这个对象当中包含了很多的子选项,这些子选项一起配置了webpack在遇到不同的文件的时候使用什么样的loader 去对文件执行预处理操作.</p>\n<p>这里的loader就是文件的预处理工具.</p>\n</details><details><summary>webpack配置选项 resolve</summary></details><details><summary>webpack配置选项 devServer</summary><p>当我们在开发一个项目的时候 往往需要多次编译我们的代码, 如果每次都是手动操作会让人感觉很烦, 所以webpack就提供了多种方式帮助开发者在文件发生变动的时候自动取编译代码,直接展示代码更改的结果,  使用 webpack-dev-server就是这其中的一种方式.要想使用 webpack-dev-server需要先安装相应的包:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev webpack-dev-server</span><br></pre></td></tr></table></figure>\n<p>然后再webpack的配置文件中添加 <code>devServer</code> 配置项,这个配置项的值是一个对象,对象当中包含了很多子配置项,通过这些子配置项我们就能方便的配置 webpack-dev-server的各种行为了,下面会详细讲.<br>\n然后通过CLI命令就能让 webpack-dev-server 运行起来:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx webpack serve</span><br></pre></td></tr></table></figure>\n<p>devServer的子配置项众多,我这里就讲几个常用的配置项:</p>\n</details><details><summary>webpack配置选项 optimization</summary></details>","prev":{"title":"webpack-cli init 命令","link":"post/2021/202105/webpack-cli-init"},"next":{"title":"codesandbox为创建好的项目增加terminal","link":"post/2021/202105/codesandbox创建带terminal项目"},"plink":"http://blog.lipanpanx.com/post/2021/202105/webpack5初体验/","toc":[{"id":"0x10-为什么需要webpack","title":"0x10 为什么需要webpack","index":"1"},{"id":"0x20-webpack安装和基本使用","title":"0x20 webpack安装和基本使用","index":"2","children":[{"id":"webpack安装","title":"webpack安装","index":"2.1"},{"id":"webpack配置文件","title":"webpack配置文件","index":"2.2"},{"id":"webpack打包中的几个基本概念","title":"webpack打包中的几个基本概念","index":"2.3"},{"id":"webpack配置文件中的详细配置项","title":"webpack配置文件中的详细配置项","index":"2.4"}]}],"reward":true,"copyright":{"author":"李攀攀","link":"<a href=\"http://blog.lipanpanx.com/post/2021/202105/webpack5初体验/\" title=\"webpack5 初体验\">http://blog.lipanpanx.com/post/2021/202105/webpack5初体验/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"},"reading_time":"2290 字约 15 分钟"}