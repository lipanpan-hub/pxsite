{"title":"Python设计模式-单例模式","date":"2020-07-03T17:48:01.000Z","date_formatted":{"ll":"2020年7月3日","L":"2020/07/03","MM-DD":"07-03"},"link":"post/2020/202006/Python设计模式-单例模式","updated":"2022-01-31T23:33:48.642Z","content":"<h3 id=\"什么是单例模式?\">什么是单例模式?<a title=\"#什么是单例模式?\" href=\"#什么是单例模式?\"></a></h3>\n<blockquote>\n<p>单例模式是一种写程序的方式,用单例模式设计的类,无论你去实例化多少次,得到的都是同一个实例,一般我们设计的类每次实例化都会生成不同的实例,但是单例模式就是反其道而行之,就像下面这样:</p>\n</blockquote>\n<p><img src=\"https://cisco-test-images.oss-cn-shenzhen.aliyuncs.com/WindowsTerminal_20_06_28_09_251_531.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<blockquote>\n<p>上图中的ClassA和ClassB 都是采用的 单例设计模式,而ClassC没有采用单例设计模式</p>\n</blockquote>\n<blockquote>\n<p>我们可以清晰的看到 ClassA的两个不同的实例在内存中的地址是相同的,也就是说两次实例化得到的对象是同一个对象,ClassB和ClassA也是一样的,因为都采用了单例设计模式, 而ClassC因为没有采用单例设计模式所以他的两个实例对象指向不同的内存地址,也就是说两次实例化得到的是两个不同的对象.</p>\n</blockquote>\n<h3 id=\"为什么需要单例模式?\">为什么需要单例模式?<a title=\"#为什么需要单例模式?\" href=\"#为什么需要单例模式?\"></a></h3>\n<blockquote>\n<p>要弄清楚为什么需要单例模式, 首先需要知道单例模式提供了哪些优秀的特性?</p>\n<blockquote>\n<p>单例模式提供的最为优秀的特性就是:单例模式可以允许你在程序的任何地方访问某个特定的对象</p>\n</blockquote>\n<p>通过单例设计模式, 你可以在不定义全局变量的情况下,在程序的任何地方访问你所指定的对象,单例模式所提供的功能和全局变量是一样的, 但是通过单例模式设计, 你就可以在无需牺牲代码可读性和安全性的前提下完成和全局变量完全一样的功能. 单例模式吸收了全局变量的优点摒弃了全局变量的缺点,是替代可恶全局变量不二的选择.</p>\n<blockquote>\n<p>在上面的例子中我们可以看到无论实例化多少次ClassA得到的都是同一个对象, 如果这个类处于一个比较大的工程中,在这个工程中的任何位置实例化ClassA得到的都是同一个对象,这不就是全局变量吗, 但是和全局变量不同的是通过单例模式产生对象的代码更加的易读,而且这种面向对象的编程方式可以确保ClassA所产生的对象只能被对象自身的方法所操作, 这样就更加的安全, 而且你可以通过获取实例的方法对返回对象的行为进行更多的限制.</p>\n</blockquote>\n<p>为什么需要单例模式? 本质上是因为人们需要全局变量,需要一个更加好用更加安全的全局变量, 单例模式的出现解决了全局变量的现有问题, 所以人们才需要单例模式</p>\n</blockquote>\n<h4 id=\"单例模式和全局变量的区别?\">单例模式和全局变量的区别?<a title=\"#单例模式和全局变量的区别?\" href=\"#单例模式和全局变量的区别?\"></a></h4>\n<blockquote>\n<p>单例模式像极了全局变量, 但是单例模式毕竟不是实现全局变量, 除了上述所说的异同点之外, 通过单例模式产生的对象和全局变量还有一个明显的区别就是全局变量一旦定义就绝对不会再发生改变, 但是单例模式虽然说每次返回的都是一个固定的对象, 但这个固定的对象还是可以通过单例类自身的一些方法去更改的,所以单例模式产生的对象和全局变量比起来只能说是相对固定的.</p>\n</blockquote>\n<h3 id=\"单例模式如何实现?\">单例模式如何实现?<a title=\"#单例模式如何实现?\" href=\"#单例模式如何实现?\"></a></h3>\n<blockquote>\n<p>任何一门语言要想实现单例模式,可能都有很多的实现方法,但是实现思路大同小异,肯定都是在第一次生成实例的时候就直接把实例给存储到某个地方,然后在下一次实例化的时候直接返回这个事先被存储起来的实例,而不是重新去实例化返回一个新的实例.</p>\n</blockquote>\n<h4 id=\"基于装饰器的实现\">基于装饰器的实现<a title=\"#基于装饰器的实现\" href=\"#基于装饰器的实现\"></a></h4>\n<blockquote>\n<p>Python实现单例模式一个比较优雅的实现方式就是通过装饰器去实现,如下所示:</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">singleton</span>(<span class=\"params\">cls</span>):</span></span><br><span class=\"line\">    instances = &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getinstance</span>(<span class=\"params\">*args,**kwargs</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> cls <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> instances:</span><br><span class=\"line\">            instances[cls] = cls(*args,**kwargs)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instances[cls]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getinstance</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@singleton</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassA</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@singleton</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassB</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassC</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">aa=ClassA()</span><br><span class=\"line\">aaa=ClassA()</span><br><span class=\"line\"></span><br><span class=\"line\">bb=ClassB()</span><br><span class=\"line\">bbb=ClassB()</span><br><span class=\"line\"></span><br><span class=\"line\">cc=ClassC()</span><br><span class=\"line\">ccc=ClassC()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>上面的例子我们可以看到singleton是一个装饰器函数, 通过闭包的原理让其内部的 instances 变量的生命周期和全局变量等同,然后把被装饰的类第一次实例化生成的对象直接存储在instances中,在取对象的时候直接从在instances字典中找到事先存储好的对象返回,就是通过这样的方式实现单例的.</p>\n</blockquote>\n<blockquote>\n<p>单例模式的实现方式还有很多种: 比如通过类属性实现, 通过元类实现等多种方式, 甚至每一种实现可能都有自己特定的应用场景, 但是我觉得通过装饰器实现最为优雅, 本着少就是多的原则, 其他的实现方式我就不再赘述, 如果对其他的实现方式感兴趣可以加我微信(备注好公司岗位)交流沟通.</p>\n</blockquote>\n","prev":{"title":"波士顿动力狗SPOT购买指北","link":"post/2020/202007/波士顿动力狗SPOT购买指北"},"next":{"title":"Python海象算子(赋值表达式)","link":"post/2020/202006/Python海象算子"},"plink":"http://blog.lipanpanx.com/post/2020/202006/Python设计模式-单例模式/","toc":[{"id":"什么是单例模式?","title":"什么是单例模式?","index":"1"},{"id":"为什么需要单例模式?","title":"为什么需要单例模式?","index":"2"},{"id":"单例模式如何实现?","title":"单例模式如何实现?","index":"3"}],"reward":true,"copyright":{"author":"李攀攀","link":"<a href=\"http://blog.lipanpanx.com/post/2020/202006/Python设计模式-单例模式/\" title=\"Python设计模式-单例模式\">http://blog.lipanpanx.com/post/2020/202006/Python设计模式-单例模式/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"},"reading_time":"1378 字约 9 分钟"}